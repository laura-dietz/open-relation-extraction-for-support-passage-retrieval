Python 200pxOfficial Python Logo multi-paradigm : object-oriented , imperative , functional , procedural , reflective 1991 Guido van Rossum Python Software Foundation 3.2.2 	0	query201_Python_(programming_language)\S\0
/ yes 2011 09 04 2.7.2 	1	query201_Python_(programming_language)\S\1
/ yes 2011 06 11 3.3a0 	2	query201_Python_(programming_language)\S\2
http ://docs .python 	3	query201_Python_(programming_language)\S\3
.org/dev/ 	4	query201_Python_(programming_language)\S\4
dev/Python v3.3a0 	5	query201_Python_(programming_language)\S\5
documentation http ://docs .python 	6	query201_Python_(programming_language)\S\6
.org/dev/ 	7	query201_Python_(programming_language)\S\7
dev/Python v3.3a0 	8	query201_Python_(programming_language)\S\8
documentation duck , dynamic , strong CPython , IronPython , Jython , Python for S60 , PyPy Cython , RPython , Stackless Python ABC , ALGOL 68 , http ://www.amk 	9	query201_Python_(programming_language)\S\9
"documentation duck dynamic www.amk"	"is"	"strong CPython"	9	query201_Python_(programming_language)\P\9-0
"documentation duck dynamic www.amk"	"is"	"IronPython"	9	query201_Python_(programming_language)\P\9-1
"documentation duck dynamic www.amk"	"is"	"Jython"	9	query201_Python_(programming_language)\P\9-2
"documentation duck dynamic www.amk"	"is"	"Python for S60"	9	query201_Python_(programming_language)\P\9-3
"documentation duck dynamic www.amk"	"is"	"PyPy Cython"	9	query201_Python_(programming_language)\P\9-4
"documentation duck dynamic www.amk"	"is"	"RPython"	9	query201_Python_(programming_language)\P\9-5
"documentation duck dynamic www.amk"	"is"	"Stackless Python ABC"	9	query201_Python_(programming_language)\P\9-6
"documentation duck dynamic www.amk"	"is"	"ALGOL 68"	9	query201_Python_(programming_language)\P\9-7
"documentation duck dynamic www.amk"	"is"	"http"	9	query201_Python_(programming_language)\P\9-8
.ca/python/writing/gvr-interview 	10	query201_Python_(programming_language)\S\10
Interview with Guido van Rossum ( 1998 ) Kuchling Andrew M. 	11	query201_Python_(programming_language)\S\11
amk .ca 	12	query201_Python_(programming_language)\S\12
22 Dec 2006 29 2007 http ://www.amk 	13	query201_Python_(programming_language)\S\13
.ca/python/writing/gvr-interview 	14	query201_Python_(programming_language)\S\14
Interview with Guido van Rossum ( 1998 ) Kuchling Andrew M. 	15	query201_Python_(programming_language)\S\15
amk .ca 	16	query201_Python_(programming_language)\S\16
22 Dec 2006 29 2007 C , van Rossum Guido 1993 An Introduction to Python for UNIX/C Programmers Proceedings of the NLUUG najaarsconferentie ( Dutch UNIX users group ) even though the design of C is far from ideal , its influence on Python is considerable . 	17	query201_Python_(programming_language)\S\17
"22 Dec 2006 29 2007 C An Introduction to Python for UNIX/C Programmers Proceedings of the NLUUG najaarsconferentie even though the design of C is far from ideal its influence on Python is considerable"	"is"	"van Rossum Guido 1993"	17	query201_Python_(programming_language)\P\17-0
"the NLUUG najaarsconferentie"	"is"	"Dutch UNIX users group"	17	query201_Python_(programming_language)\P\17-1
"the NLUUG najaarsconferentie"	"is"	"Dutch UNIX users group"	17	query201_Python_(programming_language)\P\17-2
"its influence on Python"	"is"	"ideal considerable"	17	query201_Python_(programming_language)\P\17-3
http ://citeseerx .ist.psu.edu/viewdoc/summary 	18	query201_Python_(programming_language)\S\18
?doi=10.1.1.38.2023 	19	query201_Python_(programming_language)\S\19
van Rossum Guido 1993 An Introduction to Python for UNIX/C Programmers Proceedings of the NLUUG najaarsconferentie ( Dutch UNIX users group ) even though the design of C is far from ideal , its influence on Python is considerable . 	20	query201_Python_(programming_language)\S\20
"the NLUUG najaarsconferentie"	"is"	"Dutch UNIX users group"	20	query201_Python_(programming_language)\P\20-0
"the NLUUG najaarsconferentie"	"is"	"Dutch UNIX users group"	20	query201_Python_(programming_language)\P\20-1
"its influence on Python"	"is"	"ideal considerable"	20	query201_Python_(programming_language)\P\20-2
http ://citeseerx .ist.psu.edu/viewdoc/summary 	21	query201_Python_(programming_language)\S\21
?doi=10.1.1.38.2023 	22	query201_Python_(programming_language)\S\22
C++ , http ://docs .python 	23	query201_Python_(programming_language)\S\23
.org/tutorial/classes 	24	query201_Python_(programming_language)\S\24
.html 	25	query201_Python_(programming_language)\S\25
9 . 	26	query201_Python_(programming_language)\S\26
Classes - Python v2.7.1 	27	query201_Python_(programming_language)\S\27
documentation It is a mixture of the class mechanisms found in C++ and Modula-3 http ://docs .python 	28	query201_Python_(programming_language)\S\28
.org/tutorial/classes 	29	query201_Python_(programming_language)\S\29
.html 	30	query201_Python_(programming_language)\S\30
9 . 	31	query201_Python_(programming_language)\S\31
Classes - Python v2.7.1 	32	query201_Python_(programming_language)\S\32
documentation It is a mixture of the class mechanisms found in C++ and Modula-3 Haskell , Icon , Java , Lisp , Modula-3 , Perl Boo , Cobra , D , Falcon , Groovy , JavaScript , Ruby Cross-platform Python Software Foundation License .py 	33	query201_Python_(programming_language)\S\33
, .pyw 	34	query201_Python_(programming_language)\S\34
, .pyc 	35	query201_Python_(programming_language)\S\35
, .pyo 	36	query201_Python_(programming_language)\S\36
, .pyd 	37	query201_Python_(programming_language)\S\37
Python Programming Python is a general-purpose , high-level programming language http ://docs .python 	38	query201_Python_(programming_language)\S\38
.org/faq/general 	39	query201_Python_(programming_language)\S\39
.html#what-is-python-good-for 	40	query201_Python_(programming_language)\S\40
What is Python Good For ? 2008-09-05 General Python FAQ Python Software Foundation http ://docs .python 	41	query201_Python_(programming_language)\S\41
.org/faq/general 	42	query201_Python_(programming_language)\S\42
.html#what-is-python-good-for 	43	query201_Python_(programming_language)\S\43
What is Python Good For ? 2008-09-05 General Python FAQ Python Software Foundation whose design philosophy emphasizes code readability . 	44	query201_Python_(programming_language)\S\44
"2008-09-05 General Python FAQ Python Software Foundation"	"has"	"design philosophy"	44	query201_Python_(programming_language)\P\44-0
"2008-09-05 General Python FAQ Python Software Foundation design philosophy"	"emphasizes"	"code readability"	44	query201_Python_(programming_language)\P\44-1
http ://www.python 	45	query201_Python_(programming_language)\S\45
.org/doc/essays/blurb/ 	46	query201_Python_(programming_language)\S\46
What is Python ? Executive Summary Python Software Foundation Python documentation 2007-03-21 http ://www.python 	47	query201_Python_(programming_language)\S\47
.org/doc/essays/blurb/ 	48	query201_Python_(programming_language)\S\48
What is Python ? Executive Summary Python Software Foundation Python documentation 2007-03-21 Python claims to combine "remarkable power with very clear syntax" , http ://www.python 	49	query201_Python_(programming_language)\S\49
"Executive Summary Python Software Foundation Python documentation www.python"	"is"	"http"	49	query201_Python_(programming_language)\P\49-0
"2007-03-21 Python"	"claims"	"to combine remarkable power with very clear syntax Executive Summary Python Software Foundation Python documentation www.python"	49	query201_Python_(programming_language)\P\49-1
"2007-03-21 Python"	"claims"	"to combine remarkable power Executive Summary Python Software Foundation Python documentation www.python"	49	query201_Python_(programming_language)\P\49-2
.org/doc/faq/general/#what-is-python 	50	query201_Python_(programming_language)\S\50
General Python FAQ python .org 	51	query201_Python_(programming_language)\S\51
Python Software Foundation 2009-06-27 http ://www.python 	52	query201_Python_(programming_language)\S\52
.org/doc/faq/general/#what-is-python 	53	query201_Python_(programming_language)\S\53
General Python FAQ python .org 	54	query201_Python_(programming_language)\S\54
Python Software Foundation 2009-06-27 and its standard library is large and comprehensive . 	55	query201_Python_(programming_language)\S\55
Python Software Foundation 2009-06-27 and its standard library is large and comprehensive . 	55	query201_Python_(programming_language)\S\55
"Python Software Foundation 2009-06-27"	"is"	"large"	55	query201_Python_(programming_language)\P\55-0
"Python Software Foundation its standard library"	"is"	"large"	55	query201_Python_(programming_language)\P\55-1
"Python Software Foundation 2009-06-27"	"is"	"comprehensive"	55	query201_Python_(programming_language)\P\55-2
"Python Software Foundation its standard library"	"is"	"comprehensive"	55	query201_Python_(programming_language)\P\55-3
Its use of indentation for block delimiters is unique among popular programming languages . 	56	query201_Python_(programming_language)\S\56
Its use of indentation for block delimiters is unique among popular programming languages . 	56	query201_Python_(programming_language)\S\56
"Its use of indentation for block delimiters"	"is unique"	"among popular programming languages"	56	query201_Python_(programming_language)\P\56-0
"Its use of indentation for block delimiters"	"is"	"unique"	56	query201_Python_(programming_language)\P\56-1
Python supports multiple programming paradigm , primarily but not limited to object-oriented , imperative and , to a lesser extent , functional programming styles . 	57	query201_Python_(programming_language)\S\57
"Python"	"supports"	"multiple programming paradigm"	57	query201_Python_(programming_language)\P\57-0
"Python"	"supports"	"multiple programming paradigm"	57	query201_Python_(programming_language)\P\57-1
"Python"	"supports"	"multiple programming paradigm"	57	query201_Python_(programming_language)\P\57-2
"Python"	"supports"	"multiple programming paradigm"	57	query201_Python_(programming_language)\P\57-3
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 	58	query201_Python_(programming_language)\S\58
Like other dynamic language , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts . 	59	query201_Python_(programming_language)\S\59
Like other dynamic language , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts . 	59	query201_Python_(programming_language)\S\59
Like other dynamic language , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts . 	59	query201_Python_(programming_language)\S\59
Like other dynamic language , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts . 	59	query201_Python_(programming_language)\S\59
Like other dynamic language , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts . 	59	query201_Python_(programming_language)\S\59
Like other dynamic language , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts . 	59	query201_Python_(programming_language)\S\59
Like other dynamic language , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts . 	59	query201_Python_(programming_language)\S\59
Using third-party tools , Python code can be packaged into standalone executable programs . 	60	query201_Python_(programming_language)\S\60
Using third-party tools , Python code can be packaged into standalone executable programs . 	60	query201_Python_(programming_language)\S\60
"Python code"	"can be packaged"	"into standalone executable programs"	60	query201_Python_(programming_language)\P\60-0
Python interpreters are available for many operating systems . 	61	query201_Python_(programming_language)\S\61
"Python interpreters"	"are available"	"for many operating systems"	61	query201_Python_(programming_language)\P\61-0
"Python interpreters"	"are"	"available"	61	query201_Python_(programming_language)\P\61-1
The reference implementation of Python ( CPython ) is free and open source software and has a community-based development model , as do all or nearly all of its alternative implementations . 	62	query201_Python_(programming_language)\S\62
The reference implementation of Python ( CPython ) is free and open source software and has a community-based development model , as do all or nearly all of its alternative implementations . 	62	query201_Python_(programming_language)\S\62
"The reference implementation of Python"	"is free"	"as do all of its alternative implementations"	62	query201_Python_(programming_language)\P\62-0
"The reference implementation of Python"	"is free"	"as do nearly all of its alternative implementations"	62	query201_Python_(programming_language)\P\62-1
"The reference implementation of Python"	"is open source software"	"as do all of its alternative implementations"	62	query201_Python_(programming_language)\P\62-2
"The reference implementation of Python"	"is open source software"	"as do nearly all of its alternative implementations"	62	query201_Python_(programming_language)\P\62-3
"The reference implementation of Python"	"is"	"free"	62	query201_Python_(programming_language)\P\62-4
"The reference implementation of Python"	"is"	"open source software"	62	query201_Python_(programming_language)\P\62-5
"The reference implementation of Python"	"is"	"has a community-based development model as do all of its alternative implementations"	62	query201_Python_(programming_language)\P\62-6
"The reference implementation of Python"	"is"	"has a community-based development model as do nearly all of its alternative implementations"	62	query201_Python_(programming_language)\P\62-7
"The reference implementation of Python"	"is"	"has a community-based development model"	62	query201_Python_(programming_language)\P\62-8
"The reference implementation of Python"	"is"	"has a community-based development model"	62	query201_Python_(programming_language)\P\62-9
CPython is managed by the non-profit Python Software Foundation . 	63	query201_Python_(programming_language)\S\63
"CPython"	"is managed"	"by the non-profit Python Software Foundation"	63	query201_Python_(programming_language)\P\63-0
History of Python thumbupright=0.7rightGuido 	64	query201_Python_(programming_language)\S\64
van Rossum _ the creator of Python Python was conceived in the late 1980s http ://www.artima.com/intv/pythonP.html 	65	query201_Python_(programming_language)\S\65
"van Rossum"	"_"	"the creator of Python Python www.artima.com/intv/pythonP.html"	65	query201_Python_(programming_language)\P\65-0
The Making of Python 2007-03-22 Artima Developer http ://www.artima.com/intv/pythonP.html 	66	query201_Python_(programming_language)\S\66
The Making of Python 2007-03-22 Artima Developer and its implementation was started in December 1989 http ://python-history .blogspot.com/2009/01/brief-timeline-of-python 	67	query201_Python_(programming_language)\S\67
.html 	68	query201_Python_(programming_language)\S\68
A Brief Timeline of Python 2009-01-20 Guido van Rossum http ://python-history .blogspot.com/2009/01/brief-timeline-of-python 	69	query201_Python_(programming_language)\S\69
.html 	70	query201_Python_(programming_language)\S\70
A Brief Timeline of Python 2009-01-20 Guido van Rossum by Guido van Rossum at CWI in the Netherlands as a successor to the ABC programming language ( itself inspired by SETL ) http ://mail.python 	71	query201_Python_(programming_language)\S\71
A Brief Timeline of Python 2009-01-20 Guido van Rossum by Guido van Rossum at CWI in the Netherlands as a successor to the ABC programming language ( itself inspired by SETL ) http ://mail.python 	71	query201_Python_(programming_language)\S\71
A Brief Timeline of Python 2009-01-20 Guido van Rossum by Guido van Rossum at CWI in the Netherlands as a successor to the ABC programming language ( itself inspired by SETL ) http ://mail.python 	71	query201_Python_(programming_language)\S\71
.org/pipermail/python-dev/2000-August/008881.html 	72	query201_Python_(programming_language)\S\72
SETL ( was : Lukewarm about range literals ) August 29 , 2000 2011-03-13 Python-Dev van Rossum Guido Guido van Rossum http ://mail.python 	73	query201_Python_(programming_language)\S\73
.org/pipermail/python-dev/2000-August/008881.html 	74	query201_Python_(programming_language)\S\74
SETL ( was : Lukewarm about range literals ) August 29 , 2000 2011-03-13 Python-Dev van Rossum Guido Guido van Rossum capable of exception handling and interfacing with the Amoeba operating system . 	75	query201_Python_(programming_language)\S\75
http ://www.python 	76	query201_Python_(programming_language)\S\76
.org/doc/faq/general/#why-was-python-created-in-the-first-place 	77	query201_Python_(programming_language)\S\77
General Python FAQ Python Programming Language – Official Website Python Software Foundation 2007-03-22 http ://www.python 	78	query201_Python_(programming_language)\S\78
.org/doc/faq/general/#why-was-python-created-in-the-first-place 	79	query201_Python_(programming_language)\S\79
General Python FAQ Python Programming Language – Official Website Python Software Foundation 2007-03-22 Van Rossum is Python 's principal author , and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community , ''Benevolent Dictator for Life '' ( BDFL ) . 	80	query201_Python_(programming_language)\S\80
"General Python FAQ Python Programming Language Benevolent Dictator for Life"	"is"	"BDFL"	80	query201_Python_(programming_language)\P\80-0
"Official Website Python Software Foundation 2007-03-22 Van Rossum"	"is"	"Python 's principal author 80 General Python FAQ Python Programming Language Benevolent Dictator for Life"	80	query201_Python_(programming_language)\P\80-1
"Official Website Python Software Foundation 2007-03-22 Van Rossum"	"is"	"Python 's principal his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community 80 General Python FAQ Python Programming Language Benevolent Dictator for Life"	80	query201_Python_(programming_language)\P\80-2
"Official Website Python Software Foundation 2007-03-22 Van Rossum"	"is"	"Python 's principal his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community 80 General Python FAQ Python Programming Language Benevolent Dictator for Life"	80	query201_Python_(programming_language)\P\80-3
"Official Website Python Software Foundation 2007-03-22 Van Rossum"	"is"	"Python 's principal his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community 80 General Python FAQ Python Programming Language Benevolent Dictator for Life"	80	query201_Python_(programming_language)\P\80-4
"the direction of Python"	"is reflected"	"in the title given to him by the Python community"	80	query201_Python_(programming_language)\P\80-5
"the title"	"be given"	"to him by the Python community"	80	query201_Python_(programming_language)\P\80-6
"the title"	"be given"	"to him"	80	query201_Python_(programming_language)\P\80-7
Python 2.0 	81	query201_Python_(programming_language)\S\81
was released on 16 October 2000 , with many major new features including a full garbage collector and support for Unicode . 	82	query201_Python_(programming_language)\S\82
was released on 16 October 2000 , with many major new features including a full garbage collector and support for Unicode . 	82	query201_Python_(programming_language)\S\82
was released on 16 October 2000 , with many major new features including a full garbage collector and support for Unicode . 	82	query201_Python_(programming_language)\S\82
was released on 16 October 2000 , with many major new features including a full garbage collector and support for Unicode . 	82	query201_Python_(programming_language)\S\82
However , the most important change was to the development process itself , with a shift to a more transparent and community-backed process . 	83	query201_Python_(programming_language)\S\83
"the most important change"	"was"	"to the development process itself with a shift to a more transparent process"	83	query201_Python_(programming_language)\P\83-0
"the most important change"	"was"	"to the development process itself with a shift to a more community-backed process"	83	query201_Python_(programming_language)\P\83-1
"the most important change"	"was"	"to the development process itself"	83	query201_Python_(programming_language)\P\83-2
http ://www.amk 	84	query201_Python_(programming_language)\S\84
.ca/python/2.0/ 	85	query201_Python_(programming_language)\S\85
What 's New in Python 2.0 	86	query201_Python_(programming_language)\S\86
"New in Python 2.0"	"'s"	"What"	86	query201_Python_(programming_language)\P\86-0
A.M. 	87	query201_Python_(programming_language)\S\87
Kuchling and Moshe Zadka 2007-03-22 http ://www.amk 	88	query201_Python_(programming_language)\S\88
.ca/python/2.0/ 	89	query201_Python_(programming_language)\S\89
What 's New in Python 2.0 	90	query201_Python_(programming_language)\S\90
"New in Python 2.0"	"'s"	"What"	90	query201_Python_(programming_language)\P\90-0
A.M. 	91	query201_Python_(programming_language)\S\91
Kuchling and Moshe Zadka 2007-03-22 Python 3.0 	92	query201_Python_(programming_language)\S\92
( also known as Python 3000 or py3k ) , a major , backwards-incompatible release , was released on 3 December 2008 http ://python .org/download/releases/3.0/ 	93	query201_Python_(programming_language)\S\93
Python 3.0 	94	query201_Python_(programming_language)\S\94
Release Python Software Foundation 2009-07-08 http ://python .org/download/releases/3.0/ 	95	query201_Python_(programming_language)\S\95
Python 3.0 	96	query201_Python_(programming_language)\S\96
Release Python Software Foundation 2009-07-08 after a long period of testing . 	97	query201_Python_(programming_language)\S\97
Many of its major features have been backport to the backwards-compatible Python 2.6 	98	query201_Python_(programming_language)\S\98
Many of its major features have been backport to the backwards-compatible Python 2.6 	98	query201_Python_(programming_language)\S\98
"Many of its major features"	"have been backport 2.6"	"to the backwards-compatible Python"	98	query201_Python_(programming_language)\P\98-0
"Many of its major features"	"have been"	"backport 2.6"	98	query201_Python_(programming_language)\P\98-1
and 2.7 	99	query201_Python_(programming_language)\S\99
. 	100	query201_Python_(programming_language)\S\100
http ://www.python 	101	query201_Python_(programming_language)\S\101
.org/dev/peps/pep-3000/ 	102	query201_Python_(programming_language)\S\102
PEP 3000 -- Python 3000 van Rossum Guido 5 April 2006 Python Software Foundation 2009-06-27 http ://www.python 	103	query201_Python_(programming_language)\S\103
.org/dev/peps/pep-3000/ 	104	query201_Python_(programming_language)\S\104
PEP 3000 -- Python 3000 van Rossum Guido 5 April 2006 Python Software Foundation 2009-06-27 Python has twice been awarded as TIOBE Programming Language of the Year ( 2007 , 2010 ) , which is given to the language with the greatest growth in popularity over the course of the year ( as measured by the TIOBE index ) . 	105	query201_Python_(programming_language)\S\105
"April 2006 Python Software Foundation 2009-06-27 Python"	"has been awarded"	"3000 van Rossum Guido twice"	5	query201_Python_(programming_language)\P\105-0
"April 2006 Python Software Foundation 2009-06-27 Python"	"has been awarded"	"as TIOBE Programming Language of the Year 3000 van Rossum Guido"	5	query201_Python_(programming_language)\P\105-1
"April 2006 Python Software Foundation 2009-06-27 Python"	"has been awarded"	"3000 van Rossum Guido"	5	query201_Python_(programming_language)\P\105-2
"the Year"	"is"	"2007 2010"	5	query201_Python_(programming_language)\P\105-3
"the Year"	"is given"	"to the language with the greatest growth in popularity over the course of the year as measured by the TIOBE index"	5	query201_Python_(programming_language)\P\105-4
http ://www.tiobe 	106	query201_Python_(programming_language)\S\106
.com/index.php/content/paperinfo/tpci/index 	107	query201_Python_(programming_language)\S\107
.html 	108	query201_Python_(programming_language)\S\108
TIOBE Programming Community Index for January 2011 January 2010 TIOBE Software 2011-01-10 http ://www.tiobe 	109	query201_Python_(programming_language)\S\109
TIOBE Programming Community Index for January 2011 January 2010 TIOBE Software 2011-01-10 http ://www.tiobe 	109	query201_Python_(programming_language)\S\109
.com/index.php/content/paperinfo/tpci/index 	110	query201_Python_(programming_language)\S\110
.html 	111	query201_Python_(programming_language)\S\111
TIOBE Programming Community Index for January 2011 January 2010 TIOBE Software 2011-01-10 Python is a multi-paradigm programming language . 	112	query201_Python_(programming_language)\S\112
"TIOBE Software 2011-01-10 Python"	"is"	"a multi-paradigm programming language 2011 January 2010"	112	query201_Python_(programming_language)\P\112-0
Rather than forcing programmers to adopt a particular style of programming , it permits several styles : object-oriented programming and structured programming are fully supported , and there are a number of language features which support functional programming and aspect-oriented programming ( including by metaprogramming http ://www.python 	113	query201_Python_(programming_language)\S\113
Rather than forcing programmers to adopt a particular style of programming , it permits several styles : object-oriented programming and structured programming are fully supported , and there are a number of language features which support functional programming and aspect-oriented programming ( including by metaprogramming http ://www.python 	113	query201_Python_(programming_language)\S\113
Rather than forcing programmers to adopt a particular style of programming , it permits several styles : object-oriented programming and structured programming are fully supported , and there are a number of language features which support functional programming and aspect-oriented programming ( including by metaprogramming http ://www.python 	113	query201_Python_(programming_language)\S\113
Rather than forcing programmers to adopt a particular style of programming , it permits several styles : object-oriented programming and structured programming are fully supported , and there are a number of language features which support functional programming and aspect-oriented programming ( including by metaprogramming http ://www.python 	113	query201_Python_(programming_language)\S\113
"object-oriented programming"	"are supported"	"fully"	113	query201_Python_(programming_language)\P\113-0
"object-oriented structured programming"	"are supported"	"fully"	113	query201_Python_(programming_language)\P\113-1
"language features"	"support"	"functional programming"	113	query201_Python_(programming_language)\P\113-2
"language features"	"support"	"functional aspect-oriented programming including by metaprogramming http"	113	query201_Python_(programming_language)\P\113-3
"aspect-oriented programming"	"be including"	"by metaprogramming http"	113	query201_Python_(programming_language)\P\113-4
.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf 	114	query201_Python_(programming_language)\S\114
http ://www.webcitation 	115	query201_Python_(programming_language)\S\115
.org/5lubkaJRc 	116	query201_Python_(programming_language)\S\116
2009-12-10 PDF Python Metaclasses : Who ? Why ? When ? The Cain Gang Ltd. 	117	query201_Python_(programming_language)\S\117
2009-06-27 http ://www.python 	118	query201_Python_(programming_language)\S\118
.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf 	119	query201_Python_(programming_language)\S\119
http ://www.webcitation 	120	query201_Python_(programming_language)\S\120
.org/5lubkaJRc 	121	query201_Python_(programming_language)\S\121
2009-12-10 PDF Python Metaclasses : Who ? Why ? When ? The Cain Gang Ltd. 	122	query201_Python_(programming_language)\S\122
2009-06-27 and by magic methods ) . 	123	query201_Python_(programming_language)\S\123
http ://docs .python 	124	query201_Python_(programming_language)\S\124
.org/3.0/reference/datamodel 	125	query201_Python_(programming_language)\S\125
.html#special-method-names 	126	query201_Python_(programming_language)\S\126
3.3 	127	query201_Python_(programming_language)\S\127
. 	128	query201_Python_(programming_language)\S\128
Special method names The Python Language Reference Python Software Foundation 2009-06-27 http ://docs .python 	129	query201_Python_(programming_language)\S\129
.org/3.0/reference/datamodel 	130	query201_Python_(programming_language)\S\130
.html#special-method-names 	131	query201_Python_(programming_language)\S\131
3.3 	132	query201_Python_(programming_language)\S\132
. 	133	query201_Python_(programming_language)\S\133
Special method names The Python Language Reference Python Software Foundation 2009-06-27 Many other paradigms are supported using extensions , such as pyDBC http ://www.nongnu.org/pydbc/ 	134	query201_Python_(programming_language)\S\134
"The Python Language Reference Python Software Foundation 2009-06-27 Many other paradigms"	"are supported"	"using extensions such as pyDBC http 134 Special method names www.nongnu.org/pydbc/"	134	query201_Python_(programming_language)\P\134-0
Contracts for Python September 24 , 2011 http ://www.nongnu.org/pydbc/ 	135	query201_Python_(programming_language)\S\135
"Python September 24"	"is"	"2011 http"	135	query201_Python_(programming_language)\P\135-0
Contracts for Python September 24 , 2011 and Contracts for Python http ://www.wayforward 	136	query201_Python_(programming_language)\S\136
.net/pycontract/ 	137	query201_Python_(programming_language)\S\137
Contracts for Python September 24 , 2011 http ://www.wayforward 	138	query201_Python_(programming_language)\S\138
"Python September 24"	"is"	"2011 http"	138	query201_Python_(programming_language)\P\138-0
.net/pycontract/ 	139	query201_Python_(programming_language)\S\139
Contracts for Python September 24 , 2011 which allow design by contract . 	140	query201_Python_(programming_language)\S\140
"Python September 24 2011"	"allow"	"design by contract"	140	query201_Python_(programming_language)\P\140-0
"Python September 24 2011"	"allow"	"design"	140	query201_Python_(programming_language)\P\140-1
Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management . 	141	query201_Python_(programming_language)\S\141
"Python"	"uses"	"dynamic typing"	141	query201_Python_(programming_language)\P\141-0
"Python"	"uses"	"dynamic a combination of reference counting"	141	query201_Python_(programming_language)\P\141-1
"Python"	"uses"	"dynamic a combination of reference a cycle-detecting garbage collector for memory management"	141	query201_Python_(programming_language)\P\141-2
An important feature of Python is dynamic name resolution ( late binding ) , which binds method and variable names during program execution . 	142	query201_Python_(programming_language)\S\142
"An important feature of Python"	"is"	"dynamic name resolution"	142	query201_Python_(programming_language)\P\142-0
"An important feature of Python is dynamic name resolution"	"is"	"late binding"	142	query201_Python_(programming_language)\P\142-1
"dynamic name resolution"	"binds"	"method during program execution"	142	query201_Python_(programming_language)\P\142-2
"dynamic name resolution"	"binds"	"variable names during program execution"	142	query201_Python_(programming_language)\P\142-3
"dynamic name resolution"	"binds"	"method"	142	query201_Python_(programming_language)\P\142-4
"dynamic name resolution"	"binds"	"variable names"	142	query201_Python_(programming_language)\P\142-5
Rather than requiring all desired functionality to be built into the language 's core , Python was designed to be highly extensible . 	143	query201_Python_(programming_language)\S\143
"all desired functionality"	"be built"	"into the language 's core"	143	query201_Python_(programming_language)\P\143-0
"the language"	"has"	"core"	143	query201_Python_(programming_language)\P\143-1
"the language"	"has"	"core"	143	query201_Python_(programming_language)\P\143-2
"the language"	"has"	"core"	143	query201_Python_(programming_language)\P\143-3
New built-in modules can be easily written in C , C++ or Cython . 	144	query201_Python_(programming_language)\S\144
"New built-in modules"	"can be written"	"in C easily"	144	query201_Python_(programming_language)\P\144-0
"New built-in modules"	"can be written"	"in C++ easily"	144	query201_Python_(programming_language)\P\144-1
"New built-in modules"	"can be written"	"in Cython easily"	144	query201_Python_(programming_language)\P\144-2
"New built-in modules"	"can be written"	"in C"	144	query201_Python_(programming_language)\P\144-3
"New built-in modules"	"can be written"	"in C++"	144	query201_Python_(programming_language)\P\144-4
"New built-in modules"	"can be written"	"in Cython"	144	query201_Python_(programming_language)\P\144-5
Python can also be used as an extension language for existing modules and applications that need a programmable interface . 	145	query201_Python_(programming_language)\S\145
"Python"	"can be used"	"as an extension language for existing modules also"	145	query201_Python_(programming_language)\P\145-0
"Python"	"can be used"	"as an extension language for existing applications also"	145	query201_Python_(programming_language)\P\145-1
"Python"	"can be used"	"as an extension language for existing modules"	145	query201_Python_(programming_language)\P\145-2
"Python"	"can be used"	"as an extension language for existing applications"	145	query201_Python_(programming_language)\P\145-3
"existing modules"	"need"	"a programmable interface"	145	query201_Python_(programming_language)\P\145-4
"existing applications"	"need"	"a programmable interface"	145	query201_Python_(programming_language)\P\145-5
This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC ( which espoused the opposite mindset ) . 	146	query201_Python_(programming_language)\S\146
"This design of a small core language with a large standard library"	"was intended"	"by Van Rossum from the very start"	146	query201_Python_(programming_language)\P\146-0
"This of a small core language with a large standard library an easily extensible interpreter"	"was intended"	"by Van Rossum from the very start"	146	query201_Python_(programming_language)\P\146-1
"This design of a small core language with a large standard library"	"was intended"	"by Van Rossum because of his frustrations with ABC"	146	query201_Python_(programming_language)\P\146-2
"This of a small core language with a large standard library an easily extensible interpreter"	"was intended"	"by Van Rossum because of his frustrations with ABC"	146	query201_Python_(programming_language)\P\146-3
"This design of a small core language with a large standard library"	"was intended"	"by Van Rossum"	146	query201_Python_(programming_language)\P\146-4
"This of a small core language with a large standard library an easily extensible interpreter"	"was intended"	"by Van Rossum"	146	query201_Python_(programming_language)\P\146-5
"This of a small core language with a large standard library an easily extensible interpreter"	"was intended"	"by Van Rossum"	146	query201_Python_(programming_language)\P\146-6
"This of a small core language with a large standard library an easily extensible interpreter"	"was intended"	"by Van Rossum"	146	query201_Python_(programming_language)\P\146-7
The design of Python offers only limited support for functional programming in the Lisp tradition . 	147	query201_Python_(programming_language)\S\147
"The design of Python"	"offers"	"only limited support for functional programming in the Lisp tradition"	147	query201_Python_(programming_language)\P\147-0
However , Python 's design philosophy exhibits significant similarities to those of minimalistic Lisp -family languages , such as Scheme . 	148	query201_Python_(programming_language)\S\148
However , Python 's design philosophy exhibits significant similarities to those of minimalistic Lisp -family languages , such as Scheme . 	148	query201_Python_(programming_language)\S\148
"Python 's design philosophy"	"exhibits"	"148 However significant similarities to those of minimalistic Lisp family languages such as Scheme"	148	query201_Python_(programming_language)\P\148-0
November 2009 The language has map( ) , reduce( ) and filter( ) functions , and the list comprehensions added in Python 2.0 	149	query201_Python_(programming_language)\S\149
"The language"	"has reduce"	"filter functions 149 November 2009"	149	query201_Python_(programming_language)\P\149-0
"The language"	"has reduce"	"filter the list comprehensions added in Python 2.0 149 November 2009"	149	query201_Python_(programming_language)\P\149-1
"The language"	"has reduce"	"filter functions"	149	query201_Python_(programming_language)\P\149-2
"The language"	"has reduce"	"filter the list comprehensions added in Python 2.0"	149	query201_Python_(programming_language)\P\149-3
"The language"	"has reduce"	"filter the list comprehensions added in Python 2.0"	149	query201_Python_(programming_language)\P\149-4
have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 	150	query201_Python_(programming_language)\S\150
have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 	150	query201_Python_(programming_language)\S\150
have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 	150	query201_Python_(programming_language)\S\150
have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 	150	query201_Python_(programming_language)\S\150
have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 	150	query201_Python_(programming_language)\S\150
have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 	150	query201_Python_(programming_language)\S\150
have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 	150	query201_Python_(programming_language)\S\150
have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 	150	query201_Python_(programming_language)\S\150
The standard library has two modules ( itertools and functools ) that implement functional tools borrowed from Haskell and Standard ML . 	151	query201_Python_(programming_language)\S\151
"The standard library"	"has"	"two modules itertools"	151	query201_Python_(programming_language)\P\151-0
"The standard library"	"has"	"two modules functools"	151	query201_Python_(programming_language)\P\151-1
"two modules itertools"	"implement"	"functional tools borrowed from Haskell"	151	query201_Python_(programming_language)\P\151-2
"two modules itertools"	"implement"	"functional tools borrowed from Standard ML"	151	query201_Python_(programming_language)\P\151-3
"two modules functools"	"implement"	"functional tools borrowed from Haskell"	151	query201_Python_(programming_language)\P\151-4
"two modules functools"	"implement"	"functional tools borrowed from Standard ML"	151	query201_Python_(programming_language)\P\151-5
"functional tools"	"be borrowed"	"from Haskell"	151	query201_Python_(programming_language)\P\151-6
"functional tools"	"be borrowed"	"from Standard ML"	151	query201_Python_(programming_language)\P\151-7
http ://docs .python 	152	query201_Python_(programming_language)\S\152
.org/lib/module-itertools 	153	query201_Python_(programming_language)\S\153
.html 	154	query201_Python_(programming_language)\S\154
6.5 	155	query201_Python_(programming_language)\S\155
itertools - Functions creating iterators for efficient looping Docs .python 	156	query201_Python_(programming_language)\S\156
.org 	157	query201_Python_(programming_language)\S\157
2008-11-24 http ://docs .python 	158	query201_Python_(programming_language)\S\158
.org/lib/module-itertools 	159	query201_Python_(programming_language)\S\159
.html 	160	query201_Python_(programming_language)\S\160
6.5 	161	query201_Python_(programming_language)\S\161
itertools - Functions creating iterators for efficient looping Docs .python 	162	query201_Python_(programming_language)\S\162
.org 	163	query201_Python_(programming_language)\S\163
2008-11-24 While offering choice in coding methodology , the Python philosophy rejects exuberant syntax , such as in Perl , in favor of a sparser , less-cluttered grammar . 	164	query201_Python_(programming_language)\S\164
"the Python philosophy"	"rejects"	"164 2008-11-24 While offering choice in coding methodology exuberant syntax such as in Perl in favor of a sparser less-cluttered grammar"	164	query201_Python_(programming_language)\P\164-0
Python 's developers expressly promote a particular " culture " or ideology based on what they want the language to be , favoring language forms they see as "beautiful" , "explicit " and " simple " . 	165	query201_Python_(programming_language)\S\165
"Python"	"has"	"developers"	165	query201_Python_(programming_language)\P\165-0
"Python 's developers"	"promote"	"a particular culture based on what they want the language to be favoring language forms expressly"	165	query201_Python_(programming_language)\P\165-1
"Python 's developers"	"promote"	"a particular ideology based on what they want the language to be favoring language forms expressly"	165	query201_Python_(programming_language)\P\165-2
"Python 's developers"	"promote"	"a particular culture based on what they want the language to be favoring language forms"	165	query201_Python_(programming_language)\P\165-3
"Python 's developers"	"promote"	"a particular ideology based on what they want the language to be favoring language forms"	165	query201_Python_(programming_language)\P\165-4
"a particular culture"	"be based"	"on what they want the language to be favoring language forms"	165	query201_Python_(programming_language)\P\165-5
"a particular ideology"	"be based"	"on what they want the language to be favoring language forms"	165	query201_Python_(programming_language)\P\165-6
"a particular ideology"	"be based"	"on what they want the language to be favoring language forms"	165	query201_Python_(programming_language)\P\165-7
"a particular ideology"	"be based"	"on what they want the language to be favoring language forms"	165	query201_Python_(programming_language)\P\165-8
"a particular ideology"	"be based"	"on what they want the language to be favoring language forms"	165	query201_Python_(programming_language)\P\165-9
"a particular ideology"	"be based"	"on what they want the language to be favoring language forms"	165	query201_Python_(programming_language)\P\165-10
As Alex Martelli put it in his Python Cookbook ( 2nd ed . 	166	query201_Python_(programming_language)\S\166
"Alex Martelli"	"put"	"it in his Python Cookbook 2nd ed"	166	query201_Python_(programming_language)\P\166-0
"Alex Martelli"	"put"	"it in his Python Cookbook 2nd ed"	166	query201_Python_(programming_language)\P\166-1
, p.&nbsp;230 	167	query201_Python_(programming_language)\S\167
) : " To describe something as clever is NOT considered a compliment in the Python culture . 	168	query201_Python_(programming_language)\S\168
) : " To describe something as clever is NOT considered a compliment in the Python culture . 	168	query201_Python_(programming_language)\S\168
) : " To describe something as clever is NOT considered a compliment in the Python culture . 	168	query201_Python_(programming_language)\S\168
" Python 's philosophy rejects the Perl " there is more than one way to do it " approach to language design in favor of " there should be one—and preferably only one—obvious way to do it " . 	169	query201_Python_(programming_language)\S\169
" Python 's philosophy rejects the Perl " there is more than one way to do it " approach to language design in favor of " there should be one—and preferably only one—obvious way to do it " . 	169	query201_Python_(programming_language)\S\169
"Python 's philosophy"	"rejects"	"the Perl"	169	query201_Python_(programming_language)\P\169-0
"more than one way"	"be do"	"it"	169	query201_Python_(programming_language)\P\169-1
http ://www.python 	170	query201_Python_(programming_language)\S\170
.org/dev/peps/pep-0020/ 	171	query201_Python_(programming_language)\S\171
PEP 20 - The Zen of Python Python Software Foundation 2004-08-23 2008-11-24 http ://www.python 	172	query201_Python_(programming_language)\S\172
.org/dev/peps/pep-0020/ 	173	query201_Python_(programming_language)\S\173
PEP 20 - The Zen of Python Python Software Foundation 2004-08-23 2008-11-24 Python 's developers eschew premature optimization , and moreover , reject patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity . 	174	query201_Python_(programming_language)\S\174
"Python Python Software Foundation 2004-08-23 2008-11-24 Python"	"has"	"developers"	174	query201_Python_(programming_language)\P\174-0
"The Zen of Python Python Software Foundation 2004-08-23 2008-11-24 Python 's developers"	"eschew"	"premature optimization moreover"	174	query201_Python_(programming_language)\P\174-1
"The Zen of Python Python Software Foundation 2004-08-23 2008-11-24 Python 's developers"	"eschew"	"premature optimization"	174	query201_Python_(programming_language)\P\174-2
"PEP 20 The Zen of Python Python Software Foundation 2004-08-23 2008-11-24 Python 's developers eschew premature optimization moreover"	"reject"	"patches to non-critical parts of CPython"	174	query201_Python_(programming_language)\P\174-3
"PEP 20 The Zen of Python Python Software Foundation 2004-08-23 2008-11-24 Python 's developers eschew premature optimization moreover"	"reject"	"patches"	174	query201_Python_(programming_language)\P\174-4
"non-critical parts of CPython"	"would offer"	"a marginal increase in speed at the cost of clarity"	174	query201_Python_(programming_language)\P\174-5
"non-critical parts of CPython"	"would offer"	"a marginal increase in speed"	174	query201_Python_(programming_language)\P\174-6
April 2011 April 2011 Python is sometimes described as " slow" . 	175	query201_Python_(programming_language)\S\175
"April 2011 April 2011 Python"	"is described"	"sometimes"	175	query201_Python_(programming_language)\P\175-0
http ://peter.mapledesign.co.uk/weblog/archives/python-is-slow 	176	query201_Python_(programming_language)\S\176
Python is ... 	177	query201_Python_(programming_language)\S\177
slow ? September 24 , 2011 December 21st , 2004 http ://peter.mapledesign.co.uk/weblog/archives/python-is-slow 	178	query201_Python_(programming_language)\S\178
Python is ... 	179	query201_Python_(programming_language)\S\179
slow ? September 24 , 2011 December 21st , 2004 However most problems and sections of programs are not speed critical . 	180	query201_Python_(programming_language)\S\180
"However most problems"	"are not speed"	"critical"	2004	query201_Python_(programming_language)\P\180-0
"However most sections of programs"	"are not speed"	"critical"	2004	query201_Python_(programming_language)\P\180-1
September 2011 When speed is important , Python programmers tend to try using a JIT compiler such as Psyco or using an alternative language implementation such as PyPy . 	181	query201_Python_(programming_language)\S\181
September 2011 When speed is important , Python programmers tend to try using a JIT compiler such as Psyco or using an alternative language implementation such as PyPy . 	181	query201_Python_(programming_language)\S\181
September 2011 When speed is important , Python programmers tend to try using a JIT compiler such as Psyco or using an alternative language implementation such as PyPy . 	181	query201_Python_(programming_language)\S\181
"September 2011 Python programmers"	"tend"	"to try using a JIT compiler such as Psyco"	181	query201_Python_(programming_language)\P\181-0
"September 2011 Python programmers"	"tend"	"to try a JIT compiler such as Psyco using an alternative language implementation such as PyPy"	181	query201_Python_(programming_language)\P\181-1
When pure Python code is not fast enough , time-critical functions can be rewritten in " closer to the metal " languages such as C , or by translating ( a dialect of ) Python code to C code using tools like Cython . 	182	query201_Python_(programming_language)\S\182
"pure Python code"	"is not fast"	"When"	182	query201_Python_(programming_language)\P\182-0
"pure Python code"	"is not fast"	"enough"	182	query201_Python_(programming_language)\P\182-1
"pure Python code"	"is not"	"fast"	182	query201_Python_(programming_language)\P\182-2
"time-critical functions"	"can be rewritten"	"182 When pure Python code is not fast enough"	182	query201_Python_(programming_language)\P\182-3
"time-critical functions"	"can be rewritten"	"in closer to the metal languages such as C 182"	182	query201_Python_(programming_language)\P\182-4
"time-critical functions"	"can be rewritten"	"in closer to the metal languages such as by translating a dialect of Python code to C code using tools like Cython 182"	182	query201_Python_(programming_language)\P\182-5
"time-critical functions"	"can be rewritten"	"182"	182	query201_Python_(programming_language)\P\182-6
"translating a dialect of Python code to C code"	"be using"	"tools like Cython"	182	query201_Python_(programming_language)\P\182-7
http ://www.python 	183	query201_Python_(programming_language)\S\183
.org/doc/essays/list2str 	184	query201_Python_(programming_language)\S\184
.html 	185	query201_Python_(programming_language)\S\185
Python Patterns - An Optimization Anecdote Python .org 	186	query201_Python_(programming_language)\S\186
2011-04-19 http ://www.python 	187	query201_Python_(programming_language)\S\187
.org/doc/essays/list2str 	188	query201_Python_(programming_language)\S\188
.html 	189	query201_Python_(programming_language)\S\189
Python Patterns - An Optimization Anecdote Python .org 	190	query201_Python_(programming_language)\S\190
2011-04-19 The core philosophy of the language is summarized by the document " PEP 20 ( The Zen of Python ) " . 	191	query201_Python_(programming_language)\S\191
"2011-04-19 The core philosophy of the language"	"is summarized"	"by the document"	191	query201_Python_(programming_language)\P\191-0
"2011-04-19 The core philosophy of the language"	"is summarized"	"by the PEP 20 The Zen of Python"	191	query201_Python_(programming_language)\P\191-1
An important goal of the Python developers is making Python fun to use . 	192	query201_Python_(programming_language)\S\192
"An important goal of the Python developers"	"is making"	"Python fun to use"	192	query201_Python_(programming_language)\P\192-0
"An important goal of the Python developers"	"is making"	"Python fun to use"	192	query201_Python_(programming_language)\P\192-1
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 	193	query201_Python_(programming_language)\S\193
"the television series Monty Python"	"has"	"Flying Circus"	193	query201_Python_(programming_language)\P\193-0
http ://docs .python 	194	query201_Python_(programming_language)\S\194
.org/tut/node3.html 	195	query201_Python_(programming_language)\S\195
Python Tutorial Docs .python 	196	query201_Python_(programming_language)\S\196
.org 	197	query201_Python_(programming_language)\S\197
2011-04-19 http ://docs .python 	198	query201_Python_(programming_language)\S\198
.org/tut/node3.html 	199	query201_Python_(programming_language)\S\199
Python Tutorial Docs .python 	200	query201_Python_(programming_language)\S\200
.org 	201	query201_Python_(programming_language)\S\201
2011-04-19 http ://learnpythonthehardway .org 	202	query201_Python_(programming_language)\S\202
Learn Python the Hard Way learnpythonthehardway .org 	203	query201_Python_(programming_language)\S\203
2011 http ://learnpythonthehardway .org 	204	query201_Python_(programming_language)\S\204
Learn Python the Hard Way learnpythonthehardway .org 	205	query201_Python_(programming_language)\S\205
2011 For example , the metasyntactic variables often used in Python literature are ''spam '' and ''eggs '' , http ://docs .python 	206	query201_Python_(programming_language)\S\206
.org/tut/node3.html 	207	query201_Python_(programming_language)\S\207
Python Tutorial docs .python 	208	query201_Python_(programming_language)\S\208
.org 	209	query201_Python_(programming_language)\S\209
2011-05-06 http ://stackoverflow.com/questions/5033906/in-python-should-i-use-else-after-a-return-in-an-if-block 	210	query201_Python_(programming_language)\S\210
Stack overflow , Python question stackoverflow.com 	211	query201_Python_(programming_language)\S\211
"Stack overflow"	"is"	"Python question stackoverflow.com"	211	query201_Python_(programming_language)\P\211-0
2011-05-06 For example , see the Python docs such as http ://docs .python 	212	query201_Python_(programming_language)\S\212
.org/tut/node3.html 	213	query201_Python_(programming_language)\S\213
Python Tutorial docs .python 	214	query201_Python_(programming_language)\S\214
.org 	215	query201_Python_(programming_language)\S\215
2011-05-06 and other examples such as http ://stackoverflow.com/questions/5033906/in-python-should-i-use-else-after-a-return-in-an-if-block 	216	query201_Python_(programming_language)\S\216
Stack overflow , Python question stackoverflow.com 	217	query201_Python_(programming_language)\S\217
"Stack overflow"	"is"	"Python question stackoverflow.com"	217	query201_Python_(programming_language)\P\217-0
2011-05-06 instead of the traditional ''foo '' and ''bar '' . 	218	query201_Python_(programming_language)\S\218
A common neologism in the Python community is pythonic , which can have a wide range of meanings related to program style . 	219	query201_Python_(programming_language)\S\219
"A common neologism in the Python community"	"is"	"pythonic which can have a wide range of meanings related to program style"	219	query201_Python_(programming_language)\P\219-0
"A common neologism in the Python community"	"is"	"pythonic which can have a wide range of meanings related to program style"	219	query201_Python_(programming_language)\P\219-1
"A common neologism in the Python community"	"is"	"pythonic which can have a wide range of meanings related to program style"	219	query201_Python_(programming_language)\P\219-2
To say that code is pythonic is to say that it uses Python idioms well , that it is natural or shows fluency in the language . 	220	query201_Python_(programming_language)\S\220
To say that code is pythonic is to say that it uses Python idioms well , that it is natural or shows fluency in the language . 	220	query201_Python_(programming_language)\S\220
To say that code is pythonic is to say that it uses Python idioms well , that it is natural or shows fluency in the language . 	220	query201_Python_(programming_language)\S\220
"To say that code is pythonic"	"is"	"to say that it uses Python idioms well that it is natural fluency in the language"	220	query201_Python_(programming_language)\P\220-0
"To say that code is pythonic"	"is"	"to say that it uses Python idioms well that it is shows fluency in the language"	220	query201_Python_(programming_language)\P\220-1
"To say that code is pythonic"	"is"	"to say that it uses Python idioms well that it is shows fluency in the language"	220	query201_Python_(programming_language)\P\220-2
"To say that code is pythonic"	"is"	"to say that it uses Python idioms well that it is shows fluency in the language"	220	query201_Python_(programming_language)\P\220-3
"To say that code is pythonic"	"is"	"to say that it uses Python idioms well that it is shows fluency in the language"	220	query201_Python_(programming_language)\P\220-4
"To say that code is pythonic"	"is"	"to say that it uses Python idioms well that it is shows fluency in the language"	220	query201_Python_(programming_language)\P\220-5
Likewise , to say of an interface or language feature that it is pythonic is to say that it works well with Python idioms , that its use meshes well with the rest of the language . 	221	query201_Python_(programming_language)\S\221
"Likewise"	"to say"	"of an interface"	221	query201_Python_(programming_language)\P\221-0
"Likewise"	"to say"	"of an language feature"	221	query201_Python_(programming_language)\P\221-1
"Likewise"	"to say"	"of an language feature"	221	query201_Python_(programming_language)\P\221-2
"that it is pythonic"	"is to"	"say that it works well with Python idioms that its use meshes well with the rest of the language an interface"	221	query201_Python_(programming_language)\P\221-3
"that it is pythonic"	"is to"	"say that it works well with Python idioms that its use meshes well with the rest of the language an language feature"	221	query201_Python_(programming_language)\P\221-4
"that it is pythonic"	"is to"	"say that it works well with Python idioms that its use meshes well with the rest of the language an language feature"	221	query201_Python_(programming_language)\P\221-5
"that it is pythonic"	"is to"	"say that it works well with Python idioms that its use meshes well with the rest of the language an language feature"	221	query201_Python_(programming_language)\P\221-6
"that it is pythonic"	"is to"	"say that it works well with Python idioms that its use meshes well with the rest of the language an language feature"	221	query201_Python_(programming_language)\P\221-7
"that it is pythonic"	"is to"	"say that it works well with Python idioms that its use meshes well with the rest of the language an language feature"	221	query201_Python_(programming_language)\P\221-8
"its use"	"meshes"	"well with the rest of the language"	221	query201_Python_(programming_language)\P\221-9
"its use"	"meshes"	"well"	221	query201_Python_(programming_language)\P\221-10
In contrast , a mark of unpythonic code is that it attempts to write C++ ( or Lisp , Perl , or Java ) code in Python —that is , provides a rough transcription rather than an idiomatic translation of forms from another language . 	222	query201_Python_(programming_language)\S\222
"In contrast"	"is"	"a mark of unpythonic code"	222	query201_Python_(programming_language)\P\222-0
"In contrast"	"is"	"that it attempts to write C++ Lisp code in Python"	222	query201_Python_(programming_language)\P\222-1
"In contrast"	"is"	"that it attempts to write C++ Perl code in Python"	222	query201_Python_(programming_language)\P\222-2
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-3
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-4
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-5
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-6
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-7
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-8
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-9
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-10
"In contrast"	"is"	"that it attempts to write C++ Java code in Python"	222	query201_Python_(programming_language)\P\222-11
The concept of pythonicity is tightly bound to Python 's minimalist philosophy of readability and avoiding the " there 's more than one way to do it " approach . 	223	query201_Python_(programming_language)\S\223
"The concept of pythonicity"	"is bound"	"to Python 's minimalist philosophy of readability tightly"	223	query201_Python_(programming_language)\P\223-0
"The concept of pythonicity"	"is bound"	"to Python 's minimalist philosophy of readability"	223	query201_Python_(programming_language)\P\223-1
"The concept of pythonicity"	"is avoiding"	"the there 's more than one way to do it approach tightly"	223	query201_Python_(programming_language)\P\223-2
"The concept of pythonicity"	"is avoiding"	"the there 's more than one way to do it approach to Python 's minimalist philosophy of readability"	223	query201_Python_(programming_language)\P\223-3
"The concept of pythonicity"	"is avoiding"	"the there 's more than one way to do it approach"	223	query201_Python_(programming_language)\P\223-4
"The concept of pythonicity"	"is avoiding"	"the there 's more than one way to do it approach"	223	query201_Python_(programming_language)\P\223-5
"more than one way"	"be do"	"it"	223	query201_Python_(programming_language)\P\223-6
"the there 's more than one way to do it"	"has"	"approach"	223	query201_Python_(programming_language)\P\223-7
Unreadable code or incomprehensible idioms are unpythonic . 	224	query201_Python_(programming_language)\S\224
"Unreadable code"	"are"	"unpythonic"	224	query201_Python_(programming_language)\P\224-0
"Unreadable incomprehensible idioms"	"are"	"unpythonic"	224	query201_Python_(programming_language)\P\224-1
Users and admirers of Python —most especially those considered knowledgeable or experienced—are often referred to as Pythonists , Pythonistas , and Pythoneers . 	225	query201_Python_(programming_language)\S\225
"most especially those"	"be considered"	"knowledgeable"	225	query201_Python_(programming_language)\P\225-0
"most especially those"	"be considered"	"experienced"	225	query201_Python_(programming_language)\P\225-1
"Users most especially those considered knowledgeable"	"are referred"	"to as Pythonists often"	225	query201_Python_(programming_language)\P\225-2
"Users most especially those considered knowledgeable"	"are referred"	"to as Pythonistas often"	225	query201_Python_(programming_language)\P\225-3
"Users most especially those considered knowledgeable"	"are referred"	"to as Pythoneers often"	225	query201_Python_(programming_language)\P\225-4
"admirers of Python most especially those considered knowledgeable"	"are referred"	"to as Pythonists often"	225	query201_Python_(programming_language)\P\225-5
"admirers of Python most especially those considered knowledgeable"	"are referred"	"to as Pythonistas often"	225	query201_Python_(programming_language)\P\225-6
"admirers of Python most especially those considered knowledgeable"	"are referred"	"to as Pythoneers often"	225	query201_Python_(programming_language)\P\225-7
"admirers of Python most especially those considered experienced"	"are referred"	"to as Pythonists often"	225	query201_Python_(programming_language)\P\225-8
"admirers of Python most especially those considered experienced"	"are referred"	"to as Pythonistas often"	225	query201_Python_(programming_language)\P\225-9
"admirers of Python most especially those considered experienced"	"are referred"	"to as Pythoneers often"	225	query201_Python_(programming_language)\P\225-10
"Users most especially those considered experienced"	"are referred"	"to as Pythonists often"	225	query201_Python_(programming_language)\P\225-11
"Users most especially those considered experienced"	"are referred"	"to as Pythonistas often"	225	query201_Python_(programming_language)\P\225-12
"Users most especially those considered experienced"	"are referred"	"to as Pythoneers often"	225	query201_Python_(programming_language)\P\225-13
"Users most especially those considered knowledgeable"	"are referred"	"to as Pythonists"	225	query201_Python_(programming_language)\P\225-14
"Users most especially those considered knowledgeable"	"are referred"	"to as Pythonistas"	225	query201_Python_(programming_language)\P\225-15
"Users most especially those considered knowledgeable"	"are referred"	"to as Pythoneers"	225	query201_Python_(programming_language)\P\225-16
"admirers of Python most especially those considered knowledgeable"	"are referred"	"to as Pythonists"	225	query201_Python_(programming_language)\P\225-17
"admirers of Python most especially those considered knowledgeable"	"are referred"	"to as Pythonistas"	225	query201_Python_(programming_language)\P\225-18
"admirers of Python most especially those considered knowledgeable"	"are referred"	"to as Pythoneers"	225	query201_Python_(programming_language)\P\225-19
"admirers of Python most especially those considered experienced"	"are referred"	"to as Pythonists"	225	query201_Python_(programming_language)\P\225-20
"admirers of Python most especially those considered experienced"	"are referred"	"to as Pythonistas"	225	query201_Python_(programming_language)\P\225-21
"admirers of Python most especially those considered experienced"	"are referred"	"to as Pythoneers"	225	query201_Python_(programming_language)\P\225-22
"Users most especially those considered experienced"	"are referred"	"to as Pythonists"	225	query201_Python_(programming_language)\P\225-23
"Users most especially those considered experienced"	"are referred"	"to as Pythonistas"	225	query201_Python_(programming_language)\P\225-24
"Users most especially those considered experienced"	"are referred"	"to as Pythoneers"	225	query201_Python_(programming_language)\P\225-25
http ://python .net/~goodger/projects/pycon/2007/idiomatic/handout 	226	query201_Python_(programming_language)\S\226
.html 	227	query201_Python_(programming_language)\S\227
Code Like a Pythonista : Idiomatic Python David Goodger http ://python .net/crew/mwh/hacks/objectthink 	228	query201_Python_(programming_language)\S\228
.html 	229	query201_Python_(programming_language)\S\229
How to think like a Pythonista http ://python .net/~goodger/projects/pycon/2007/idiomatic/handout 	230	query201_Python_(programming_language)\S\230
.html 	231	query201_Python_(programming_language)\S\231
Code Like a Pythonista : Idiomatic Python David Goodger ; http ://python .net/crew/mwh/hacks/objectthink 	232	query201_Python_(programming_language)\S\232
.html 	233	query201_Python_(programming_language)\S\233
How to think like a Pythonista The prefix Py can be used to show that something is related to Python . 	234	query201_Python_(programming_language)\S\234
How to think like a Pythonista The prefix Py can be used to show that something is related to Python . 	234	query201_Python_(programming_language)\S\234
How to think like a Pythonista The prefix Py can be used to show that something is related to Python . 	234	query201_Python_(programming_language)\S\234
"How to think like a Pythonista The prefix Py"	"can be used"	"to show that something is related to Python"	234	query201_Python_(programming_language)\P\234-0
"How to think like a Pythonista The prefix Py"	"can be used"	"to show that something is related to Python"	234	query201_Python_(programming_language)\P\234-1
Examples of the use of this prefix in names of Python applications or libraries include Pygame , a binding of SDL to Python ( commonly used to create games ) ; PyS60 , an implementation for the Symbian Series 60 Operating System ; PyQt and PyGTK , which bind Qt and GTK , respectively , to Python ; and PyPy , a Python implementation written in Python . 	235	query201_Python_(programming_language)\S\235
"Examples of the use of this prefix in names of Python applications"	"include"	"Pygame"	235	query201_Python_(programming_language)\P\235-0
"Examples of the use of this prefix in names of Python applications"	"include"	"PyS60"	235	query201_Python_(programming_language)\P\235-1
"Examples of the use of this prefix in names of Python applications"	"include"	"PyQt respectively to Python"	235	query201_Python_(programming_language)\P\235-2
"Examples of the use of this prefix in names of Python applications"	"include"	"PyQt PyGTK respectively to Python"	235	query201_Python_(programming_language)\P\235-3
"Examples of the use of this prefix in names of Python applications"	"include"	"PyPy"	235	query201_Python_(programming_language)\P\235-4
"Examples of the use of this prefix in names of Python libraries"	"include"	"Pygame"	235	query201_Python_(programming_language)\P\235-5
"Examples of the use of this prefix in names of Python libraries"	"include"	"PyS60"	235	query201_Python_(programming_language)\P\235-6
"Examples of the use of this prefix in names of Python libraries"	"include"	"PyQt respectively to Python"	235	query201_Python_(programming_language)\P\235-7
"Examples of the use of this prefix in names of Python libraries"	"include"	"PyQt PyGTK respectively to Python"	235	query201_Python_(programming_language)\P\235-8
"Examples of the use of this prefix in names of Python libraries"	"include"	"PyPy"	235	query201_Python_(programming_language)\P\235-9
"Examples of the use of this prefix in names of Python libraries"	"include"	"PyPy"	235	query201_Python_(programming_language)\P\235-10
"Examples of the use of this prefix in names of Python libraries"	"include"	"PyPy"	235	query201_Python_(programming_language)\P\235-11
"PyQt respectively to Python"	"is"	"a binding of SDL to Python commonly used to create games"	235	query201_Python_(programming_language)\P\235-12
"PyQt PyGTK respectively to Python"	"is"	"a binding of SDL to Python commonly used to create games"	235	query201_Python_(programming_language)\P\235-13
"PyQt PyGTK respectively to Python"	"is"	"a binding of SDL to Python commonly used to create games"	235	query201_Python_(programming_language)\P\235-14
"PyQt PyGTK respectively to Python"	"is"	"a binding of SDL to Python commonly used to create games"	235	query201_Python_(programming_language)\P\235-15
"PyQt respectively to Python"	"bind"	"Qt"	235	query201_Python_(programming_language)\P\235-16
"PyQt respectively to Python"	"bind"	"GTK"	235	query201_Python_(programming_language)\P\235-17
"PyGTK respectively to Python"	"bind"	"Qt"	235	query201_Python_(programming_language)\P\235-18
"PyGTK respectively to Python"	"bind"	"GTK"	235	query201_Python_(programming_language)\P\235-19
"PyGTK respectively to Python"	"bind"	"GTK"	235	query201_Python_(programming_language)\P\235-20
"a Python implementation"	"be written"	"in Python"	235	query201_Python_(programming_language)\P\235-21
The prefix is also used outside of naming software packages : the major Python conference is named PyCon . 	236	query201_Python_(programming_language)\S\236
"The prefix"	"is used"	"outside of naming software packages also"	236	query201_Python_(programming_language)\P\236-0
"The prefix"	"is used"	"outside of naming software packages"	236	query201_Python_(programming_language)\P\236-1
"the major Python conference"	"is named"	"PyCon"	236	query201_Python_(programming_language)\P\236-2
Python software Python is often used as a scripting language for web application , e.g 	237	query201_Python_(programming_language)\S\237
"Python software Python"	"is used"	"as a scripting language for web application often"	237	query201_Python_(programming_language)\P\237-0
"Python software Python"	"is used"	"as a scripting language for web application"	237	query201_Python_(programming_language)\P\237-1
. 	238	query201_Python_(programming_language)\S\238
via mod_wsgi for the Apache web server . 	239	query201_Python_(programming_language)\S\239
With Web Server Gateway Interface , a standard API has been developed to facilitate these applications . 	240	query201_Python_(programming_language)\S\240
"With Web Server Gateway Interface"	"a standard API has been developed"	"to facilitate these applications"	240	query201_Python_(programming_language)\P\240-0
"a standard API"	"240 With Web Server Gateway Interface has been developed"	"to facilitate these applications"	240	query201_Python_(programming_language)\P\240-1
Web application framework like Django , Pylons , TurboGears , web2py , Flask and Zope support developers in the design and maintenance of complex applications . 	241	query201_Python_(programming_language)\S\241
"Web application framework like Django"	"support"	"developers in the design of complex applications"	241	query201_Python_(programming_language)\P\241-0
"Web application framework like Django"	"support"	"developers in the maintenance of complex applications"	241	query201_Python_(programming_language)\P\241-1
"Web application framework like Pylons"	"support"	"developers in the design of complex applications"	241	query201_Python_(programming_language)\P\241-2
"Web application framework like Pylons"	"support"	"developers in the maintenance of complex applications"	241	query201_Python_(programming_language)\P\241-3
"Web application framework like TurboGears"	"support"	"developers in the design of complex applications"	241	query201_Python_(programming_language)\P\241-4
"Web application framework like TurboGears"	"support"	"developers in the maintenance of complex applications"	241	query201_Python_(programming_language)\P\241-5
"Web application framework like web2py"	"support"	"developers in the design of complex applications"	241	query201_Python_(programming_language)\P\241-6
"Web application framework like web2py"	"support"	"developers in the maintenance of complex applications"	241	query201_Python_(programming_language)\P\241-7
"Web application framework like Flask"	"support"	"developers in the design of complex applications"	241	query201_Python_(programming_language)\P\241-8
"Web application framework like Flask"	"support"	"developers in the maintenance of complex applications"	241	query201_Python_(programming_language)\P\241-9
"Web application framework like Zope"	"support"	"developers in the design of complex applications"	241	query201_Python_(programming_language)\P\241-10
"Web application framework like Zope"	"support"	"developers in the maintenance of complex applications"	241	query201_Python_(programming_language)\P\241-11
"Web application framework like Django"	"support"	"developers"	241	query201_Python_(programming_language)\P\241-12
"Web application framework like Pylons"	"support"	"developers"	241	query201_Python_(programming_language)\P\241-13
"Web application framework like TurboGears"	"support"	"developers"	241	query201_Python_(programming_language)\P\241-14
"Web application framework like web2py"	"support"	"developers"	241	query201_Python_(programming_language)\P\241-15
"Web application framework like Flask"	"support"	"developers"	241	query201_Python_(programming_language)\P\241-16
"Web application framework like Zope"	"support"	"developers"	241	query201_Python_(programming_language)\P\241-17
Libraries like NumPy , SciPy and Matplotlib allow Python to be used effectively in scientific computing . 	242	query201_Python_(programming_language)\S\242
"Libraries like NumPy"	"allow"	"Python to be used effectively in scientific computing"	242	query201_Python_(programming_language)\P\242-0
"Libraries like NumPy"	"allow"	"Python to be used effectively"	242	query201_Python_(programming_language)\P\242-1
"Libraries like SciPy"	"allow"	"Python to be used effectively in scientific computing"	242	query201_Python_(programming_language)\P\242-2
"Libraries like SciPy"	"allow"	"Python to be used effectively"	242	query201_Python_(programming_language)\P\242-3
"Libraries like Matplotlib"	"allow"	"Python to be used effectively in scientific computing"	242	query201_Python_(programming_language)\P\242-4
"Libraries like Matplotlib"	"allow"	"Python to be used effectively"	242	query201_Python_(programming_language)\P\242-5
Python has been successfully embedded in a number of software products as a scripting language , including in finite element method software such as Abaqus , 3D animation packages such as Houdini , Maya , MotionBuilder , Softimage , Cinema 4D , modo and Blender and 2D imaging programs like GIMP , Inkscape , Scribus and Paint Shop Pro . 	243	query201_Python_(programming_language)\S\243
"Python"	"has been embedded"	"in a number of software products successfully"	243	query201_Python_(programming_language)\P\243-0
"Python"	"has been embedded"	"in a number of software products as a scripting language including in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-1
"Python"	"has been embedded"	"in a number of software products"	243	query201_Python_(programming_language)\P\243-2
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-3
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-4
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-5
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-6
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-7
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-8
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-9
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-10
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-11
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-12
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-13
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-14
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-15
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-16
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-17
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-18
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-19
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-20
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-21
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-22
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-23
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-24
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-25
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-26
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-27
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-28
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-29
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-30
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-31
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-32
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-33
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-34
"a scripting language"	"be including"	"in finite element method software such as Abaqus"	243	query201_Python_(programming_language)\P\243-35
Documentation of the PSP Scripting API can be found at GNU GDB uses Python as a pretty printer to show complex structures such as C++ containers . 	244	query201_Python_(programming_language)\S\244
"Documentation of the PSP Scripting API"	"can be found"	"at GNU GDB uses Python as a pretty printer to show complex structures such as C++ containers"	244	query201_Python_(programming_language)\P\244-0
"GNU GDB"	"uses"	"Python as a pretty printer to show complex structures such as C++ containers"	244	query201_Python_(programming_language)\P\244-1
"GNU GDB"	"uses"	"Python"	244	query201_Python_(programming_language)\P\244-2
"a pretty printer"	"be show"	"complex structures such as C++ containers"	244	query201_Python_(programming_language)\P\244-3
ESRI is now promoting Python as the best choice for writing scripts in ArcGIS . 	245	query201_Python_(programming_language)\S\245
"ESRI"	"is promoting"	"Python now"	245	query201_Python_(programming_language)\P\245-0
"ESRI"	"is promoting"	"Python as the best choice for writing scripts in ArcGIS"	245	query201_Python_(programming_language)\P\245-1
"ESRI"	"is promoting"	"Python"	245	query201_Python_(programming_language)\P\245-2
GIS job market and programming ? http ://whygeo.com/questions/56/gis-job-market-and-programming 	246	query201_Python_(programming_language)\S\246
2010 November Oct 2010 GIS job market and programming ? http ://whygeo.com/questions/56/gis-job-market-and-programming 	247	query201_Python_(programming_language)\S\247
2010 November Oct 2010 About getting started with writing geoprocessing scripts http ://webhelp.esri.com/arcgisdesktop/9.2/index.cfm? 	248	query201_Python_(programming_language)\S\248
"Oct 2010"	"be started"	"About with writing geoprocessing scripts"	248	query201_Python_(programming_language)\P\248-0
"Oct 2010"	"be started"	"About"	248	query201_Python_(programming_language)\P\248-1
TopicName=About_getting_started_with_writing_geoprocessing_scripts 2006 November April 2007 About getting started with writing geoprocessing scripts http ://webhelp.esri.com/arcgisdesktop/9.2/index.cfm? 	249	query201_Python_(programming_language)\S\249
TopicName=About_getting_started_with_writing_geoprocessing_scripts 2006 November April 2007 It has even been used in several video games , http ://myeve .eve-online 	250	query201_Python_(programming_language)\S\250
.com/devblog 	251	query201_Python_(programming_language)\S\251
.asp 	252	query201_Python_(programming_language)\S\252
?a=blog&bid=488 Stackless Python 2.5 	253	query201_Python_(programming_language)\S\253
CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog As you may well know , your favorite space-game owes its existence to the programming language Python http ://www.webcitation 	254	query201_Python_(programming_language)\S\254
CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog As you may well know , your favorite space-game owes its existence to the programming language Python http ://www.webcitation 	254	query201_Python_(programming_language)\S\254
CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog As you may well know , your favorite space-game owes its existence to the programming language Python http ://www.webcitation 	254	query201_Python_(programming_language)\S\254
"your favorite space-game"	"254 CCP Games owes"	"its existence www.webcitation As you may well know"	254	query201_Python_(programming_language)\P\254-0
"your favorite space-game"	"254 CCP Games owes"	"its existence to the programming language Python http www.webcitation"	254	query201_Python_(programming_language)\P\254-1
"your favorite space-game"	"254 CCP Games owes"	"its existence www.webcitation"	254	query201_Python_(programming_language)\P\254-2
"CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog"	"your favorite space-game owes"	"its existence www.webcitation As you may well know"	254	query201_Python_(programming_language)\P\254-3
"CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog"	"your favorite space-game owes"	"its existence to the programming language Python http www.webcitation"	254	query201_Python_(programming_language)\P\254-4
"CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog"	"your favorite space-game owes"	"its existence www.webcitation"	254	query201_Python_(programming_language)\P\254-5
"CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog"	"your favorite space-game owes"	"its existence www.webcitation"	254	query201_Python_(programming_language)\P\254-6
.org/5ru5w3vSR 	255	query201_Python_(programming_language)\S\255
2010-08-10 http ://myeve .eve-online 	256	query201_Python_(programming_language)\S\256
.com/devblog 	257	query201_Python_(programming_language)\S\257
.asp 	258	query201_Python_(programming_language)\S\258
?a=blog&bid=488 Stackless Python 2.5 	259	query201_Python_(programming_language)\S\259
CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog As you may well know , your favorite space-game owes its existence to the programming language Python http ://www.webcitation 	260	query201_Python_(programming_language)\S\260
CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog As you may well know , your favorite space-game owes its existence to the programming language Python http ://www.webcitation 	260	query201_Python_(programming_language)\S\260
CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog As you may well know , your favorite space-game owes its existence to the programming language Python http ://www.webcitation 	260	query201_Python_(programming_language)\S\260
"your favorite space-game"	"260 CCP Games owes"	"its existence www.webcitation As you may well know"	260	query201_Python_(programming_language)\P\260-0
"your favorite space-game"	"260 CCP Games owes"	"its existence to the programming language Python http www.webcitation"	260	query201_Python_(programming_language)\P\260-1
"your favorite space-game"	"260 CCP Games owes"	"its existence www.webcitation"	260	query201_Python_(programming_language)\P\260-2
"CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog"	"your favorite space-game owes"	"its existence www.webcitation As you may well know"	260	query201_Python_(programming_language)\P\260-3
"CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog"	"your favorite space-game owes"	"its existence to the programming language Python http www.webcitation"	260	query201_Python_(programming_language)\P\260-4
"CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog"	"your favorite space-game owes"	"its existence www.webcitation"	260	query201_Python_(programming_language)\P\260-5
"CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog"	"your favorite space-game owes"	"its existence www.webcitation"	260	query201_Python_(programming_language)\P\260-6
.org/5ru5w3vSR 	261	query201_Python_(programming_language)\S\261
2010-08-10 http ://www.2kgames.com/civ4/blog_03.htm 	262	query201_Python_(programming_language)\S\262
Modding Sid Meier 's Civilization IV Caudill Barry 2005-09-20 Firaxis Games http ://www.webcitation 	263	query201_Python_(programming_language)\S\263
"Sid Meier"	"has"	"Civilization IV Caudill Barry 2005-09-20 Firaxis Games http"	263	query201_Python_(programming_language)\P\263-0
.org/5ru5VItfv 	264	query201_Python_(programming_language)\S\264
2010-08-10 Sid Meier 's Civilization IV Developer Blog we created three levels of tools ... 	265	query201_Python_(programming_language)\S\265
"Sid Meier"	"has"	"265 2010-08-10 Civilization IV Developer Blog"	265	query201_Python_(programming_language)\P\265-0
"Sid Meier"	"has"	"265 2010-08-10 Civilization IV Developer Blog"	265	query201_Python_(programming_language)\P\265-1
The next level offers Python and XML support , letting modders with more experience manipulate the game world and everything in it . 	266	query201_Python_(programming_language)\S\266
"The next level"	"offers"	"Python support letting modders with more experience manipulate the game world in it 266"	266	query201_Python_(programming_language)\P\266-0
"The next level"	"offers"	"Python support letting modders with more experience manipulate the game everything in it 266"	266	query201_Python_(programming_language)\P\266-1
"The next level"	"offers"	"XML support letting modders with more experience manipulate the game world in it 266"	266	query201_Python_(programming_language)\P\266-2
"The next level"	"offers"	"XML support letting modders with more experience manipulate the game everything in it 266"	266	query201_Python_(programming_language)\P\266-3
"The next level"	"offers"	"Python support 266"	266	query201_Python_(programming_language)\P\266-4
"The next level"	"offers"	"XML support 266"	266	query201_Python_(programming_language)\P\266-5
"The next level"	"be letting"	"modders with more experience manipulate the game world in it"	266	query201_Python_(programming_language)\P\266-6
"The next level"	"be letting"	"modders with more experience manipulate the game everything in it"	266	query201_Python_(programming_language)\P\266-7
"more experience"	"manipulate"	"the game world in it"	266	query201_Python_(programming_language)\P\266-8
"more experience"	"manipulate"	"the game everything in it"	266	query201_Python_(programming_language)\P\266-9
"more experience"	"manipulate"	"the game world"	266	query201_Python_(programming_language)\P\266-10
"more experience"	"manipulate"	"the game everything"	266	query201_Python_(programming_language)\P\266-11
http ://www.2kgames.com/civ4/blog_03.htm 	267	query201_Python_(programming_language)\S\267
Modding Sid Meier 's Civilization IV Caudill Barry 2005-09-20 Firaxis Games http ://www.webcitation 	268	query201_Python_(programming_language)\S\268
"Sid Meier"	"has"	"Civilization IV Caudill Barry 2005-09-20 Firaxis Games http"	268	query201_Python_(programming_language)\P\268-0
.org/5ru5VItfv 	269	query201_Python_(programming_language)\S\269
2010-08-10 Sid Meier 's Civilization IV Developer Blog we created three levels of tools ... 	270	query201_Python_(programming_language)\S\270
"Sid Meier"	"has"	"270 2010-08-10 Civilization IV Developer Blog"	270	query201_Python_(programming_language)\P\270-0
"Sid Meier"	"has"	"270 2010-08-10 Civilization IV Developer Blog"	270	query201_Python_(programming_language)\P\270-1
The next level offers Python and XML support , letting modders with more experience manipulate the game world and everything in it . 	271	query201_Python_(programming_language)\S\271
"The next level"	"offers"	"Python support letting modders with more experience manipulate the game world in it"	271	query201_Python_(programming_language)\P\271-0
"The next level"	"offers"	"Python support letting modders with more experience manipulate the game everything in it"	271	query201_Python_(programming_language)\P\271-1
"The next level"	"offers"	"XML support letting modders with more experience manipulate the game world in it"	271	query201_Python_(programming_language)\P\271-2
"The next level"	"offers"	"XML support letting modders with more experience manipulate the game everything in it"	271	query201_Python_(programming_language)\P\271-3
"The next level"	"offers"	"Python support"	271	query201_Python_(programming_language)\P\271-4
"The next level"	"offers"	"XML support"	271	query201_Python_(programming_language)\P\271-5
"The next level"	"be letting"	"modders with more experience manipulate the game world in it"	271	query201_Python_(programming_language)\P\271-6
"The next level"	"be letting"	"modders with more experience manipulate the game everything in it"	271	query201_Python_(programming_language)\P\271-7
"more experience"	"manipulate"	"the game world in it"	271	query201_Python_(programming_language)\P\271-8
"more experience"	"manipulate"	"the game everything in it"	271	query201_Python_(programming_language)\P\271-9
"more experience"	"manipulate"	"the game world"	271	query201_Python_(programming_language)\P\271-10
"more experience"	"manipulate"	"the game everything"	271	query201_Python_(programming_language)\P\271-11
and has been adopted as first of the three available programming language in Google App Engine , the other two being Java and Go . 	272	query201_Python_(programming_language)\S\272
"Google App Engine"	"is"	"the other two being Java"	272	query201_Python_(programming_language)\P\272-0
"Google App Engine"	"is"	"the other two being Go"	272	query201_Python_(programming_language)\P\272-1
http ://code .google 	273	query201_Python_(programming_language)\S\273
.com/apis/documents/docs/1.0/developers_guide_python 	274	query201_Python_(programming_language)\S\274
.html 	275	query201_Python_(programming_language)\S\275
Python Language Guide (v1.0) 	276	query201_Python_(programming_language)\S\276
"Python Language Guide"	"is"	"v1 .0"	276	query201_Python_(programming_language)\P\276-0
Google Documents List Data API v1.0 	277	query201_Python_(programming_language)\S\277
"Google Documents"	"List"	"Data API v1 .0"	277	query201_Python_(programming_language)\P\277-0
Google http ://www.webcitation 	278	query201_Python_(programming_language)\S\278
.org/5ru5FHxfV 	279	query201_Python_(programming_language)\S\279
2010-08-10 http ://code .google 	280	query201_Python_(programming_language)\S\280
.com/apis/documents/docs/1.0/developers_guide_python 	281	query201_Python_(programming_language)\S\281
.html 	282	query201_Python_(programming_language)\S\282
Python Language Guide (v1.0) 	283	query201_Python_(programming_language)\S\283
"Python Language Guide"	"is"	"v1 .0"	283	query201_Python_(programming_language)\P\283-0
Google Documents List Data API v1.0 	284	query201_Python_(programming_language)\S\284
"Google Documents"	"List"	"Data API v1 .0"	284	query201_Python_(programming_language)\P\284-0
Google http ://www.webcitation 	285	query201_Python_(programming_language)\S\285
.org/5ru5FHxfV 	286	query201_Python_(programming_language)\S\286
2010-08-10 Because of its similarities to Lisp , Python has also been used in Artificial Intelligence ( AI ) . 	287	query201_Python_(programming_language)\S\287
2010-08-10 Because of its similarities to Lisp , Python has also been used in Artificial Intelligence ( AI ) . 	287	query201_Python_(programming_language)\S\287
2010-08-10 Because of its similarities to Lisp , Python has also been used in Artificial Intelligence ( AI ) . 	287	query201_Python_(programming_language)\S\287
2010-08-10 Because of its similarities to Lisp , Python has also been used in Artificial Intelligence ( AI ) . 	287	query201_Python_(programming_language)\S\287
"Artificial Intelligence"	"is"	"AI"	287	query201_Python_(programming_language)\P\287-0
AI in Python http ://www.ainewsletter.com/newsletters/aix_0508.htm#python_ai_ai 	288	query201_Python_(programming_language)\S\288
AI in Python http ://www.ainewsletter.com/newsletters/aix_0508.htm#python_ai_ai 	289	query201_Python_(programming_language)\S\289
PyAIML , an interpreter package for AIML , the Artificial Intelligence Markup Language http ://pypi.python 	290	query201_Python_(programming_language)\S\290
"PyAIML pypi.python"	"is"	"an interpreter package for AIML"	290	query201_Python_(programming_language)\P\290-0
"PyAIML pypi.python"	"is"	"the Artificial Intelligence Markup Language http"	290	query201_Python_(programming_language)\P\290-1
.org/pypi/PyAIML 	291	query201_Python_(programming_language)\S\291
PyAIML , an interpreter package for AIML , the Artificial Intelligence Markup Language http ://pypi.python 	292	query201_Python_(programming_language)\S\292
"PyAIML pypi.python"	"is"	"an interpreter package for AIML"	292	query201_Python_(programming_language)\P\292-0
"PyAIML pypi.python"	"is"	"the Artificial Intelligence Markup Language http"	292	query201_Python_(programming_language)\P\292-1
.org/pypi/PyAIML 	293	query201_Python_(programming_language)\S\293
Artificial Intelligence : A Modern Approach http ://aima.cs 	294	query201_Python_(programming_language)\S\294
.berkeley 	295	query201_Python_(programming_language)\S\295
.edu/ 	296	query201_Python_(programming_language)\S\296
Artificial Intelligence : A Modern Approach http ://aima.cs 	297	query201_Python_(programming_language)\S\297
.berkeley 	298	query201_Python_(programming_language)\S\298
.edu/ 	299	query201_Python_(programming_language)\S\299
For many operating systems , Python is a standard component ; it ships with most Linux distribution , FreeBSD , NetBSD , OpenBSD and with Mac OS X and can be used from the terminal . 	300	query201_Python_(programming_language)\S\300
For many operating systems , Python is a standard component ; it ships with most Linux distribution , FreeBSD , NetBSD , OpenBSD and with Mac OS X and can be used from the terminal . 	300	query201_Python_(programming_language)\S\300
For many operating systems , Python is a standard component ; it ships with most Linux distribution , FreeBSD , NetBSD , OpenBSD and with Mac OS X and can be used from the terminal . 	300	query201_Python_(programming_language)\S\300
"ships with most Linux distribution"	"is"	"FreeBSD"	300	query201_Python_(programming_language)\P\300-0
"ships with most Linux distribution"	"is"	"NetBSD"	300	query201_Python_(programming_language)\P\300-1
"ships with most Linux distribution"	"is"	"OpenBSD"	300	query201_Python_(programming_language)\P\300-2
"ships with most Linux distribution"	"is"	"with Mac OS X"	300	query201_Python_(programming_language)\P\300-3
"with most Linux distribution can be used from the terminal"	"is"	"FreeBSD"	300	query201_Python_(programming_language)\P\300-4
"with most Linux distribution can be used from the terminal"	"is"	"NetBSD"	300	query201_Python_(programming_language)\P\300-5
"with most Linux distribution can be used from the terminal"	"is"	"OpenBSD"	300	query201_Python_(programming_language)\P\300-6
"with most Linux distribution can be used from the terminal"	"is"	"with Mac OS X"	300	query201_Python_(programming_language)\P\300-7
A number of Linux distributions use installers written in Python : Ubuntu uses the Ubiquity installer , while Red Hat Linux and Fedora use the Anaconda installer . 	301	query201_Python_(programming_language)\S\301
"A number of Linux distributions"	"use"	"installers written in Python"	301	query201_Python_(programming_language)\P\301-0
"A number of Linux distributions"	"use"	"installers written in Python"	301	query201_Python_(programming_language)\P\301-1
"A number of Linux distributions"	"use"	"installers written in Python"	301	query201_Python_(programming_language)\P\301-2
"A number of Linux distributions"	"use"	"installers written in Python"	301	query201_Python_(programming_language)\P\301-3
"A number of Linux distributions"	"use"	"installers written in Python"	301	query201_Python_(programming_language)\P\301-4
"Red Hat Linux"	"use"	"the Anaconda installer"	301	query201_Python_(programming_language)\P\301-5
"Red Hat Fedora"	"use"	"the Anaconda installer"	301	query201_Python_(programming_language)\P\301-6
Gentoo Linux uses Python in its package management system , Portage and the standard tool to access it , emerge . 	302	query201_Python_(programming_language)\S\302
"Gentoo Linux"	"uses"	"Python in its package management system"	302	query201_Python_(programming_language)\P\302-0
"Gentoo Linux"	"uses"	"Python in its package management Portage"	302	query201_Python_(programming_language)\P\302-1
"Gentoo Linux"	"uses"	"Python in its package management the standard tool to access it"	302	query201_Python_(programming_language)\P\302-2
"Gentoo Linux"	"uses"	"Python"	302	query201_Python_(programming_language)\P\302-3
"Gentoo Linux"	"uses"	"Python"	302	query201_Python_(programming_language)\P\302-4
Pardus uses it for administration and during system boot . 	303	query201_Python_(programming_language)\S\303
"Pardus"	"uses"	"it for administration"	303	query201_Python_(programming_language)\P\303-0
"Pardus"	"uses"	"it administration during system boot"	303	query201_Python_(programming_language)\P\303-1
"Pardus"	"uses"	"it"	303	query201_Python_(programming_language)\P\303-2
http ://www.pardus 	304	query201_Python_(programming_language)\S\304
.org.tr/eng/projects/comar/Python 	305	query201_Python_(programming_language)\S\305
InPardus .html 	306	query201_Python_(programming_language)\S\306
Pardus : TÜBİTAK / UEKAE pardus .org.tr 	307	query201_Python_(programming_language)\S\307
2008-11-24 http ://www.pardus 	308	query201_Python_(programming_language)\S\308
.org.tr/eng/projects/comar/Python 	309	query201_Python_(programming_language)\S\309
InPardus .html 	310	query201_Python_(programming_language)\S\310
Pardus : TÜBİTAK / UEKAE pardus .org.tr 	311	query201_Python_(programming_language)\S\311
2008-11-24 Python has also seen extensive use in the information security industry , including exploit development . 	312	query201_Python_(programming_language)\S\312
"2008-11-24 Python"	"has seen"	"extensive use in the information security industry also"	312	query201_Python_(programming_language)\P\312-0
"2008-11-24 Python"	"has seen"	"extensive use in the information security industry including exploit development"	312	query201_Python_(programming_language)\P\312-1
"2008-11-24 Python"	"has seen"	"extensive use in the information security industry"	312	query201_Python_(programming_language)\P\312-2
http ://www.immunitysec.com/products-immdbg 	313	query201_Python_(programming_language)\S\313
.shtml 	314	query201_Python_(programming_language)\S\314
Welcome to Immunity Debugger immunitysec.com 	315	query201_Python_(programming_language)\S\315
Welcome to Immunity Debugger immunitysec.com 	315	query201_Python_(programming_language)\S\315
2008-11-24 http ://oss.coresecurity 	316	query201_Python_(programming_language)\S\316
.com/ 	317	query201_Python_(programming_language)\S\317
CORE Security Technologies ' open source software repository immunitysec.com 	318	query201_Python_(programming_language)\S\318
"CORE Security Technologies"	"has"	"318 open source software repository immunitysec.com"	318	query201_Python_(programming_language)\P\318-0
Products and discussion of this use of Python include http ://www.immunitysec.com/products-immdbg 	319	query201_Python_(programming_language)\S\319
"Products"	"include"	"http www.immunitysec.com/products-immdbg"	319	query201_Python_(programming_language)\P\319-0
"discussion of this use of Python"	"include"	"http www.immunitysec.com/products-immdbg"	319	query201_Python_(programming_language)\P\319-1
.shtml 	320	query201_Python_(programming_language)\S\320
Welcome to Immunity Debugger immunitysec.com 	321	query201_Python_(programming_language)\S\321
Welcome to Immunity Debugger immunitysec.com 	321	query201_Python_(programming_language)\S\321
2008-11-24 ; http ://oss.coresecurity 	322	query201_Python_(programming_language)\S\322
.com/ 	323	query201_Python_(programming_language)\S\323
CORE Security Technologies ' open source software repository immunitysec.com 	324	query201_Python_(programming_language)\S\324
"CORE Security Technologies"	"has"	"324 open source software repository immunitysec.com"	324	query201_Python_(programming_language)\P\324-0
http ://wapiti .sourceforge 	325	query201_Python_(programming_language)\S\325
.net/ 	326	query201_Python_(programming_language)\S\326
Wapiti - Web application security auditor wapiti .sourceforge 	327	query201_Python_(programming_language)\S\327
.net 	328	query201_Python_(programming_language)\S\328
2008-11-24 http ://wapiti .sourceforge 	329	query201_Python_(programming_language)\S\329
.net/ 	330	query201_Python_(programming_language)\S\330
Wapiti - Web application security auditor wapiti .sourceforge 	331	query201_Python_(programming_language)\S\331
.net 	332	query201_Python_(programming_language)\S\332
2008-11-24 September 2011 September 2011 September 2011 September 2011 Among the users of Python are YouTube http ://www.python 	333	query201_Python_(programming_language)\S\333
"2008-11-24 September 2011 September 2011 September 2011 September 2011 Among the users of Python"	"are"	"YouTube http www.python"	333	query201_Python_(programming_language)\P\333-0
.org/about/quotes 	334	query201_Python_(programming_language)\S\334
/ Quotes about Python python .org 	335	query201_Python_(programming_language)\S\335
~2006 2012-01-08 http ://www.python 	336	query201_Python_(programming_language)\S\336
.org/about/quotes 	337	query201_Python_(programming_language)\S\337
/ Quotes about Python python .org 	338	query201_Python_(programming_language)\S\338
~2006 2012-01-08 and the original BitTorrent client . 	339	query201_Python_(programming_language)\S\339
http ://www.onlamp.com/pub/a/python/2003/7/17/pythonnews 	340	query201_Python_(programming_language)\S\340
.html 	341	query201_Python_(programming_language)\S\341
Review of original BitTorrent software September 24 , 2011 http ://www.onlamp.com/pub/a/python/2003/7/17/pythonnews 	342	query201_Python_(programming_language)\S\342
"September 24"	"is"	"2011 http"	342	query201_Python_(programming_language)\P\342-0
.html 	343	query201_Python_(programming_language)\S\343
Review of original BitTorrent software September 24 , 2011 Large organizations that make use of Python include Google , http ://python .org/about/quotes 	344	query201_Python_(programming_language)\S\344
/ Quotes about Python Python .org 	345	query201_Python_(programming_language)\S\345
2008-11-24 http ://python .org/about/quotes 	346	query201_Python_(programming_language)\S\346
/ Quotes about Python Python .org 	347	query201_Python_(programming_language)\S\347
2008-11-24 Yahoo! 	348	query201_Python_(programming_language)\S\348
, http ://wiki.python 	349	query201_Python_(programming_language)\S\349
"wiki.python"	"is"	"http"	349	query201_Python_(programming_language)\P\349-0
.org/moin/OrganizationsUsingPython 	350	query201_Python_(programming_language)\S\350
Organizations Using Python Python .org 	351	query201_Python_(programming_language)\S\351
2009-01-15 http ://wiki.python 	352	query201_Python_(programming_language)\S\352
.org/moin/OrganizationsUsingPython 	353	query201_Python_(programming_language)\S\353
Organizations Using Python Python .org 	354	query201_Python_(programming_language)\S\354
2009-01-15 CERN , http ://cdsweb.cern.ch/record/974627 	355	query201_Python_(programming_language)\S\355
"2009-01-15 CERN cdsweb.cern.ch record/974627"	"is"	"http"	355	query201_Python_(programming_language)\P\355-0
?ln=no CERN Document Server : Record#974627 : Python : the holy grail of programming Cdsweb.cern.ch 	356	query201_Python_(programming_language)\S\356
2011-04-19 http ://cdsweb.cern.ch/record/974627 	357	query201_Python_(programming_language)\S\357
?ln=no CERN Document Server : Record#974627 : Python : the holy grail of programming Cdsweb.cern.ch 	358	query201_Python_(programming_language)\S\358
2011-04-19 NASA , http ://www.python 	359	query201_Python_(programming_language)\S\359
"2011-04-19 NASA www.python"	"is"	"http"	359	query201_Python_(programming_language)\P\359-0
.org/about/success/usa/ 	360	query201_Python_(programming_language)\S\360
Python Success Stories Python .org 	361	query201_Python_(programming_language)\S\361
2008-11-24 http ://www.python 	362	query201_Python_(programming_language)\S\362
.org/about/success/usa/ 	363	query201_Python_(programming_language)\S\363
Python Success Stories Python .org 	364	query201_Python_(programming_language)\S\364
2008-11-24 ILM , http ://www.python 	365	query201_Python_(programming_language)\S\365
"2008-11-24 ILM www.python"	"is"	"http"	365	query201_Python_(programming_language)\P\365-0
.org/about/success/ilm 	366	query201_Python_(programming_language)\S\366
/ Python Success Stories Python .org 	367	query201_Python_(programming_language)\S\367
2003-01-17 http ://www.python 	368	query201_Python_(programming_language)\S\368
.org/about/success/ilm 	369	query201_Python_(programming_language)\S\369
/ Python Success Stories Python .org 	370	query201_Python_(programming_language)\S\370
2003-01-17 and ITA . 	371	query201_Python_(programming_language)\S\371
http ://www.eweek 	372	query201_Python_(programming_language)\S\372
.com/c/a/Application-Development/Python-Slithers-into-Systems 	373	query201_Python_(programming_language)\S\373
/ eweek .com 	374	query201_Python_(programming_language)\S\374
September 24 , 2011 http ://www.eweek 	375	query201_Python_(programming_language)\S\375
"September 24 www.eweek"	"is"	"2011 http"	375	query201_Python_(programming_language)\P\375-0
.com/c/a/Application-Development/Python-Slithers-into-Systems 	376	query201_Python_(programming_language)\S\376
/ eweek .com 	377	query201_Python_(programming_language)\S\377
September 24 , 2011 Most of the Sugar software for the One Laptop per Child XO , now developed at Sugar Labs , is written in Python . 	378	query201_Python_(programming_language)\S\378
"September 24 2011 Most of the Sugar software for the One Laptop per Child XO"	"developed"	"at Sugar Labs now"	378	query201_Python_(programming_language)\P\378-0
"September 24 2011 Most of the Sugar software for the One Laptop per Child XO"	"developed"	"at Sugar Labs"	378	query201_Python_(programming_language)\P\378-1
http ://sugarlabs .org/go/Sugar 	379	query201_Python_(programming_language)\S\379
What is Sugar ? - Sugar Labs sugarlabs .org 	380	query201_Python_(programming_language)\S\380
2008-05-10 0r-2-11 http ://sugarlabs .org/go/Sugar 	381	query201_Python_(programming_language)\S\381
What is Sugar ? - Sugar Labs sugarlabs .org 	382	query201_Python_(programming_language)\S\382
2008-05-10 0r-2-11 thumb292pxSyntax highlightingSyntax-highlightedPython 2.x 	383	query201_Python_(programming_language)\S\383
code . 	384	query201_Python_(programming_language)\S\384
Python syntax and semantics Python was intended to be a highly readable language . 	385	query201_Python_(programming_language)\S\385
"Python syntax"	"was intended"	"to be a highly readable language"	385	query201_Python_(programming_language)\P\385-0
"Python semantics Python"	"was intended"	"to be a highly readable language"	385	query201_Python_(programming_language)\P\385-1
It is designed to have an uncluttered visual layout , frequently using English keywords where other languages use punctuation . 	386	query201_Python_(programming_language)\S\386
It is designed to have an uncluttered visual layout , frequently using English keywords where other languages use punctuation . 	386	query201_Python_(programming_language)\S\386
"other languages"	"use"	"punctuation English keywords where"	386	query201_Python_(programming_language)\P\386-0
"other languages"	"use"	"punctuation English keywords"	386	query201_Python_(programming_language)\P\386-1
Python requires less boilerplate than traditional manifestly typed structured languages such as C or Pascal , and has a smaller number of syntactic exceptions and special cases than either of these . 	387	query201_Python_(programming_language)\S\387
"Python"	"requires"	"less boilerplate than traditional manifestly typed structured languages such as C"	387	query201_Python_(programming_language)\P\387-0
"Python"	"requires"	"less boilerplate than traditional manifestly typed structured languages such as Pascal"	387	query201_Python_(programming_language)\P\387-1
"Python"	"has"	"less boilerplate than traditional manifestly typed structured languages such as C a smaller number of syntactic exceptions than either of these"	387	query201_Python_(programming_language)\P\387-2
"Python"	"has"	"less boilerplate than traditional manifestly typed structured languages such as C a smaller number of syntactic special cases than either of these"	387	query201_Python_(programming_language)\P\387-3
"Python"	"has"	"less boilerplate than traditional manifestly typed structured languages such as Pascal a smaller number of syntactic exceptions than either of these"	387	query201_Python_(programming_language)\P\387-4
"Python"	"has"	"less boilerplate than traditional manifestly typed structured languages such as Pascal a smaller number of syntactic special cases than either of these"	387	query201_Python_(programming_language)\P\387-5
Is Python a good language for beginning programmers ? http ://www.python 	388	query201_Python_(programming_language)\S\388
.org/doc/faq/general/#is-python-a-good-language-for-beginning-programmers 	389	query201_Python_(programming_language)\S\389
General Python FAQ March 7 , 2005 2007-03-21 Python Software Foundation Is Python a good language for beginning programmers ? http ://www.python 	390	query201_Python_(programming_language)\S\390
.org/doc/faq/general/#is-python-a-good-language-for-beginning-programmers 	391	query201_Python_(programming_language)\S\391
General Python FAQ March 7 , 2005 2007-03-21 Python Software Foundation For a detailed description of the differences between 2.x 	392	query201_Python_(programming_language)\S\392
and 3.x 	393	query201_Python_(programming_language)\S\393
versions , see History of Python . 	394	query201_Python_(programming_language)\S\394
"versions"	"be see"	"History of Python"	394	query201_Python_(programming_language)\P\394-0
The simplicity of Python is demonstrated by its version of the classic " Hello world " program : print ( " Hello world " ) Python uses whitespace indentation , rather than curly braces or keywords , to delimit block ( a feature also known as the off-side rule ) . 	395	query201_Python_(programming_language)\S\395
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python uses whitespace indentation"	395	query201_Python_(programming_language)\P\395-0
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly braces to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-1
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-2
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-3
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-4
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-5
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-6
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-7
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-8
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-9
"The simplicity of Python"	"is demonstrated"	"by its version of the classic Hello world program print Hello world Python whitespace indentation curly keywords to delimit block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-10
"curly braces"	"be delimit"	"block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-11
"curly keywords"	"be delimit"	"block a feature also known as the off-side rule"	395	query201_Python_(programming_language)\P\395-12
"a feature"	"be known"	"also as the off-side rule"	395	query201_Python_(programming_language)\P\395-13
"a feature"	"be known"	"also"	395	query201_Python_(programming_language)\P\395-14
An increase in indentation comes after certain statements ; a decrease in indentation signifies the end of the current block . 	396	query201_Python_(programming_language)\S\396
"An increase in indentation"	"comes"	"after certain statements"	396	query201_Python_(programming_language)\P\396-0
"a decrease in indentation"	"signifies"	"the end of the current block"	396	query201_Python_(programming_language)\P\396-1
http ://www .secnetix 	397	query201_Python_(programming_language)\S\397
.de/~olli/Python/block_indentation 	398	query201_Python_(programming_language)\S\398
.hawk 	399	query201_Python_(programming_language)\S\399
Myths about indentation in Python Secnetix .de 	400	query201_Python_(programming_language)\S\400
2011-04-19 http ://www .secnetix 	401	query201_Python_(programming_language)\S\401
.de/~olli/Python/block_indentation 	402	query201_Python_(programming_language)\S\402
.hawk 	403	query201_Python_(programming_language)\S\403
Myths about indentation in Python Secnetix .de 	404	query201_Python_(programming_language)\S\404
2011-04-19 Python 's statements include (among others ) : Each statement has its own semantics : for example , the def statement does not execute its block immediately , unlike most other statements . 	405	query201_Python_(programming_language)\S\405
2011-04-19 Python 's statements include (among others ) : Each statement has its own semantics : for example , the def statement does not execute its block immediately , unlike most other statements . 	405	query201_Python_(programming_language)\S\405
"Each statement"	"has"	"its own semantics"	405	query201_Python_(programming_language)\P\405-0
"Each statement"	"has"	"its own semantics"	405	query201_Python_(programming_language)\P\405-1
"the def statement"	"does not execute"	"its block for example"	405	query201_Python_(programming_language)\P\405-2
"the def statement"	"does not execute"	"its block immediately"	405	query201_Python_(programming_language)\P\405-3
"the def statement"	"does not execute"	"its block unlike most other statements"	405	query201_Python_(programming_language)\P\405-4
"the def statement"	"does not execute"	"its block"	405	query201_Python_(programming_language)\P\405-5
"the def statement"	"does not execute"	"its block"	405	query201_Python_(programming_language)\P\405-6
Python does not support first-class continuations , and according to Guido van Rossum it never will . 	406	query201_Python_(programming_language)\S\406
"Python"	"does not support"	"first-class continuations"	406	query201_Python_(programming_language)\P\406-0
"Python"	"does not according to Guido van Rossum"	"first-class continuations"	406	query201_Python_(programming_language)\P\406-1
"Python"	"does not according to Guido van Rossum"	"first-class continuations"	406	query201_Python_(programming_language)\P\406-2
Language Design Is Not Just Solving Puzzles http ://www.artima.com/weblogs/viewpost 	407	query201_Python_(programming_language)\S\407
"Language Design"	"Is"	"Not Solving Puzzles Just"	407	query201_Python_(programming_language)\P\407-0
"Language Design"	"Is"	"Not Solving Puzzles"	407	query201_Python_(programming_language)\P\407-1
.jsp?thread=147358 	408	query201_Python_(programming_language)\S\408
.jsp?thread=147358 	408	query201_Python_(programming_language)\S\408
Guido van Rossum February 9 , 2006 2007-03-21 Artima forums Artima Language Design Is Not Just Solving Puzzles http ://www.artima.com/weblogs/viewpost 	409	query201_Python_(programming_language)\S\409
"February 9 2006 2007-03-21 Artima forums Artima Language Design"	"Is Not Solving"	"Puzzles http www.artima.com/weblogs/viewpost 409 Guido van Rossum Just"	409	query201_Python_(programming_language)\P\409-0
"February 9 2006 2007-03-21 Artima forums Artima Language Design"	"Is Not Solving"	"Puzzles http www.artima.com/weblogs/viewpost 409 Guido van Rossum"	409	query201_Python_(programming_language)\P\409-1
.jsp?thread=147358 	410	query201_Python_(programming_language)\S\410
.jsp?thread=147358 	410	query201_Python_(programming_language)\S\410
Guido van Rossum February 9 , 2006 2007-03-21 Artima forums Artima However , better support for coroutine -like functionality is provided in 2.5 	411	query201_Python_(programming_language)\S\411
"better support for coroutine like functionality"	"is provided"	"in 2.5 Artima However"	411	query201_Python_(programming_language)\P\411-0
"better support for coroutine like functionality"	"is provided"	"Artima However"	411	query201_Python_(programming_language)\P\411-1
, by extending Python 's generators . 	412	query201_Python_(programming_language)\S\412
, by extending Python 's generators . 	412	query201_Python_(programming_language)\S\412
http ://www.python 	413	query201_Python_(programming_language)\S\413
.org/peps/pep-0342.html 	414	query201_Python_(programming_language)\S\414
Coroutines via Enhanced Generators April 21 , 2006 Guido van Rossum Phillip J. 	415	query201_Python_(programming_language)\S\415
"April 21"	"is"	"2006 Guido van Rossum Phillip J."	415	query201_Python_(programming_language)\P\415-0
Eby Python Enhancement Proposals Python Software Foundation 2007-03-21 http ://www.python 	416	query201_Python_(programming_language)\S\416
.org/peps/pep-0342.html 	417	query201_Python_(programming_language)\S\417
Coroutines via Enhanced Generators April 21 , 2006 Guido van Rossum Phillip J. 	418	query201_Python_(programming_language)\S\418
"April 21"	"is"	"2006 Guido van Rossum Phillip J."	418	query201_Python_(programming_language)\P\418-0
Eby Python Enhancement Proposals Python Software Foundation 2007-03-21 Prior to 2.5 	419	query201_Python_(programming_language)\S\419
, generators were lazy iterator ; information was passed unidirectionally out of the generator . 	420	query201_Python_(programming_language)\S\420
, generators were lazy iterator ; information was passed unidirectionally out of the generator . 	420	query201_Python_(programming_language)\S\420
, generators were lazy iterator ; information was passed unidirectionally out of the generator . 	420	query201_Python_(programming_language)\S\420
, generators were lazy iterator ; information was passed unidirectionally out of the generator . 	420	query201_Python_(programming_language)\S\420
As of Python 2.5 	421	query201_Python_(programming_language)\S\421
, it is possible to pass information back into a generator function . 	422	query201_Python_(programming_language)\S\422
, it is possible to pass information back into a generator function . 	422	query201_Python_(programming_language)\S\422
, it is possible to pass information back into a generator function . 	422	query201_Python_(programming_language)\S\422
, it is possible to pass information back into a generator function . 	422	query201_Python_(programming_language)\S\422
Python expressions are similar to languages such as C and Java . 	423	query201_Python_(programming_language)\S\423
"Python expressions"	"are similar"	"to languages such as C"	423	query201_Python_(programming_language)\P\423-0
"Python expressions"	"are similar"	"to languages such as Java"	423	query201_Python_(programming_language)\P\423-1
"Python expressions"	"are"	"similar"	423	query201_Python_(programming_language)\P\423-2
In Python , a distinction between expressions and statements is rigidly enforced , in contrast to languages such as Common Lisp , Scheme , or Ruby . 	424	query201_Python_(programming_language)\S\424
"In Python"	"is"	"a distinction between expressions and statements"	424	query201_Python_(programming_language)\P\424-0
"In Python"	"is enforced"	"in contrast to languages such as Common Lisp rigidly"	424	query201_Python_(programming_language)\P\424-1
"In Python"	"is enforced"	"in contrast to languages such as Common Scheme rigidly"	424	query201_Python_(programming_language)\P\424-2
"In Python"	"is enforced"	"in contrast to languages such as Common Ruby rigidly"	424	query201_Python_(programming_language)\P\424-3
"In Python"	"is enforced"	"in contrast to languages such as Common Lisp"	424	query201_Python_(programming_language)\P\424-4
"In Python"	"is enforced"	"in contrast to languages such as Common Scheme"	424	query201_Python_(programming_language)\P\424-5
"In Python"	"is enforced"	"in contrast to languages such as Common Ruby"	424	query201_Python_(programming_language)\P\424-6
This leads to some duplication of functionality , e.g 	425	query201_Python_(programming_language)\S\425
This leads to some duplication of functionality , e.g 	425	query201_Python_(programming_language)\S\425
. 	426	query201_Python_(programming_language)\S\426
Statements cannot be a part of an expression and so list and other comprehensions or lambda expressions , all being expressions , cannot contain statements . 	427	query201_Python_(programming_language)\S\427
"Statements"	"can not be a part"	"of an expression"	427	query201_Python_(programming_language)\P\427-0
"Statements"	"can not be a so list"	"of an expression"	427	query201_Python_(programming_language)\P\427-1
"Statements"	"can not be"	"a part"	427	query201_Python_(programming_language)\P\427-2
"Statements"	"can not be"	"a so list"	427	query201_Python_(programming_language)\P\427-3
"other comprehensions"	"can not contain"	"statements"	427	query201_Python_(programming_language)\P\427-4
"other lambda expressions"	"can not contain"	"statements"	427	query201_Python_(programming_language)\P\427-5
"other all being expressions"	"can not contain"	"statements"	427	query201_Python_(programming_language)\P\427-6
A particular case of this is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement . 	428	query201_Python_(programming_language)\S\428
"a = 1"	"can not form"	"part of the conditional expression of a conditional statement"	428	query201_Python_(programming_language)\P\428-0
This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator = = in conditions : if ( c = 1 ) { ... 	429	query201_Python_(programming_language)\S\429
This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator = = in conditions : if ( c = 1 ) { ... 	429	query201_Python_(programming_language)\S\429
"an assignment operator"	"="	"for an equality operator = = in conditions"	429	query201_Python_(programming_language)\P\429-0
"an assignment operator"	"="	"for an equality operator = = in conditions"	429	query201_Python_(programming_language)\P\429-1
} is valid C code but if c = 1 : ... 	430	query201_Python_(programming_language)\S\430
} is valid C code but if c = 1 : ... 	430	query201_Python_(programming_language)\S\430
} is valid C code but if c = 1 : ... 	430	query201_Python_(programming_language)\S\430
causes a syntax error in Python . 	431	query201_Python_(programming_language)\S\431
causes a syntax error in Python . 	431	query201_Python_(programming_language)\S\431
causes a syntax error in Python . 	431	query201_Python_(programming_language)\S\431
Method on objects are function attached to the object 's class ; the syntax instance .method(argument 	432	query201_Python_(programming_language)\S\432
) is , for normal methods and functions , syntactic sugar for Class .method(instance 	433	query201_Python_(programming_language)\S\433
, argument ) . 	434	query201_Python_(programming_language)\S\434
Python methods have an explicit self parameter to access instance data , in contrast to the implicit self in some other object-oriented programming languages ( for example , Java , C++ or Ruby ) . 	435	query201_Python_(programming_language)\S\435
"Python methods"	"have"	"an explicit self parameter to access instance data in contrast to the implicit self in some other object-oriented programming languages for example Java"	435	query201_Python_(programming_language)\P\435-0
"Python methods"	"have"	"an explicit self parameter to access instance data in contrast to the implicit self in some other object-oriented programming languages for example C++"	435	query201_Python_(programming_language)\P\435-1
"Python methods"	"have"	"an explicit self parameter to access instance data in contrast to the implicit self in some other object-oriented programming languages for example Ruby"	435	query201_Python_(programming_language)\P\435-2
"Python methods"	"have"	"an explicit self parameter to access instance data"	435	query201_Python_(programming_language)\P\435-3
http ://www.python 	436	query201_Python_(programming_language)\S\436
.org/doc/faq/general/#why-must-self-be-used-explicitly-in-method-definitions-and-calls 	437	query201_Python_(programming_language)\S\437
Why must 'self ' be used explicitly in method definitions and calls ? Python FAQ Python Software Foundation http ://www.python 	438	query201_Python_(programming_language)\S\438
.org/doc/faq/general/#why-must-self-be-used-explicitly-in-method-definitions-and-calls 	439	query201_Python_(programming_language)\S\439
Why must 'self ' be used explicitly in method definitions and calls ? Python FAQ Python Software Foundation Python uses duck typing and has typed objects but untyped variable names . 	440	query201_Python_(programming_language)\S\440
"Python FAQ Python Software Foundation Python"	"uses"	"duck typing"	440	query201_Python_(programming_language)\P\440-0
"Python FAQ Python Software Foundation Python"	"has typed"	"duck typing objects"	440	query201_Python_(programming_language)\P\440-1
"Python FAQ Python Software Foundation Python"	"has typed"	"duck typing untyped variable names"	440	query201_Python_(programming_language)\P\440-2
Type constraints are not checked at compile time ; rather , operations on an object may fail , signifying that the given object is not of a suitable type . 	441	query201_Python_(programming_language)\S\441
"Type constraints"	"are not checked"	"at compile time"	441	query201_Python_(programming_language)\P\441-0
"operations on an object"	"may fail"	"signifying that the given object is not of a suitable type rather"	441	query201_Python_(programming_language)\P\441-1
"operations on an object"	"may fail"	"signifying that the given object is not of a suitable type"	441	query201_Python_(programming_language)\P\441-2
Despite being dynamically typed , Python is strongly typed , forbidding operations that are not well-defined ( for example , adding a number to a string ) rather than silently attempting to make sense of them . 	442	query201_Python_(programming_language)\S\442
"Despite being dynamically typed adding a number to a string"	"be forbidding"	"operations"	442	query201_Python_(programming_language)\P\442-0
"Despite being dynamically typed a number to a string silently attempting to make sense of them"	"be forbidding"	"operations"	442	query201_Python_(programming_language)\P\442-1
"Despite being dynamically typed a number to a string silently attempting to make sense of them"	"be forbidding"	"operations"	442	query201_Python_(programming_language)\P\442-2
"Despite being dynamically typed a number to a string silently attempting to make sense of them"	"be forbidding"	"operations"	442	query201_Python_(programming_language)\P\442-3
"Despite being dynamically typed a number to a string silently attempting to make sense of them"	"be forbidding"	"operations"	442	query201_Python_(programming_language)\P\442-4
"Despite being dynamically typed a number to a string silently attempting to make sense of them"	"be forbidding"	"operations"	442	query201_Python_(programming_language)\P\442-5
"Despite being dynamically typed a number to a string silently attempting to make sense of them"	"be forbidding"	"operations"	442	query201_Python_(programming_language)\P\442-6
"Despite being dynamically typed a number to a string silently attempting to make sense of them"	"be forbidding"	"operations"	442	query201_Python_(programming_language)\P\442-7
Python allows programmers to define their own types using class , which are most often used for object-oriented programming . 	443	query201_Python_(programming_language)\S\443
"Python"	"allows"	"programmers to define their own types using class"	443	query201_Python_(programming_language)\P\443-0
"Python"	"allows"	"programmers to define their own types using class"	443	query201_Python_(programming_language)\P\443-1
"their own types"	"be using"	"class"	443	query201_Python_(programming_language)\P\443-2
"their own types"	"be using"	"class"	443	query201_Python_(programming_language)\P\443-3
"their own types"	"be using"	"class"	443	query201_Python_(programming_language)\P\443-4
New instances of classes are constructed by calling the class ( for example , SpamClass( ) or EggsClass( ) ) , and the classes themselves are instances of the metaclass type ( itself an instance of itself ) , allowing metaprogramming and reflection . 	444	query201_Python_(programming_language)\S\444
"New instances of classes"	"are constructed"	"by calling the class"	444	query201_Python_(programming_language)\P\444-0
"New instances of classes"	"are the classes"	"allowing metaprogramming by calling the class"	444	query201_Python_(programming_language)\P\444-1
"New instances of classes"	"are the classes"	"allowing reflection by calling the class"	444	query201_Python_(programming_language)\P\444-2
"New instances of classes"	"are the classes"	"allowing metaprogramming"	444	query201_Python_(programming_language)\P\444-3
"New instances of classes"	"are the classes"	"allowing reflection"	444	query201_Python_(programming_language)\P\444-4
"the classes"	"be allowing"	"metaprogramming"	444	query201_Python_(programming_language)\P\444-5
"the classes"	"be allowing"	"reflection"	444	query201_Python_(programming_language)\P\444-6
"the classes"	"be allowing"	"reflection"	444	query201_Python_(programming_language)\P\444-7
"the classes"	"be allowing"	"reflection"	444	query201_Python_(programming_language)\P\444-8
"the classes"	"be allowing"	"reflection"	444	query201_Python_(programming_language)\P\444-9
"the classes"	"be allowing"	"reflection"	444	query201_Python_(programming_language)\P\444-10
Prior to version 3.0, 	445	query201_Python_(programming_language)\S\445
Python had two kinds of classes : "old-style " and "new-style " . 	446	query201_Python_(programming_language)\S\446
"Python"	"had"	"two kinds of classes old-style"	446	query201_Python_(programming_language)\P\446-0
"Python"	"had"	"two kinds of classes new-style"	446	query201_Python_(programming_language)\P\446-1
The Python Language Reference , section 3.3 	447	query201_Python_(programming_language)\S\447
. 	448	query201_Python_(programming_language)\S\448
New-style and classic classes , for release 2.7.1 	449	query201_Python_(programming_language)\S\449
2011-01-12 http ://docs .python 	450	query201_Python_(programming_language)\S\450
.org/reference/datamodel 	451	query201_Python_(programming_language)\S\451
.html#new-style-and-classic-classes 	452	query201_Python_(programming_language)\S\452
The Python Language Reference , section 3.3 	453	query201_Python_(programming_language)\S\453
. 	454	query201_Python_(programming_language)\S\454
New-style and classic classes , for release 2.7.1 	455	query201_Python_(programming_language)\S\455
2011-01-12 http ://docs .python 	456	query201_Python_(programming_language)\S\456
.org/reference/datamodel 	457	query201_Python_(programming_language)\S\457
.html#new-style-and-classic-classes 	458	query201_Python_(programming_language)\S\458
Old-style classes were eliminated in Python 3.0, 	459	query201_Python_(programming_language)\S\459
"Old-style classes"	"were eliminated"	"in Python 3.0"	459	query201_Python_(programming_language)\P\459-0
making all classes new-style . 	460	query201_Python_(programming_language)\S\460
making all classes new-style . 	460	query201_Python_(programming_language)\S\460
In versions between 2.2 	461	query201_Python_(programming_language)\S\461
and 3.0, 	462	query201_Python_(programming_language)\S\462
both kinds of classes could be used . 	463	query201_Python_(programming_language)\S\463
The syntax of both styles is the same , the difference being whether the class object is inherited from , directly or indirectly ( all new-style classes inherit from object and are instances of type ) . 	464	query201_Python_(programming_language)\S\464
"The syntax of styles"	"is"	"the same the difference being whether the class object is inherited from directly all new-style classes inherit from object"	464	query201_Python_(programming_language)\P\464-0
"The syntax of styles"	"is"	"the same the difference being whether the class object is inherited from indirectly all new-style classes inherit from object"	464	query201_Python_(programming_language)\P\464-1
"The syntax of styles"	"is"	"the same the difference being whether the class object is inherited from indirectly all new-style classes from object are instances of type"	464	query201_Python_(programming_language)\P\464-2
"The syntax of styles"	"is"	"the same the difference being whether the class object is inherited from directly all new-style classes from object are instances of type"	464	query201_Python_(programming_language)\P\464-3
"the difference"	"be being"	"whether the class object is inherited from directly all new-style classes inherit from object"	464	query201_Python_(programming_language)\P\464-4
"the difference"	"be being"	"whether the class object is inherited from indirectly all new-style classes inherit from object"	464	query201_Python_(programming_language)\P\464-5
"the difference"	"be being"	"whether the class object is inherited from indirectly all new-style classes from object are instances of type"	464	query201_Python_(programming_language)\P\464-6
"the difference"	"be being"	"whether the class object is inherited from directly all new-style classes from object are instances of type"	464	query201_Python_(programming_language)\P\464-7
"the class object"	"is inherited"	"from directly all new-style classes inherit from object"	464	query201_Python_(programming_language)\P\464-8
"the class object"	"is inherited"	"from indirectly all new-style classes inherit from object"	464	query201_Python_(programming_language)\P\464-9
"the class object"	"is inherited"	"from indirectly all new-style classes from object are instances of type"	464	query201_Python_(programming_language)\P\464-10
"the class object"	"is inherited"	"from directly all new-style classes from object are instances of type"	464	query201_Python_(programming_language)\P\464-11
"all new-style classes"	"inherit"	"from object"	464	query201_Python_(programming_language)\P\464-12
"all new-style classes"	"are instances"	"from object"	464	query201_Python_(programming_language)\P\464-13
"all new-style classes"	"are instances"	"of type"	464	query201_Python_(programming_language)\P\464-14
"all new-style classes"	"are"	"instances"	464	query201_Python_(programming_language)\P\464-15
Here is a summary of Python 3 's built-in types : In contrast with some programming languages , integer division is defined to round towards minus infinity . 	465	query201_Python_(programming_language)\S\465
"Here"	"is a summary In contrast with some programming languages integer division is defined to round towards"	"of Python 3 's built-in types"	465	query201_Python_(programming_language)\P\465-0
"Here"	"is a summary In contrast with some programming languages integer division is defined to round infinity"	"of Python 3 's built-in types"	465	query201_Python_(programming_language)\P\465-1
"Here"	"is"	"a summary In contrast with some programming languages integer division is defined to round towards"	465	query201_Python_(programming_language)\P\465-2
"Here"	"is"	"a summary In contrast with some programming languages integer division is defined to round infinity"	465	query201_Python_(programming_language)\P\465-3
"Python 3"	"has"	"built-in types"	465	query201_Python_(programming_language)\P\465-4
"integer division"	"is defined"	"to round towards In contrast with some programming languages"	465	query201_Python_(programming_language)\P\465-5
"integer division"	"is defined"	"to round infinity In contrast with some programming languages"	465	query201_Python_(programming_language)\P\465-6
"integer division"	"is defined"	"to round towards"	465	query201_Python_(programming_language)\P\465-7
"integer division"	"is defined"	"to round infinity"	465	query201_Python_(programming_language)\P\465-8
Therefore 7 // 3 is 2 , but ( −7 ) // 3 is −3 . 	466	query201_Python_(programming_language)\S\466
Therefore 7 // 3 is 2 , but ( −7 ) // 3 is −3 . 	466	query201_Python_(programming_language)\S\466
Therefore 7 // 3 is 2 , but ( −7 ) // 3 is −3 . 	466	query201_Python_(programming_language)\S\466
Therefore 7 // 3 is 2 , but ( −7 ) // 3 is −3 . 	466	query201_Python_(programming_language)\S\466
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 	467	query201_Python_(programming_language)\S\467
"the equation b = = a b is always true whereas in languages such as C 7 = = -6 7"	"is"	"a + b"	467	query201_Python_(programming_language)\P\467-0
"the equation b = = a 1 is always true whereas in languages such as C 7 = = -6 7"	"is"	"a + b"	467	query201_Python_(programming_language)\P\467-1
"b = = a b is always true whereas in languages such as C"	"is"	"-6 +7"	467	query201_Python_(programming_language)\P\467-2
"b = = a 1 is always true whereas in languages such as C"	"is"	"-6 +7"	467	query201_Python_(programming_language)\P\467-3
"a b"	"is b = = true whereas"	"always"	467	query201_Python_(programming_language)\P\467-4
"a 1"	"is b = = true whereas"	"always"	467	query201_Python_(programming_language)\P\467-5
"a b"	"is b = = true whereas"	"in languages such as C"	467	query201_Python_(programming_language)\P\467-6
"a 1"	"is b = = true whereas"	"in languages such as C"	467	query201_Python_(programming_language)\P\467-7
"a b"	"is"	"b = = true whereas"	467	query201_Python_(programming_language)\P\467-8
"a 1"	"is"	"b = = true whereas"	467	query201_Python_(programming_language)\P\467-9
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 	468	query201_Python_(programming_language)\S\468
However , maintaining the validity of this equation means that while the result of a % b is , as expected , in the half-open interval [0 , b ) , where b is a positive integer , it has to lie in the interval ( b ,0] when b is negative . 	469	query201_Python_(programming_language)\S\469
"However"	"maintaining"	"the validity of this equation"	469	query201_Python_(programming_language)\P\469-0
"However"	"maintaining"	"the validity of this equation"	469	query201_Python_(programming_language)\P\469-1
"However"	"maintaining"	"the validity of this equation"	469	query201_Python_(programming_language)\P\469-2
"However"	"maintaining"	"the validity of this equation"	469	query201_Python_(programming_language)\P\469-3
"However"	"maintaining"	"the validity of this equation"	469	query201_Python_(programming_language)\P\469-4
"the result of a % b"	"is it has"	"to lie in the interval when b is negative"	469	query201_Python_(programming_language)\P\469-5
"the result of a % b"	"is it has"	"to lie in the interval"	469	query201_Python_(programming_language)\P\469-6
"the interval"	"is"	"b ,0"	469	query201_Python_(programming_language)\P\469-7
"the interval"	"is"	"b ,0"	469	query201_Python_(programming_language)\P\469-8
"the interval"	"is"	"b ,0"	469	query201_Python_(programming_language)\P\469-9
http ://python-history .blogspot.com/2010/08/why-pythons-integer-division-floors 	470	query201_Python_(programming_language)\S\470
.html 	471	query201_Python_(programming_language)\S\471
Why Python 's Integer Division Floors 2010-08-25 http ://python-history .blogspot.com/2010/08/why-pythons-integer-division-floors 	472	query201_Python_(programming_language)\S\472
.html 	473	query201_Python_(programming_language)\S\473
Why Python 's Integer Division Floors 2010-08-25 Python provides a round function for rounding floats to integers . 	474	query201_Python_(programming_language)\S\474
Why Python 's Integer Division Floors 2010-08-25 Python provides a round function for rounding floats to integers . 	474	query201_Python_(programming_language)\S\474
"2010-08-25 Python"	"provides"	"a round function for rounding floats to integers Python 's Integer Division Floors"	474	query201_Python_(programming_language)\P\474-0
"2010-08-25 Python"	"provides"	"a round function Python 's Integer Division Floors"	474	query201_Python_(programming_language)\P\474-1
"2010-08-25 Python"	"provides"	"a round function Python 's Integer Division Floors"	474	query201_Python_(programming_language)\P\474-2
Versions before 3 use round-away-from-zero : round(0.5 	475	query201_Python_(programming_language)\S\475
) is 1.0, 	476	query201_Python_(programming_language)\S\476
) is 1.0, 	476	query201_Python_(programming_language)\S\476
round(-0.5 	477	query201_Python_(programming_language)\S\477
) is -1.0. 	478	query201_Python_(programming_language)\S\478
) is -1.0. 	478	query201_Python_(programming_language)\S\478
http ://docs .python 	479	query201_Python_(programming_language)\S\479
.org/library/functions 	480	query201_Python_(programming_language)\S\480
.html#round 	481	query201_Python_(programming_language)\S\481
2011-08-14 round The Python standard library , release 2.7 	482	query201_Python_(programming_language)\S\482
"The Python standard library"	"is"	"release 2.7"	482	query201_Python_(programming_language)\P\482-0
, §2 : Built-in functions http ://docs .python 	483	query201_Python_(programming_language)\S\483
.org/library/functions 	484	query201_Python_(programming_language)\S\484
.html#round 	485	query201_Python_(programming_language)\S\485
2011-08-14 round The Python standard library , release 2.7 	486	query201_Python_(programming_language)\S\486
"The Python standard library"	"is"	"release 2.7"	486	query201_Python_(programming_language)\P\486-0
, §2 : Built-in functions Python 3 uses round-to-even : round( 1.5 	487	query201_Python_(programming_language)\S\487
"Python 3"	"uses"	"round-to-even Built-in functions round 1.5"	487	query201_Python_(programming_language)\P\487-0
) is 2.0, 	488	query201_Python_(programming_language)\S\488
) is 2.0, 	488	query201_Python_(programming_language)\S\488
round( 2.5 	489	query201_Python_(programming_language)\S\489
) is 2.0. 	490	query201_Python_(programming_language)\S\490
) is 2.0. 	490	query201_Python_(programming_language)\S\490
http ://docs .python 	491	query201_Python_(programming_language)\S\491
.org/py3k/library/functions 	492	query201_Python_(programming_language)\S\492
.html#round 	493	query201_Python_(programming_language)\S\493
2011-08-14 round The Python standard library , release 3.2 	494	query201_Python_(programming_language)\S\494
"The Python standard library"	"is"	"release 3.2"	494	query201_Python_(programming_language)\P\494-0
, §2 : Built-in functions http ://docs .python 	495	query201_Python_(programming_language)\S\495
.org/py3k/library/functions 	496	query201_Python_(programming_language)\S\496
.html#round 	497	query201_Python_(programming_language)\S\497
2011-08-14 round The Python standard library , release 3.2 	498	query201_Python_(programming_language)\S\498
"The Python standard library"	"is"	"release 3.2"	498	query201_Python_(programming_language)\P\498-0
, §2 : Built-in functions The Decimal type/class in module decimal ( since version 2.4 	499	query201_Python_(programming_language)\S\499
) provides exact numerical representation and several rounding modes . 	500	query201_Python_(programming_language)\S\500
) provides exact numerical representation and several rounding modes . 	500	query201_Python_(programming_language)\S\500
) provides exact numerical representation and several rounding modes . 	500	query201_Python_(programming_language)\S\500
Python allows boolean expressions with multiple equality relations in a manner that is consistent with general usage in mathematics . 	501	query201_Python_(programming_language)\S\501
"Python"	"allows"	"boolean expressions with multiple equality relations in a manner"	501	query201_Python_(programming_language)\P\501-0
"Python"	"allows"	"boolean expressions with multiple equality relations"	501	query201_Python_(programming_language)\P\501-1
"a manner"	"is consistent"	"with general usage in mathematics"	501	query201_Python_(programming_language)\P\501-2
"a manner"	"is"	"consistent"	501	query201_Python_(programming_language)\P\501-3
For example , the expression a &lt ; b &lt ; c tests whether a is less than b and b is less than c . 	502	query201_Python_(programming_language)\S\502
For example , the expression a &lt ; b &lt ; c tests whether a is less than b and b is less than c . 	502	query201_Python_(programming_language)\S\502
For example , the expression a &lt ; b &lt ; c tests whether a is less than b and b is less than c . 	502	query201_Python_(programming_language)\S\502
For example , the expression a &lt ; b &lt ; c tests whether a is less than b and b is less than c . 	502	query201_Python_(programming_language)\S\502
"c tests whether a is less than b"	"is less"	"than c"	502	query201_Python_(programming_language)\P\502-0
"c tests whether a is less than b"	"is less"	"than c"	502	query201_Python_(programming_language)\P\502-1
"c tests whether a is less than b"	"is"	"less"	502	query201_Python_(programming_language)\P\502-2
"c tests whether a is less than b"	"is"	"less"	502	query201_Python_(programming_language)\P\502-3
C-derived languages interpret this expression differently : in C , the expression would first evaluate a &lt ; b , resulting in 0 or 1 , and that result would then be compared with c . 	503	query201_Python_(programming_language)\S\503
"C-derived languages"	"interpret"	"this expression differently"	503	query201_Python_(programming_language)\P\503-0
"C-derived languages"	"interpret"	"this expression"	503	query201_Python_(programming_language)\P\503-1
"the expression"	"would evaluate"	"a & lt in C"	503	query201_Python_(programming_language)\P\503-2
"the expression"	"would evaluate"	"b resulting in 0 would then be compared with c in C"	503	query201_Python_(programming_language)\P\503-3
"the expression"	"would evaluate"	"b resulting in 1 and that result would then be compared with c in C"	503	query201_Python_(programming_language)\P\503-4
"the expression"	"would evaluate"	"b in 0 that result would then be compared with c in C"	503	query201_Python_(programming_language)\P\503-5
"the expression"	"would evaluate"	"a & lt first"	503	query201_Python_(programming_language)\P\503-6
"the expression"	"would evaluate"	"b resulting in 0 would then be compared with c first"	503	query201_Python_(programming_language)\P\503-7
"the expression"	"would evaluate"	"b resulting in 1 and that result would then be compared with c first"	503	query201_Python_(programming_language)\P\503-8
"the expression"	"would evaluate"	"b in 0 that result would then be compared with c first"	503	query201_Python_(programming_language)\P\503-9
"the expression"	"would evaluate"	"a & lt"	503	query201_Python_(programming_language)\P\503-10
"the expression"	"would evaluate"	"b resulting in 0 would then be compared with c"	503	query201_Python_(programming_language)\P\503-11
"the expression"	"would evaluate"	"b resulting in 1 and that result would then be compared with c"	503	query201_Python_(programming_language)\P\503-12
"the expression"	"would evaluate"	"b in 0 that result would then be compared with c"	503	query201_Python_(programming_language)\P\503-13
"resulting in 0"	"would be compared"	"with c b"	503	query201_Python_(programming_language)\P\503-14
"resulting in 1 and that result"	"would be compared"	"with c b"	503	query201_Python_(programming_language)\P\503-15
"in 0 that result"	"would be compared"	"with c b"	503	query201_Python_(programming_language)\P\503-16
"resulting in 0"	"would be compared"	"with c"	503	query201_Python_(programming_language)\P\503-17
"resulting in 1 and that result"	"would be compared"	"with c"	503	query201_Python_(programming_language)\P\503-18
"in 0 that result"	"would be compared"	"with c"	503	query201_Python_(programming_language)\P\503-19
Python Essential Reference , David M Beazley January 2012 CPython The mainstream Python implementation , known as CPython , is written in C meeting the C89 standard . 	504	query201_Python_(programming_language)\S\504
"Python Essential Reference"	"is"	"David M Beazley January 2012 CPython"	504	query201_Python_(programming_language)\P\504-0
"The mainstream Python implementation"	"be known"	"as CPython"	504	query201_Python_(programming_language)\P\504-1
"The mainstream Python implementation known as CPython"	"is written"	"in C meeting the C89 standard David M Beazley January 2012 CPython"	504	query201_Python_(programming_language)\P\504-2
"The mainstream Python implementation known as CPython"	"is written"	"David M Beazley January 2012 CPython"	504	query201_Python_(programming_language)\P\504-3
http ://www.python 	505	query201_Python_(programming_language)\S\505
.org/dev/peps/pep-0007/ 	506	query201_Python_(programming_language)\S\506
PEP 7 - Style Guide for C Code Python .org 	507	query201_Python_(programming_language)\S\507
2008-11-24 http ://www.python 	508	query201_Python_(programming_language)\S\508
.org/dev/peps/pep-0007/ 	509	query201_Python_(programming_language)\S\509
PEP 7 - Style Guide for C Code Python .org 	510	query201_Python_(programming_language)\S\510
2008-11-24 CPython compiles Python programs into intermediate bytecode , http ://docs .python 	511	query201_Python_(programming_language)\S\511
.org/lib/bytecodes 	512	query201_Python_(programming_language)\S\512
.html 	513	query201_Python_(programming_language)\S\513
CPython byte code Docs .python 	514	query201_Python_(programming_language)\S\514
.org 	515	query201_Python_(programming_language)\S\515
2011-04-19 http ://docs .python 	516	query201_Python_(programming_language)\S\516
.org/lib/bytecodes 	517	query201_Python_(programming_language)\S\517
.html 	518	query201_Python_(programming_language)\S\518
CPython byte code Docs .python 	519	query201_Python_(programming_language)\S\519
.org 	520	query201_Python_(programming_language)\S\520
2011-04-19 which are then executed by the virtual machine . 	521	query201_Python_(programming_language)\S\521
"2011-04-19"	"are executed"	"by the virtual machine"	521	query201_Python_(programming_language)\P\521-0
http ://www.troeger 	522	query201_Python_(programming_language)\S\522
.eu/teaching/pythonvm08.pdf 	523	query201_Python_(programming_language)\S\523
Python 2.5 	524	query201_Python_(programming_language)\S\524
internals PDF 2011-04-19 http ://www.troeger 	525	query201_Python_(programming_language)\S\525
.eu/teaching/pythonvm08.pdf 	526	query201_Python_(programming_language)\S\526
Python 2.5 	527	query201_Python_(programming_language)\S\527
internals PDF 2011-04-19 It is distributed with a large standard library written in a mixture of C and Python . 	528	query201_Python_(programming_language)\S\528
internals PDF 2011-04-19 It is distributed with a large standard library written in a mixture of C and Python . 	528	query201_Python_(programming_language)\S\528
internals PDF 2011-04-19 It is distributed with a large standard library written in a mixture of C and Python . 	528	query201_Python_(programming_language)\S\528
internals PDF 2011-04-19 It is distributed with a large standard library written in a mixture of C and Python . 	528	query201_Python_(programming_language)\S\528
"a large standard library"	"be written"	"in a mixture of C"	528	query201_Python_(programming_language)\P\528-0
"a large standard library"	"be written"	"in a mixture of Python"	528	query201_Python_(programming_language)\P\528-1
CPython ships in versions for many platforms , including Microsoft Windows and most modern Unix-like systems . 	529	query201_Python_(programming_language)\S\529
CPython was intended from almost its very conception to be cross-platform ; its use and development on esoteric platforms such as Amoeba , alongside more conventional ones like Unix and Mac OS , has greatly helped in this regard . 	530	query201_Python_(programming_language)\S\530
"CPython"	"was intended"	"from almost its very conception to be cross-platform"	530	query201_Python_(programming_language)\P\530-0
"CPython"	"was intended"	"to be cross-platform"	530	query201_Python_(programming_language)\P\530-1
"CPython"	"was intended"	"to be cross-platform"	530	query201_Python_(programming_language)\P\530-2
"CPython"	"was intended"	"to be cross-platform"	530	query201_Python_(programming_language)\P\530-3
"CPython"	"was intended"	"to be cross-platform"	530	query201_Python_(programming_language)\P\530-4
"its use on esoteric platforms such as Amoeba alongside more conventional ones like Unix"	"has helped"	"in this regard greatly"	530	query201_Python_(programming_language)\P\530-5
"its development on esoteric platforms such as Amoeba alongside more conventional ones like Unix"	"has helped"	"in this regard greatly"	530	query201_Python_(programming_language)\P\530-6
"its development on esoteric platforms such as Amoeba alongside more conventional ones like Mac OS"	"has helped"	"in this regard greatly"	530	query201_Python_(programming_language)\P\530-7
"its use on esoteric platforms such as Amoeba alongside more conventional ones like Mac OS"	"has helped"	"in this regard greatly"	530	query201_Python_(programming_language)\P\530-8
"its use on esoteric platforms such as Amoeba alongside more conventional ones like Unix"	"has helped"	"in this regard"	530	query201_Python_(programming_language)\P\530-9
"its development on esoteric platforms such as Amoeba alongside more conventional ones like Unix"	"has helped"	"in this regard"	530	query201_Python_(programming_language)\P\530-10
"its development on esoteric platforms such as Amoeba alongside more conventional ones like Mac OS"	"has helped"	"in this regard"	530	query201_Python_(programming_language)\P\530-11
"its use on esoteric platforms such as Amoeba alongside more conventional ones like Mac OS"	"has helped"	"in this regard"	530	query201_Python_(programming_language)\P\530-12
http ://www.oreilly 	531	query201_Python_(programming_language)\S\531
.com/pub/a/oreilly/frank/rossum_1099.html 	532	query201_Python_(programming_language)\S\532
O'Reilly - An Interview with Guido van Rossum Oreilly .com 	533	query201_Python_(programming_language)\S\533
2008-11-24 http ://www.oreilly 	534	query201_Python_(programming_language)\S\534
.com/pub/a/oreilly/frank/rossum_1099.html 	535	query201_Python_(programming_language)\S\535
O'Reilly - An Interview with Guido van Rossum Oreilly .com 	536	query201_Python_(programming_language)\S\536
2008-11-24 Stackless Python is a significant fork of CPython that implements microthread ; it does not use the C memory stack . 	537	query201_Python_(programming_language)\S\537
"2008-11-24 Stackless Python"	"is a significant fork"	"of CPython"	537	query201_Python_(programming_language)\P\537-0
"2008-11-24 Stackless Python"	"is"	"a significant fork"	537	query201_Python_(programming_language)\P\537-1
"a significant fork of CPython"	"implements"	"microthread"	537	query201_Python_(programming_language)\P\537-2
"a significant fork of CPython"	"implements"	"microthread"	537	query201_Python_(programming_language)\P\537-3
It can be expected to run on approximately the same platforms that CPython runs on . 	538	query201_Python_(programming_language)\S\538
It can be expected to run on approximately the same platforms that CPython runs on . 	538	query201_Python_(programming_language)\S\538
It can be expected to run on approximately the same platforms that CPython runs on . 	538	query201_Python_(programming_language)\S\538
It can be expected to run on approximately the same platforms that CPython runs on . 	538	query201_Python_(programming_language)\S\538
Google started a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times by using the LLVM and improving its multithreading ability to scale to thousands of cores . 	539	query201_Python_(programming_language)\S\539
"Google"	"started"	"a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times by using the LLVM"	539	query201_Python_(programming_language)\P\539-0
"Google"	"started"	"a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times by the LLVM improving its multithreading ability to scale to thousands of cores"	539	query201_Python_(programming_language)\P\539-1
"a project"	"be called"	"with the aims of increasing the speed of the Python interpreter by 5 times by using the LLVM"	539	query201_Python_(programming_language)\P\539-2
"a project"	"be called"	"with the aims of increasing the speed of the Python interpreter by 5 times by the LLVM improving its multithreading ability to scale to thousands of cores"	539	query201_Python_(programming_language)\P\539-3
"a project"	"be called"	"with the aims of increasing the speed of the Python interpreter by 5 times by the LLVM improving its multithreading ability to scale to thousands of cores"	539	query201_Python_(programming_language)\P\539-4
http ://code .google 	540	query201_Python_(programming_language)\S\540
.com/p/unladen-swallow/wiki/ProjectPlan 	541	query201_Python_(programming_language)\S\541
Plans for optimizing Python September 24 , 2011 http ://code .google 	542	query201_Python_(programming_language)\S\542
.com/p/unladen-swallow/wiki/ProjectPlan 	543	query201_Python_(programming_language)\S\543
Plans for optimizing Python September 24 , 2011 Jython compiles the Python program into Java byte code , which can then be executed by every Java Virtual Machine implementation . 	544	query201_Python_(programming_language)\S\544
Plans for optimizing Python September 24 , 2011 Jython compiles the Python program into Java byte code , which can then be executed by every Java Virtual Machine implementation . 	544	query201_Python_(programming_language)\S\544
Plans for optimizing Python September 24 , 2011 Jython compiles the Python program into Java byte code , which can then be executed by every Java Virtual Machine implementation . 	544	query201_Python_(programming_language)\S\544
"Java byte code"	"can be executed"	"by every Java Virtual Machine implementation"	544	query201_Python_(programming_language)\P\544-0
This also enables the use of Java class library functions from the Python program . 	545	query201_Python_(programming_language)\S\545
This also enables the use of Java class library functions from the Python program . 	545	query201_Python_(programming_language)\S\545
This also enables the use of Java class library functions from the Python program . 	545	query201_Python_(programming_language)\S\545
This also enables the use of Java class library functions from the Python program . 	545	query201_Python_(programming_language)\S\545
IronPython follows a similar approach in order to run Python programs on the .NET 	546	query201_Python_(programming_language)\S\546
Common Language Runtime . 	547	query201_Python_(programming_language)\S\547
PyPy is a fast self-hosting implementation of Python , written in Python , that can output several types of bytecode , object code and intermediate language . 	548	query201_Python_(programming_language)\S\548
"PyPy"	"is a fast self-hosting implementation"	"of Python written in Python that can output several types of bytecode"	548	query201_Python_(programming_language)\P\548-0
"PyPy"	"is"	"a fast self-hosting implementation"	548	query201_Python_(programming_language)\P\548-1
"Python that can output several types of bytecode"	"be written"	"in Python"	548	query201_Python_(programming_language)\P\548-2
"output several types of bytecode"	"is"	"object code"	548	query201_Python_(programming_language)\P\548-3
"output several types of bytecode"	"is"	"object intermediate language"	548	query201_Python_(programming_language)\P\548-4
There also exist compilers to high-level object language , with either unrestricted Python , a restricted subset of Python , or a language similar to Python as the source language . 	549	query201_Python_(programming_language)\S\549
There also exist compilers to high-level object language , with either unrestricted Python , a restricted subset of Python , or a language similar to Python as the source language . 	549	query201_Python_(programming_language)\S\549
There also exist compilers to high-level object language , with either unrestricted Python , a restricted subset of Python , or a language similar to Python as the source language . 	549	query201_Python_(programming_language)\S\549
"unrestricted Python"	"is"	"a restricted subset of Python"	549	query201_Python_(programming_language)\P\549-0
"unrestricted Python"	"is"	"a restricted subset of a language similar to Python as the source language"	549	query201_Python_(programming_language)\P\549-1
PyPy is of this type , compiling RPython to several languages ; other examples include Pyjamas compiling to JavaScript ; Shed Skin compiling to C++ ; and Cython and Pyrex compiling to C . 	550	query201_Python_(programming_language)\S\550
"PyPy"	"is"	"of this type compiling RPython to several languages"	550	query201_Python_(programming_language)\P\550-0
"PyPy"	"is"	"of this type compiling RPython"	550	query201_Python_(programming_language)\P\550-1
"PyPy"	"is"	"compiling RPython to several languages"	550	query201_Python_(programming_language)\P\550-2
"PyPy"	"is"	"compiling RPython"	550	query201_Python_(programming_language)\P\550-3
"other examples"	"include"	"Pyjamas compiling to JavaScript"	550	query201_Python_(programming_language)\P\550-4
"other examples"	"Shed Skin"	"Pyjamas compiling to JavaScript compiling to C++"	550	query201_Python_(programming_language)\P\550-5
"other examples"	"Shed Skin"	"Pyjamas compiling to JavaScript"	550	query201_Python_(programming_language)\P\550-6
"other examples"	"Cython"	"Pyjamas compiling to JavaScript compiling to C"	550	query201_Python_(programming_language)\P\550-7
"other examples"	"Pyrex"	"Pyjamas compiling to JavaScript compiling to C"	550	query201_Python_(programming_language)\P\550-8
"other examples"	"Cython"	"Pyjamas compiling to JavaScript"	550	query201_Python_(programming_language)\P\550-9
"other examples"	"Pyrex"	"Pyjamas compiling to JavaScript"	550	query201_Python_(programming_language)\P\550-10
"other examples"	"Pyrex"	"Pyjamas compiling to JavaScript"	550	query201_Python_(programming_language)\P\550-11
"Shed Skin"	"be compiling"	"to C++"	550	query201_Python_(programming_language)\P\550-12
"Shed Skin"	"be compiling"	"to C++"	550	query201_Python_(programming_language)\P\550-13
"Shed Skin"	"be compiling"	"to C++"	550	query201_Python_(programming_language)\P\550-14
In 2005 Nokia released a Python interpreter for the Series 60 mobile phone called PyS60 . 	551	query201_Python_(programming_language)\S\551
"In 2005 Nokia"	"released"	"a Python interpreter for the Series 60 mobile phone called PyS60"	551	query201_Python_(programming_language)\P\551-0
It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system . 	552	query201_Python_(programming_language)\S\552
It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system . 	552	query201_Python_(programming_language)\S\552
It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system . 	552	query201_Python_(programming_language)\S\552
This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available . 	553	query201_Python_(programming_language)\S\553
"This project"	"has been kept up"	"to date to run on all variants of the S60 platform"	553	query201_Python_(programming_language)\P\553-0
"This project"	"has been kept up"	"to run on all variants of the S60 platform"	553	query201_Python_(programming_language)\P\553-1
The Nokia N900 also supports Python with gtk widget libraries , with the feature that programs can be both written and run on the device itself . 	554	query201_Python_(programming_language)\S\554
"The Nokia N900"	"supports"	"Python with gtk widget libraries also"	554	query201_Python_(programming_language)\P\554-0
"The Nokia N900"	"supports"	"Python with gtk widget libraries with the feature"	554	query201_Python_(programming_language)\P\554-1
"The Nokia N900"	"supports"	"Python with gtk widget libraries"	554	query201_Python_(programming_language)\P\554-2
"that programs"	"can be written"	"the feature"	554	query201_Python_(programming_language)\P\554-3
"that programs"	"can be run"	"on the device itself the feature"	554	query201_Python_(programming_language)\P\554-4
"that programs"	"can be run"	"the feature"	554	query201_Python_(programming_language)\P\554-5
There is also a Python interpreter for Windows CE devices ( including Pocket PC ) . 	555	query201_Python_(programming_language)\S\555
"a Python interpreter for Windows CE devices including Pocket PC"	"There is"	"also 555"	555	query201_Python_(programming_language)\P\555-0
"a Python interpreter for Windows CE devices including Pocket PC"	"There is"	"555"	555	query201_Python_(programming_language)\P\555-1
It is called PythonCE. 	556	query201_Python_(programming_language)\S\556
It is called PythonCE. 	556	query201_Python_(programming_language)\S\556
http ://pythonce .sourceforge 	557	query201_Python_(programming_language)\S\557
.net/ 	558	query201_Python_(programming_language)\S\558
PythonCE Pythonce .sourceforge 	559	query201_Python_(programming_language)\S\559
.net 	560	query201_Python_(programming_language)\S\560
2011-04-19 http ://pythonce .sourceforge 	561	query201_Python_(programming_language)\S\561
.net/ 	562	query201_Python_(programming_language)\S\562
PythonCE Pythonce .sourceforge 	563	query201_Python_(programming_language)\S\563
.net 	564	query201_Python_(programming_language)\S\564
2011-04-19 There are additional tools available for easy application and GUI development . 	565	query201_Python_(programming_language)\S\565
The PyMite virtual machine began in 2000 and made its first public appearance at PyCon 2003 . 	566	query201_Python_(programming_language)\S\566
"The PyMite virtual machine"	"began"	"in 2000"	566	query201_Python_(programming_language)\P\566-0
"The PyMite virtual machine"	"made"	"its first public appearance at PyCon 2003 in 2000"	566	query201_Python_(programming_language)\P\566-1
"The PyMite virtual machine"	"made"	"its first public appearance at PyCon 2003"	566	query201_Python_(programming_language)\P\566-2
"The PyMite virtual machine"	"made"	"its first public appearance at PyCon 2003"	566	query201_Python_(programming_language)\P\566-3
http ://wiki.python 	567	query201_Python_(programming_language)\S\567
.org/moin/PyMite 	568	query201_Python_(programming_language)\S\568
PyMite : Python-on-a-chip Wiki.python 	569	query201_Python_(programming_language)\S\569
.org 	570	query201_Python_(programming_language)\S\570
2009-04-19 2011-04-19 http ://wiki.python 	571	query201_Python_(programming_language)\S\571
.org/moin/PyMite 	572	query201_Python_(programming_language)\S\572
PyMite : Python-on-a-chip Wiki.python 	573	query201_Python_(programming_language)\S\573
.org 	574	query201_Python_(programming_language)\S\574
2009-04-19 2011-04-19 PyMite was folded into in 2009 . 	575	query201_Python_(programming_language)\S\575
"2009-04-19 2011-04-19 PyMite"	"was folded"	"into in 2009"	575	query201_Python_(programming_language)\P\575-0
http ://deanandara.com/PyMite/2010-State 	576	query201_Python_(programming_language)\S\576
.html 	577	query201_Python_(programming_language)\S\577
PyMite Deanandara.com 	578	query201_Python_(programming_language)\S\578
2011-04-19 http ://deanandara.com/PyMite/2010-State 	579	query201_Python_(programming_language)\S\579
.html 	580	query201_Python_(programming_language)\S\580
PyMite Deanandara.com 	581	query201_Python_(programming_language)\S\581
2011-04-19 Python -on-a-Chip ( p14p ) is a project to develop a reduced Python virtual machine ( codenamed PyMite ) that runs a significant subset of the Python language on microcontrollers without an OS in as little as 4KB of RAM. 	582	query201_Python_(programming_language)\S\582
2011-04-19 Python -on-a-Chip ( p14p ) is a project to develop a reduced Python virtual machine ( codenamed PyMite ) that runs a significant subset of the Python language on microcontrollers without an OS in as little as 4KB of RAM. 	582	query201_Python_(programming_language)\S\582
"2011-04-19 Python on-a-Chip"	"is a project"	"to develop a reduced Python virtual machine codenamed PyMite"	582	query201_Python_(programming_language)\P\582-0
"2011-04-19 Python on-a-Chip"	"is"	"a project"	582	query201_Python_(programming_language)\P\582-1
"a project"	"be develop"	"a reduced Python virtual machine codenamed PyMite"	582	query201_Python_(programming_language)\P\582-2
"a reduced Python virtual machine codenamed PyMite"	"runs"	"a significant subset of the Python language on microcontrollers without an OS"	582	query201_Python_(programming_language)\P\582-3
"a reduced Python virtual machine codenamed PyMite"	"runs"	"a significant subset of the Python language on microcontrollers in as little as 4KB of RAM"	582	query201_Python_(programming_language)\P\582-4
"a reduced Python virtual machine codenamed PyMite"	"runs"	"a significant subset of the Python language on microcontrollers"	582	query201_Python_(programming_language)\P\582-5
http ://pythononachip.org/ 	583	query201_Python_(programming_language)\S\583
PyMite Python-on-a-Chip 2011-04-19 http ://pythononachip.org/ 	584	query201_Python_(programming_language)\S\584
PyMite Python-on-a-Chip 2011-04-19 Around 2004 June 2010 , the project created a specialized translator and assembler that targets resource-constrained microcontroller . 	585	query201_Python_(programming_language)\S\585
"the project"	"created"	"a specialized translator"	585	query201_Python_(programming_language)\P\585-0
"the project"	"created"	"a specialized assembler"	585	query201_Python_(programming_language)\P\585-1
"a specialized translator"	"targets"	"resource-constrained microcontroller"	585	query201_Python_(programming_language)\P\585-2
"a specialized assembler"	"targets"	"resource-constrained microcontroller"	585	query201_Python_(programming_language)\P\585-3
ChinesePython ( 中蟒 ) is a Python programming language using a Chinese-language lexicon . 	586	query201_Python_(programming_language)\S\586
"ChinesePython"	"is"	"中蟒"	586	query201_Python_(programming_language)\P\586-0
"ChinesePython"	"is a Python programming language"	"using a Chinese-language lexicon"	586	query201_Python_(programming_language)\P\586-1
"ChinesePython"	"is"	"a Python programming language"	586	query201_Python_(programming_language)\P\586-2
"a Python programming language"	"be using"	"a Chinese-language lexicon"	586	query201_Python_(programming_language)\P\586-3
Besides reserved words and variable names , most data type operations can be coded in Chinese as well . 	587	query201_Python_(programming_language)\S\587
"most data type operations"	"can be coded"	"in Chinese as well"	587	query201_Python_(programming_language)\P\587-0
"most data type operations"	"can be coded"	"in Chinese as well"	587	query201_Python_(programming_language)\P\587-1
March 2011 Python is available on Android as an option as part of the Android Scripting Environment . 	588	query201_Python_(programming_language)\S\588
"March 2011 Python"	"is available"	"on Android"	588	query201_Python_(programming_language)\P\588-0
"March 2011 Python"	"is available"	"as an option as part of the Android Scripting Environment"	588	query201_Python_(programming_language)\P\588-1
"March 2011 Python"	"is"	"available"	588	query201_Python_(programming_language)\P\588-2
http ://code .google 	589	query201_Python_(programming_language)\S\589
.com/p/android-scripting 	590	query201_Python_(programming_language)\S\590
/ android-scripting September 24 , 2011 http ://code .google 	591	query201_Python_(programming_language)\S\591
.com/p/android-scripting 	592	query201_Python_(programming_language)\S\592
/ android-scripting September 24 , 2011 Most Python implementations ( including CPython ) can function as a command line interpreter , for which the user enters statements sequentially and receives the results immediately . 	593	query201_Python_(programming_language)\S\593
"android-scripting September 24 2011 Most Python implementations including CPython"	"can function"	"as a command line interpreter"	593	query201_Python_(programming_language)\P\593-0
"the user"	"enters"	"statements a command line interpreter for which"	593	query201_Python_(programming_language)\P\593-1
"the user"	"enters"	"statements sequentially a command line interpreter"	593	query201_Python_(programming_language)\P\593-2
"the user"	"enters"	"statements a command line interpreter"	593	query201_Python_(programming_language)\P\593-3
"the user"	"receives"	"statements the results a command line interpreter for which"	593	query201_Python_(programming_language)\P\593-4
"the user"	"receives"	"statements the results a command line interpreter sequentially"	593	query201_Python_(programming_language)\P\593-5
"the user"	"receives"	"statements the results immediately a command line interpreter"	593	query201_Python_(programming_language)\P\593-6
"the user"	"receives"	"statements the results a command line interpreter"	593	query201_Python_(programming_language)\P\593-7
In short , Python acts as a shell . 	594	query201_Python_(programming_language)\S\594
In short , Python acts as a shell . 	594	query201_Python_(programming_language)\S\594
In short , Python acts as a shell . 	594	query201_Python_(programming_language)\S\594
While the semantics of the other modes of execution ( bytecode compilation , or compilation to native code ) preserve the sequential semantics , they offer a speed boost at the cost of interactivity , so they are usually only used outside of a command-line interaction ( e .g. 	595	query201_Python_(programming_language)\S\595
, when importing a module ) . 	596	query201_Python_(programming_language)\S\596
Other shells add capabilities beyond those in the basic interpreter , including IDLE and IPython . 	597	query201_Python_(programming_language)\S\597
"Other shells"	"add"	"capabilities beyond those in the basic interpreter including IDLE"	597	query201_Python_(programming_language)\P\597-0
"Other shells"	"add"	"capabilities beyond those in the basic interpreter including IPython"	597	query201_Python_(programming_language)\P\597-1
While generally following the visual style of the Python shell , they implement features like auto-completion , retention of session state , and syntax highlighting . 	598	query201_Python_(programming_language)\S\598
While generally following the visual style of the Python shell , they implement features like auto-completion , retention of session state , and syntax highlighting . 	598	query201_Python_(programming_language)\S\598
While generally following the visual style of the Python shell , they implement features like auto-completion , retention of session state , and syntax highlighting . 	598	query201_Python_(programming_language)\S\598
While generally following the visual style of the Python shell , they implement features like auto-completion , retention of session state , and syntax highlighting . 	598	query201_Python_(programming_language)\S\598
Some implementations can compile not only to bytecode , but can turn Python code into machine code . 	599	query201_Python_(programming_language)\S\599
"Some implementations"	"can compile"	"to bytecode"	599	query201_Python_(programming_language)\P\599-0
"Some implementations"	"can compile"	"bytecode can turn Python code into machine code"	599	query201_Python_(programming_language)\P\599-1
So far , this has only been done for restricted subsets of Python . 	600	query201_Python_(programming_language)\S\600
So far , this has only been done for restricted subsets of Python . 	600	query201_Python_(programming_language)\S\600
So far , this has only been done for restricted subsets of Python . 	600	query201_Python_(programming_language)\S\600
So far , this has only been done for restricted subsets of Python . 	600	query201_Python_(programming_language)\S\600
PyPy takes this approach , naming its restricted compilable version of Python RPython . 	601	query201_Python_(programming_language)\S\601
"PyPy"	"takes"	"this approach naming its restricted compilable version of Python RPython"	601	query201_Python_(programming_language)\P\601-0
"PyPy"	"be naming"	"its restricted compilable version of Python RPython"	601	query201_Python_(programming_language)\P\601-1
"PyPy"	"be naming"	"its restricted compilable version of Python RPython"	601	query201_Python_(programming_language)\P\601-2
Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime . 	602	query201_Python_(programming_language)\S\602
Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime . 	602	query201_Python_(programming_language)\S\602
"time compiler"	"integrates"	"with CPython"	602	query201_Python_(programming_language)\P\602-0
"time compiler"	"transforms"	"bytecode with CPython"	602	query201_Python_(programming_language)\P\602-1
"time compiler"	"transforms"	"bytecode to machine code"	602	query201_Python_(programming_language)\P\602-2
"time compiler"	"transforms"	"bytecode at runtime"	602	query201_Python_(programming_language)\P\602-3
"time compiler"	"transforms"	"bytecode"	602	query201_Python_(programming_language)\P\602-4
The produced code is specialised for certain data types and is faster than standard Python code . 	603	query201_Python_(programming_language)\S\603
"The produced code"	"is specialised"	"for certain data types"	603	query201_Python_(programming_language)\P\603-0
"The produced code"	"is is"	"faster than standard Python code for certain data types"	603	query201_Python_(programming_language)\P\603-1
"The produced code"	"is is"	"faster than standard Python code"	603	query201_Python_(programming_language)\P\603-2
Psyco is compatible with all Python code , not only a subset . 	604	query201_Python_(programming_language)\S\604
"Psyco"	"is compatible"	"with all Python code"	604	query201_Python_(programming_language)\P\604-0
"Psyco"	"is"	"compatible"	604	query201_Python_(programming_language)\P\604-1
"Psyco is compatible with all Python code"	"is"	"not only a subset"	604	query201_Python_(programming_language)\P\604-2
http ://psyco .sourceforge 	605	query201_Python_(programming_language)\S\605
.net/introduction 	606	query201_Python_(programming_language)\S\606
.html 	607	query201_Python_(programming_language)\S\607
Introduction to Psyco Psyco .sourceforge 	608	query201_Python_(programming_language)\S\608
.net 	609	query201_Python_(programming_language)\S\609
2011-04-19 http ://psyco .sourceforge 	610	query201_Python_(programming_language)\S\610
.net/introduction 	611	query201_Python_(programming_language)\S\611
.html 	612	query201_Python_(programming_language)\S\612
Introduction to Psyco Psyco .sourceforge 	613	query201_Python_(programming_language)\S\613
.net 	614	query201_Python_(programming_language)\S\614
2011-04-19 Python 's development is conducted largely through the Python Enhancement Proposal ( PEP ) process . 	615	query201_Python_(programming_language)\S\615
2011-04-19 Python 's development is conducted largely through the Python Enhancement Proposal ( PEP ) process . 	615	query201_Python_(programming_language)\S\615
"2011-04-19 Python 's development"	"is conducted"	"largely through the Python Enhancement Proposal process"	615	query201_Python_(programming_language)\P\615-0
"the Python Enhancement Proposal"	"is"	"PEP"	615	query201_Python_(programming_language)\P\615-1
PEPs are standardized design documents providing general information related to Python , including proposals , descriptions , design rationale , and explanations for language features . 	616	query201_Python_(programming_language)\S\616
"PEPs"	"are standardized design documents"	"providing general information related to Python"	616	query201_Python_(programming_language)\P\616-0
"PEPs"	"are standardized design documents"	"including proposals"	616	query201_Python_(programming_language)\P\616-1
"PEPs"	"are standardized design documents"	"including descriptions"	616	query201_Python_(programming_language)\P\616-2
"PEPs"	"are standardized design documents"	"including design rationale"	616	query201_Python_(programming_language)\P\616-3
"PEPs"	"are standardized design documents"	"including explanations for language features"	616	query201_Python_(programming_language)\P\616-4
"PEPs"	"are"	"standardized design documents"	616	query201_Python_(programming_language)\P\616-5
"standardized design documents including proposals"	"be providing"	"general information related to Python"	616	query201_Python_(programming_language)\P\616-6
"standardized design documents including descriptions"	"be providing"	"general information related to Python"	616	query201_Python_(programming_language)\P\616-7
"standardized design documents including design rationale"	"be providing"	"general information related to Python"	616	query201_Python_(programming_language)\P\616-8
"standardized design documents including explanations for language features"	"be providing"	"general information related to Python"	616	query201_Python_(programming_language)\P\616-9
"general information"	"be related"	"to Python"	616	query201_Python_(programming_language)\P\616-10
http ://www.python 	617	query201_Python_(programming_language)\S\617
.org/dev/peps/pep-0001/ 	618	query201_Python_(programming_language)\S\618
PEP 1 - PEP Purpose and Guidelines Python .org 	619	query201_Python_(programming_language)\S\619
2011-04-19 http ://www.python 	620	query201_Python_(programming_language)\S\620
.org/dev/peps/pep-0001/ 	621	query201_Python_(programming_language)\S\621
PEP 1 - PEP Purpose and Guidelines Python .org 	622	query201_Python_(programming_language)\S\622
2011-04-19 Outstanding PEPs are reviewed and commented upon by Van Rossum , the Python project 's Benevolent Dictator for Life ( leader / language architect ) . 	623	query201_Python_(programming_language)\S\623
"2011-04-19 Outstanding PEPs"	"are reviewed"	"upon by Van Rossum"	623	query201_Python_(programming_language)\P\623-0
"2011-04-19 Outstanding PEPs"	"are commented"	"upon by Van Rossum"	623	query201_Python_(programming_language)\P\623-1
"the Python project"	"has"	"Benevolent Dictator for Life"	623	query201_Python_(programming_language)\P\623-2
"the Python project 's Benevolent Dictator for Life"	"is"	"leader language architect"	623	query201_Python_(programming_language)\P\623-3
http ://www.python 	624	query201_Python_(programming_language)\S\624
.org/doc/essays/pepparade 	625	query201_Python_(programming_language)\S\625
.html 	626	query201_Python_(programming_language)\S\626
Parade of the PEPs Python .org 	627	query201_Python_(programming_language)\S\627
2008-11-24 http ://www.python 	628	query201_Python_(programming_language)\S\628
.org/doc/essays/pepparade 	629	query201_Python_(programming_language)\S\629
.html 	630	query201_Python_(programming_language)\S\630
Parade of the PEPs Python .org 	631	query201_Python_(programming_language)\S\631
2008-11-24 CPython 's developers also communicate over a mailing list , python-dev , which is the primary forum for discussion about the language 's development ; specific issues are discussed in the Roundup bug tracker maintained at python .org 	632	query201_Python_(programming_language)\S\632
. 	633	query201_Python_(programming_language)\S\633
http ://classic-web.archive 	634	query201_Python_(programming_language)\S\634
.org/web/20080229153753/http 	635	query201_Python_(programming_language)\S\635
://www.python 	636	query201_Python_(programming_language)\S\636
.org/dev/intro/ 	637	query201_Python_(programming_language)\S\637
Guido , Some Guys , and a Mailing List : How Python is Developed Cannon Brett python .org 	638	query201_Python_(programming_language)\S\638
Python Software Foundation 2009-06-27 http ://classic-web.archive 	639	query201_Python_(programming_language)\S\639
.org/web/20080229153753/http 	640	query201_Python_(programming_language)\S\640
://www.python 	641	query201_Python_(programming_language)\S\641
.org/dev/intro/ 	642	query201_Python_(programming_language)\S\642
Guido , Some Guys , and a Mailing List : How Python is Developed Cannon Brett python .org 	643	query201_Python_(programming_language)\S\643
Python Software Foundation 2009-06-27 Development takes place at the self-hosted hg .python 	644	query201_Python_(programming_language)\S\644
.org 	645	query201_Python_(programming_language)\S\645
. 	646	query201_Python_(programming_language)\S\646
CPython 's public releases come in three types , distinguished by which part of the version number is incremented : A number of alpha_ beta_ and release-candidates are also released as previews and for testing before the final release is made . 	647	query201_Python_(programming_language)\S\647
"CPython"	"has"	"public"	647	query201_Python_(programming_language)\P\647-0
"part of the version number"	"is incremented"	"by which"	647	query201_Python_(programming_language)\P\647-1
"A number of alpha _ beta _"	"are released"	"as previews also"	647	query201_Python_(programming_language)\P\647-2
"A of alpha _ beta _ release-candidates"	"are released"	"as previews also"	647	query201_Python_(programming_language)\P\647-3
"A number of alpha _ beta _"	"are released"	"as previews"	647	query201_Python_(programming_language)\P\647-4
"A of alpha _ beta _ release-candidates"	"are released"	"as previews"	647	query201_Python_(programming_language)\P\647-5
"the final release"	"is made"	"for testing"	647	query201_Python_(programming_language)\P\647-6
Although there is a rough schedule for each release , this is often pushed back if the code is not ready . 	648	query201_Python_(programming_language)\S\648
Although there is a rough schedule for each release , this is often pushed back if the code is not ready . 	648	query201_Python_(programming_language)\S\648
Although there is a rough schedule for each release , this is often pushed back if the code is not ready . 	648	query201_Python_(programming_language)\S\648
Although there is a rough schedule for each release , this is often pushed back if the code is not ready . 	648	query201_Python_(programming_language)\S\648
"the code"	"is not"	"ready"	648	query201_Python_(programming_language)\P\648-0
The development team monitor the state of the code by running the large unit test suite during development , and using the BuildBot continuous integration system . 	649	query201_Python_(programming_language)\S\649
"The development team"	"monitor"	"the state of the code by running the large unit test suite during development"	649	query201_Python_(programming_language)\P\649-0
"The development team"	"monitor"	"the state of the code"	649	query201_Python_(programming_language)\P\649-1
"The development team"	"using"	"the state of the code the BuildBot continuous integration system by running the large unit test suite during development"	649	query201_Python_(programming_language)\P\649-2
"The development team"	"using"	"the state of the code the BuildBot continuous integration system"	649	query201_Python_(programming_language)\P\649-3
http ://python .org/dev/buildbot/ 	650	query201_Python_(programming_language)\S\650
Python Buildbot September 24 , 2011 http ://python .org/dev/buildbot/ 	651	query201_Python_(programming_language)\S\651
Python Buildbot September 24 , 2011 Python has a large standard library , commonly cited as one of Python 's greatest strengths , Przemyslaw Piotrowski , , Oracle Technology Network , July 2006 . 	652	query201_Python_(programming_language)\S\652
"Python"	"has"	"a large standard library 652 Python Buildbot September 24"	2011	query201_Python_(programming_language)\P\652-0
"Python Buildbot September 24"	"cited"	"as one of Python 's greatest strengths commonly"	652	query201_Python_(programming_language)\P\652-1
"Python Buildbot September 24"	"cited"	"as one of Python 's greatest strengths"	652	query201_Python_(programming_language)\P\652-2
"Python Buildbot September 24"	"cited"	"as one of Python 's greatest strengths"	652	query201_Python_(programming_language)\P\652-3
"Oracle Technology Network"	"is"	"July 2006"	652	query201_Python_(programming_language)\P\652-4
Retrieved October 21 , 2008 . 	653	query201_Python_(programming_language)\S\653
Retrieved October 21 , 2008 . 	653	query201_Python_(programming_language)\S\653
providing pre-written tools suited to many tasks . 	654	query201_Python_(programming_language)\S\654
providing pre-written tools suited to many tasks . 	654	query201_Python_(programming_language)\S\654
"pre-written tools"	"be suited"	"to many tasks"	654	query201_Python_(programming_language)\P\654-0
This is deliberate and has been described as a "batteries included " http ://www.python 	655	query201_Python_(programming_language)\S\655
This is deliberate and has been described as a "batteries included " http ://www.python 	655	query201_Python_(programming_language)\S\655
This is deliberate and has been described as a "batteries included " http ://www.python 	655	query201_Python_(programming_language)\S\655
This is deliberate and has been described as a "batteries included " http ://www.python 	655	query201_Python_(programming_language)\S\655
.org/about/ 	656	query201_Python_(programming_language)\S\656
About Python python .org 	657	query201_Python_(programming_language)\S\657
Python Software Foundation 2009-06-27 http ://www.python 	658	query201_Python_(programming_language)\S\658
.org/about/ 	659	query201_Python_(programming_language)\S\659
About Python python .org 	660	query201_Python_(programming_language)\S\660
Python Software Foundation 2009-06-27 Python philosophy . 	661	query201_Python_(programming_language)\S\661
The modules of the standard library can be augmented with custom modules written in either C or Python . 	662	query201_Python_(programming_language)\S\662
"The modules of the standard library"	"can be augmented"	"with custom modules written in C"	662	query201_Python_(programming_language)\P\662-0
"The modules of the standard library"	"can be augmented"	"with custom modules written in Python"	662	query201_Python_(programming_language)\P\662-1
"custom modules"	"be written"	"in C"	662	query201_Python_(programming_language)\P\662-2
"custom modules"	"be written"	"in Python"	662	query201_Python_(programming_language)\P\662-3
Boost C++ Libraries includes a library , Boost.Python 	663	query201_Python_(programming_language)\S\663
"Boost C++ Libraries"	"includes"	"a library"	663	query201_Python_(programming_language)\P\663-0
, to enable interoperability between C++ and Python . 	664	query201_Python_(programming_language)\S\664
Because of the wide variety of tools provided by the standard library , combined with the ability to use a lower-level language such as C and C++ , which is already capable of interfacing between other libraries , Python can be a powerful glue language between languages and tools . 	665	query201_Python_(programming_language)\S\665
"Because of the wide variety of tools provided by the standard library"	"be combined"	"with the ability to use a lower-level language such as C"	665	query201_Python_(programming_language)\P\665-0
"Because of the wide variety of tools provided by the standard library"	"be combined"	"with the ability to use a lower-level language such as C++"	665	query201_Python_(programming_language)\P\665-1
"Because of the wide variety of tools provided by the standard library"	"be combined"	"with the ability to use a lower-level language such as C++"	665	query201_Python_(programming_language)\P\665-2
"the ability"	"be use"	"a lower-level language such as C"	665	query201_Python_(programming_language)\P\665-3
"the ability"	"be use"	"a lower-level language such as C++"	665	query201_Python_(programming_language)\P\665-4
"the ability to use a lower-level language such as C"	"is capable"	"already"	665	query201_Python_(programming_language)\P\665-5
"the ability to use a lower-level language such as C++"	"is capable"	"already"	665	query201_Python_(programming_language)\P\665-6
"the ability to use a lower-level language such as C"	"is capable"	"of interfacing between other libraries"	665	query201_Python_(programming_language)\P\665-7
"the ability to use a lower-level language such as C++"	"is capable"	"of interfacing between other libraries"	665	query201_Python_(programming_language)\P\665-8
"the ability to use a lower-level language such as C"	"is"	"capable"	665	query201_Python_(programming_language)\P\665-9
"the ability to use a lower-level language such as C++"	"is"	"capable"	665	query201_Python_(programming_language)\P\665-10
"the ability to use a lower-level language such as C++"	"is"	"capable"	665	query201_Python_(programming_language)\P\665-11
"the ability to use a lower-level language such as C++"	"is"	"capable"	665	query201_Python_(programming_language)\P\665-12
"the ability to use a lower-level language such as C++"	"is"	"capable"	665	query201_Python_(programming_language)\P\665-13
"the ability to use a lower-level language such as C++"	"is"	"capable"	665	query201_Python_(programming_language)\P\665-14
The standard library is particularly well tailored to writing Internet-facing applications , with a large number of standard formats and protocols ( such as MIME and HTTP ) already supported . 	666	query201_Python_(programming_language)\S\666
"The standard library"	"is tailored"	"to writing Internet-facing applications particularly well"	666	query201_Python_(programming_language)\P\666-0
"The standard library"	"is tailored"	"to writing Internet-facing applications with a large number of standard formats such as MIME already supported"	666	query201_Python_(programming_language)\P\666-1
"The standard library"	"is tailored"	"to writing Internet-facing applications with a large number of standard protocols such as MIME already supported"	666	query201_Python_(programming_language)\P\666-2
"The standard library"	"is tailored"	"to writing Internet-facing applications with a large number of standard protocols such as HTTP already supported"	666	query201_Python_(programming_language)\P\666-3
"The standard library"	"is tailored"	"to writing Internet-facing applications with a large number of standard formats such as HTTP already supported"	666	query201_Python_(programming_language)\P\666-4
"The standard library"	"is tailored"	"to writing Internet-facing applications"	666	query201_Python_(programming_language)\P\666-5
"a large number of standard formats such as MIME"	"be supported"	"already"	666	query201_Python_(programming_language)\P\666-6
"a large number of standard protocols such as MIME"	"be supported"	"already"	666	query201_Python_(programming_language)\P\666-7
"a large number of standard protocols such as HTTP"	"be supported"	"already"	666	query201_Python_(programming_language)\P\666-8
"a large number of standard formats such as HTTP"	"be supported"	"already"	666	query201_Python_(programming_language)\P\666-9
Modules for creating graphical user interface , connecting to relational database , arithmetic with arbitrary precision decimals , manipulating regular expression , and doing unit testing are also included . 	667	query201_Python_(programming_language)\S\667
"Modules for creating graphical user interface connecting to relational database"	"be manipulating"	"regular expression"	667	query201_Python_(programming_language)\P\667-0
"for creating graphical user interface connecting to relational database doing unit testing"	"be manipulating"	"regular expression"	667	query201_Python_(programming_language)\P\667-1
"Modules for creating graphical user interface manipulating regular expression"	"be connecting"	"to relational database"	667	query201_Python_(programming_language)\P\667-2
"for creating graphical user interface manipulating regular expression doing unit testing"	"be connecting"	"to relational database"	667	query201_Python_(programming_language)\P\667-3
"Modules for creating graphical user interface connecting to relational database manipulating regular expression"	"is"	"arithmetic with arbitrary precision decimals"	667	query201_Python_(programming_language)\P\667-4
"for creating graphical user interface connecting to relational database manipulating regular expression doing unit testing"	"is"	"arithmetic with arbitrary precision decimals"	667	query201_Python_(programming_language)\P\667-5
"Modules for creating graphical user interface connecting to relational database manipulating regular expression"	"are included"	"also"	667	query201_Python_(programming_language)\P\667-6
"for creating graphical user interface connecting to relational database manipulating regular expression doing unit testing"	"are included"	"also"	667	query201_Python_(programming_language)\P\667-7
http ://www.python 	668	query201_Python_(programming_language)\S\668
.org/peps/pep-0327.html 	669	query201_Python_(programming_language)\S\669
PEP 327 - Decimal Data Type Python .org 	670	query201_Python_(programming_language)\S\670
2008-11-24 http ://www.python 	671	query201_Python_(programming_language)\S\671
.org/peps/pep-0327.html 	672	query201_Python_(programming_language)\S\672
PEP 327 - Decimal Data Type Python .org 	673	query201_Python_(programming_language)\S\673
2008-11-24 Some parts of the standard library are covered by specifications ( for example , the WSGI implementation wsgiref follows ) , but the majority of the modules are not . 	674	query201_Python_(programming_language)\S\674
"2008-11-24 Some parts of the standard library"	"are covered"	"by specifications"	674	query201_Python_(programming_language)\P\674-0
"2008-11-24 Some parts of the standard library"	"are the majority"	"of the modules by specifications"	674	query201_Python_(programming_language)\P\674-1
"2008-11-24 Some parts of the standard library"	"are the majority"	"of the modules"	674	query201_Python_(programming_language)\P\674-2
"the WSGI implementation wsgiref"	"follows"	"specifications for example"	674	query201_Python_(programming_language)\P\674-3
"the WSGI implementation wsgiref"	"follows"	"specifications"	674	query201_Python_(programming_language)\P\674-4
They are specified by their code , internal documentation , and test suite ( if supplied ) . 	675	query201_Python_(programming_language)\S\675
They are specified by their code , internal documentation , and test suite ( if supplied ) . 	675	query201_Python_(programming_language)\S\675
They are specified by their code , internal documentation , and test suite ( if supplied ) . 	675	query201_Python_(programming_language)\S\675
They are specified by their code , internal documentation , and test suite ( if supplied ) . 	675	query201_Python_(programming_language)\S\675
However , because most of the standard library is cross-platform Python code , there are only a few modules that must be altered or completely rewritten by alternative implementations . 	676	query201_Python_(programming_language)\S\676
"most of the standard library"	"is"	"cross-platform Python code"	676	query201_Python_(programming_language)\P\676-0
"only a few modules"	"must be rewritten"	"by alternative implementations completely"	676	query201_Python_(programming_language)\P\676-1
"only a few modules"	"must be rewritten"	"by alternative implementations"	676	query201_Python_(programming_language)\P\676-2
The standard library is not essential to run Python or embed Python within an application . 	677	query201_Python_(programming_language)\S\677
"The standard library"	"is not"	"essential to run Python"	677	query201_Python_(programming_language)\P\677-0
"The standard library"	"is not"	"essential to embed Python Python within an application"	677	query201_Python_(programming_language)\P\677-1
"The standard library"	"is not"	"essential to embed Python Python"	677	query201_Python_(programming_language)\P\677-2
Blender 2.49 	678	query201_Python_(programming_language)\S\678
for instance omits most of the standard library . 	679	query201_Python_(programming_language)\S\679
"for instance"	"omits"	"most of the standard library"	679	query201_Python_(programming_language)\P\679-0
For software testing , the standard library provides the unittest and doctest modules . 	680	query201_Python_(programming_language)\S\680
"the standard library"	"provides"	"the unittest modules"	680	query201_Python_(programming_language)\P\680-0
"the standard library"	"provides"	"the doctest modules"	680	query201_Python_(programming_language)\P\680-1
Python 's design and philosophy have influenced several programming languages , including : Python 's development practices have also been emulated by other languages . 	681	query201_Python_(programming_language)\S\681
Python 's design and philosophy have influenced several programming languages , including : Python 's development practices have also been emulated by other languages . 	681	query201_Python_(programming_language)\S\681
"Python 's design"	"have influenced"	"several programming languages including"	681	query201_Python_(programming_language)\P\681-0
"Python 's philosophy"	"have influenced"	"several programming languages including"	681	query201_Python_(programming_language)\P\681-1
"Python 's philosophy"	"have influenced"	"several programming languages including"	681	query201_Python_(programming_language)\P\681-2
"Python 's development practices"	"have been emulated"	"by other languages also"	681	query201_Python_(programming_language)\P\681-3
"Python 's development practices"	"have been emulated"	"by other languages"	681	query201_Python_(programming_language)\P\681-4
The practice of requiring a document describing the rationale for , and issues surrounding , a change to the language ( in Python 's case , a PEP ) is also used in Tcl http ://www.tcl.tk/cgi-bin/tct/tip/3.html 	682	query201_Python_(programming_language)\S\682
"The practice of requiring a document describing the rationale for"	"is"	"a change to the language in Python 's case a PEP is also used in Tcl http www.tcl.tk/cgi-bin/tct/tip/3.html"	682	query201_Python_(programming_language)\P\682-0
"The practice of requiring a document describing the rationale issues surrounding"	"is"	"a change to the language in Python 's case a PEP is also used in Tcl http www.tcl.tk/cgi-bin/tct/tip/3.html"	682	query201_Python_(programming_language)\P\682-1
"a document"	"be describing"	"the rationale for"	682	query201_Python_(programming_language)\P\682-2
"a document"	"be describing"	"the rationale issues surrounding"	682	query201_Python_(programming_language)\P\682-3
"a document"	"be describing"	"the rationale issues surrounding"	682	query201_Python_(programming_language)\P\682-4
"a PEP"	"is used"	"in Tcl http in Python 's case"	682	query201_Python_(programming_language)\P\682-5
"a PEP"	"is used"	"in Tcl http also"	682	query201_Python_(programming_language)\P\682-6
"a PEP"	"is used"	"in Tcl http"	682	query201_Python_(programming_language)\P\682-7
TIP # 3 : TIP Format Tcl.tk 	683	query201_Python_(programming_language)\S\683
2008-11-24 http ://www.tcl.tk/cgi-bin/tct/tip/3.html 	684	query201_Python_(programming_language)\S\684
TIP # 3 : TIP Format Tcl.tk 	685	query201_Python_(programming_language)\S\685
2008-11-24 and Erlang http ://www.erlang 	686	query201_Python_(programming_language)\S\686
.org/eeps/eep-0001.html 	687	query201_Python_(programming_language)\S\687
EEP - Erlang Enhancement Proposal Erlang .org 	688	query201_Python_(programming_language)\S\688
2011-04-19 http ://www.erlang 	689	query201_Python_(programming_language)\S\689
.org/eeps/eep-0001.html 	690	query201_Python_(programming_language)\S\690
EEP - Erlang Enhancement Proposal Erlang .org 	691	query201_Python_(programming_language)\S\691
2011-04-19 because of Python 's influence . 	692	query201_Python_(programming_language)\S\692
2011-04-19 because of Python 's influence . 	692	query201_Python_(programming_language)\S\692
Free software Python Computer programming 30em Python Programming Topic:Python Python Programming Python Category :Python ( programming language ) Category :Class-based programming languages Category :Dynamically typed programming languages Category :Cross-platform free software Category :Object-oriented programming languages Category :Scripting languages Category :Text-oriented programming languages Category :Programming languages created in 1991 Category :High-level programming languages ru de af:Python als :Python ( Programmiersprache ) ar :بايثون an :Python az:Python ( proqramlaşdırma dili ) bn :পাইথন ( প্রোগ্রামি ং ভাষা ) bg :Python bs :Python programski jezik ca :Python cs :Python da:Python ( programmeringssprog ) de:Python ( Programmiersprache ) et :Python ( programmeerimiskeel ) el :Python es :Python eo:Python ( programlingvo ) eu:Python fa :پایتون ( زبان برنامه‌نویسی ) fr :Python ( langage ) gl:Python ko :파이썬 hi :पाइथन ( प्रोग्रामन भाषा ) hr:Python id :Python ( bahasa pemrograman ) ia :Python ( linguage de programmation ) is :Python ( forritunarmál ) it :Python he :פייתון ( שפת תכנות ) ka :პითონი ( პროგრამირების ენა ) kk :Python la:Python lv:Python lt :Python jbo :paiton hu:Python ( programozási nyelv ) ml :പൈത്തൺ ( പ്രോഗ്രാമിങ്ങ ് ഭാഷ ) mr :पायथॉन ms :Python nl :Python ( programmeertaal ) ne :पाइथन प्रोग्रामिङ्ग भाष ा ja:Python no:Python pl:Python pt:Python ro:Python ru:Python sq:Python si :පයිතන ් simple :Python ( programming language ) sk :Python ( programovací jazyk ) sl :Python ( programski jezik ) sr :Пајтон ( програмски језик ) sh :Python programski jezik fi:Python sv:Python ( programspråk ) tl:Python ( programming language ) ta :பைத்தான ் te :పైథాన ్ ( కంప్యూటర ్ భాష ) th :ภาษาไพทอน tg :Python tr :Python ( programlama dili ) bug:Python uk :Python vi:Python ( ngôn ngữ lập trình ) zh :Python The ifstatement , which conditionally executes a block of code , along with else and elif ( a contraction of else-if ) . 	693	query201_Python_(programming_language)\S\693
"Programming languages"	"be created"	"in 1991 Category"	693	query201_Python_(programming_language)\P\693-0
"Programming languages"	"be created"	"in 1991 Category"	693	query201_Python_(programming_language)\P\693-1
"Programming languages"	"be created"	"in 1991 Category"	693	query201_Python_(programming_language)\P\693-2
"Programming languages"	"be created"	"in 1991 Category"	693	query201_Python_(programming_language)\P\693-3
"Python programski jezik"	"Python cs"	"Python bs"	693	query201_Python_(programming_language)\P\693-4
"Python programski jezik"	"Python cs"	"Python bs"	693	query201_Python_(programming_language)\P\693-5
"Python programski jezik"	"Python cs"	"Python bs"	693	query201_Python_(programming_language)\P\693-6
"Python programski jezik"	"Python cs"	"Python bs"	693	query201_Python_(programming_language)\P\693-7
"Python et"	"is"	"Programmiersprache"	693	query201_Python_(programming_language)\P\693-8
"Python et"	"is"	"Programmiersprache"	693	query201_Python_(programming_language)\P\693-9
"Python et"	"is"	"Programmiersprache"	693	query201_Python_(programming_language)\P\693-10
"Python et"	"is"	"Programmiersprache"	693	query201_Python_(programming_language)\P\693-11
"Python et"	"is"	"Programmiersprache"	693	query201_Python_(programming_language)\P\693-12
"Python et"	"is"	"Programmiersprache"	693	query201_Python_(programming_language)\P\693-13
"Python et"	"is"	"Programmiersprache"	693	query201_Python_(programming_language)\P\693-14
"Python et"	"is"	"Programmiersprache"	693	query201_Python_(programming_language)\P\693-15
"Python it Python he פייתון שפת תכנות ka პითონი პროგრამირების ენა kk Python la Python lv Python lt Python jbo paiton hu Python ml പൈത തൺ പ ര ഗ mr पायथॉन ms Python nl Python programmeertaal ne पाइथन प्रोग्रामिङ्ग भाष ा ja Python no Python pl Python pt Python ro Python ru Python sq Python si පය තන simple Python programming language sk Python sl Python sr Пајтон sh Python programski jezik fi Python sv Python tl Python programming language ta பைத்தான ் te పైథాన ్ th ภาษาไพทอน tg Python tr Python bug Python uk Python vi Python zh Python The ifstatement along with else a contraction of else-if"	"is"	"forritunarmál"	693	query201_Python_(programming_language)\P\693-16
"Python it Python he פייתון שפת תכנות ka პითონი პროგრამირების ენა kk Python la Python lv Python lt Python jbo paiton hu Python ml പൈത തൺ പ ര ഗ mr पायथॉन ms Python nl Python programmeertaal ne पाइथन प्रोग्रामिङ्ग भाष ा ja Python no Python pl Python pt Python ro Python ru Python sq Python si පය තන simple Python programming language sk Python sl Python sr Пајтон sh Python programski jezik fi Python sv Python tl Python programming language ta பைத்தான ் te పైథాన ్ th ภาษาไพทอน tg Python tr Python bug Python uk Python vi Python zh Python The ifstatement along with elif a contraction of else-if"	"is"	"forritunarmál"	693	query201_Python_(programming_language)\P\693-17
"Python it Python he פייתון שפת תכנות ka პითონი პროგრამირების ენა kk Python la Python lv Python lt Python jbo paiton hu Python ml പൈത തൺ പ ര ഗ mr पायथॉन ms Python nl Python programmeertaal ne पाइथन प्रोग्रामिङ्ग भाष ा ja Python no Python pl Python pt Python ro Python ru Python sq Python si පය තන simple Python programming language sk Python sl Python sr Пајтон sh Python programski jezik fi Python sv Python tl Python programming language ta பைத்தான ் te పైథాన ్ th ภาษาไพทอน tg Python tr Python bug Python uk Python vi Python zh Python The ifstatement along with elif a contraction of else-if"	"is"	"forritunarmál"	693	query201_Python_(programming_language)\P\693-18
"പ ര ഗ"	"is"	"രാമിങ ങ ഭാഷ"	693	query201_Python_(programming_language)\P\693-19
"പ ര ഗ"	"is"	"രാമിങ ങ ഭാഷ"	693	query201_Python_(programming_language)\P\693-20
"പ ര ഗ"	"is"	"രാമിങ ങ ഭാഷ"	693	query201_Python_(programming_language)\P\693-21
"പ ര ഗ"	"is"	"രാമിങ ങ ഭാഷ"	693	query201_Python_(programming_language)\P\693-22
"പ ര ഗ"	"is"	"രാമിങ ങ ഭാഷ"	693	query201_Python_(programming_language)\P\693-23
"పైథాన ్ th ภาษาไพทอน tg Python tr Python bug Python uk Python vi Python zh Python The ifstatement along with else a contraction of else-if"	"is"	"కంప్యూటర ్ భాష"	693	query201_Python_(programming_language)\P\693-24
"పైథాన ్ th ภาษาไพทอน tg Python tr Python bug Python uk Python vi Python zh Python The ifstatement along with elif a contraction of else-if"	"is"	"కంప్యూటర ్ భాష"	693	query201_Python_(programming_language)\P\693-25
"పైథాన ్ th ภาษาไพทอน tg Python tr Python bug Python uk Python vi Python zh Python The ifstatement along with elif a contraction of else-if"	"is"	"కంప్యూటర ్ భాష"	693	query201_Python_(programming_language)\P\693-26
"పైథాన ్ th ภาษาไพทอน tg Python tr Python bug Python uk Python vi Python zh Python The ifstatement along with elif a contraction of else-if"	"is"	"కంప్యూటర ్ భాష"	693	query201_Python_(programming_language)\P\693-27
"Python The ifstatement along with else a contraction of else-if"	"executes"	"a block of code conditionally"	693	query201_Python_(programming_language)\P\693-28
"Python The ifstatement along with elif a contraction of else-if"	"executes"	"a block of code conditionally"	693	query201_Python_(programming_language)\P\693-29
"Python The ifstatement along with else a contraction of else-if"	"executes"	"a block of code"	693	query201_Python_(programming_language)\P\693-30
"Python The ifstatement along with elif a contraction of else-if"	"executes"	"a block of code"	693	query201_Python_(programming_language)\P\693-31
The forstatement , which iterates over an iterable object , capturing each element to a local variable for use by the attached block . 	694	query201_Python_(programming_language)\S\694
"The forstatement"	"be capturing"	"each element to a local variable for use by the attached block"	694	query201_Python_(programming_language)\P\694-0
"The forstatement capturing each element to a local variable for use by the attached block"	"iterates"	"over an iterable object"	694	query201_Python_(programming_language)\P\694-1
The whilestatement , which executes a block of code as long as its condition is true . 	695	query201_Python_(programming_language)\S\695
"The whilestatement"	"executes"	"a block of code as long as its condition is true"	695	query201_Python_(programming_language)\P\695-0
"The whilestatement"	"executes"	"a block of code"	695	query201_Python_(programming_language)\P\695-1
"The whilestatement"	"executes"	"a block of code"	695	query201_Python_(programming_language)\P\695-2
"its condition"	"is"	"true"	695	query201_Python_(programming_language)\P\695-3
The try statement , which allows exceptions raised in its attached code block to be caught and handled by except clauses ; it also ensures that clean-up code in a finally block will always be run regardless of how the block exits . 	696	query201_Python_(programming_language)\S\696
"The try statement"	"allows"	"exceptions raised in its attached code block to be caught"	696	query201_Python_(programming_language)\P\696-0
"The try statement"	"allows"	"exceptions in its attached code block to be caught handled by except clauses"	696	query201_Python_(programming_language)\P\696-1
"The try statement"	"allows"	"exceptions in its attached code block to be caught handled by except clauses"	696	query201_Python_(programming_language)\P\696-2
"The try statement"	"allows"	"exceptions in its attached code block to be caught handled by except clauses"	696	query201_Python_(programming_language)\P\696-3
"The try statement"	"allows"	"exceptions in its attached code block to be caught handled by except clauses"	696	query201_Python_(programming_language)\P\696-4
"clean-up code in a finally block"	"will be run"	"regardless of how the block exits always"	696	query201_Python_(programming_language)\P\696-5
"clean-up code in a finally block"	"will be run"	"regardless of how the block exits"	696	query201_Python_(programming_language)\P\696-6
The classstatement , which executes a block of code and attaches its local namespace to a class , for use in object-oriented programming . 	697	query201_Python_(programming_language)\S\697
"The classstatement for use in object-oriented programming"	"executes"	"a block of code"	697	query201_Python_(programming_language)\P\697-0
"The classstatement for use in object-oriented programming"	"attaches"	"a block of code its local namespace to a class"	697	query201_Python_(programming_language)\P\697-1
"The classstatement for use in object-oriented programming"	"attaches"	"a block of code its local namespace"	697	query201_Python_(programming_language)\P\697-2
"The classstatement for use in object-oriented programming"	"attaches"	"a block of code its local namespace"	697	query201_Python_(programming_language)\P\697-3
The def statement , which defines a function or method . 	698	query201_Python_(programming_language)\S\698
"The def statement"	"defines"	"a function"	698	query201_Python_(programming_language)\P\698-0
"The def statement"	"defines"	"a method"	698	query201_Python_(programming_language)\P\698-1
The with statement ( from Python 2.5 	699	query201_Python_(programming_language)\S\699
) , which encloses a code block within a context manager ( for example , acquiring a lock before the block of code is run , and releasing the lock afterwards ) . 	700	query201_Python_(programming_language)\S\700
) , which encloses a code block within a context manager ( for example , acquiring a lock before the block of code is run , and releasing the lock afterwards ) . 	700	query201_Python_(programming_language)\S\700
) , which encloses a code block within a context manager ( for example , acquiring a lock before the block of code is run , and releasing the lock afterwards ) . 	700	query201_Python_(programming_language)\S\700
"the block of code"	"is run"	"before"	700	query201_Python_(programming_language)\P\700-0
"the block of code"	"is releasing"	"the lock before"	700	query201_Python_(programming_language)\P\700-1
"the block of code"	"is releasing"	"the lock afterwards"	700	query201_Python_(programming_language)\P\700-2
"the block of code"	"is releasing"	"the lock"	700	query201_Python_(programming_language)\P\700-3
The pass statement , which serves as a NOP and can be used in place of a code block . 	701	query201_Python_(programming_language)\S\701
"The pass statement"	"serves"	"as a NOP"	701	query201_Python_(programming_language)\P\701-0
"The pass statement"	"can be used"	"in place of a code block as a NOP"	701	query201_Python_(programming_language)\P\701-1
"The pass statement"	"can be used"	"in place of a code block"	701	query201_Python_(programming_language)\P\701-2
The assertstatement , used during debugging to check for conditions that ought to apply . 	702	query201_Python_(programming_language)\S\702
"The assertstatement"	"be used"	"during debugging to check for conditions"	702	query201_Python_(programming_language)\P\702-0
"The assertstatement"	"be used"	"during debugging to check for conditions"	702	query201_Python_(programming_language)\P\702-1
The yield statement , which returns a value from a generator function . 	703	query201_Python_(programming_language)\S\703
"The yield statement"	"returns"	"a value from a generator function"	703	query201_Python_(programming_language)\P\703-0
"The yield statement"	"returns"	"a value"	703	query201_Python_(programming_language)\P\703-1
( From Python 2.5 	704	query201_Python_(programming_language)\S\704
, yield is also an operator . 	705	query201_Python_(programming_language)\S\705
, yield is also an operator . 	705	query201_Python_(programming_language)\S\705
, yield is also an operator . 	705	query201_Python_(programming_language)\S\705
This form is used to implement coroutine -- see below . 	706	query201_Python_(programming_language)\S\706
"This form"	"is used"	"to implement coroutine"	706	query201_Python_(programming_language)\P\706-0
) In Python 2 , the / operator on integers does integer division : it truncates the result to an integer . 	707	query201_Python_(programming_language)\S\707
"the operator on integers"	"does integer division"	"707 In Python 2 it truncates the result to an integer"	707	query201_Python_(programming_language)\P\707-0
"the operator on integers"	"does integer division"	"707 In Python 2 it truncates the result to an integer"	707	query201_Python_(programming_language)\P\707-1
"the operator on integers"	"does integer division"	"707 In Python 2 it truncates the result to an integer"	707	query201_Python_(programming_language)\P\707-2
Floating -point division on integers can be achieved by converting one of the integers to a float ( e .g 	708	query201_Python_(programming_language)\S\708
. 	709	query201_Python_(programming_language)\S\709
float( x ) / y ) . 	710	query201_Python_(programming_language)\S\710
float( x ) / y ) . 	710	query201_Python_(programming_language)\S\710
In Python 3 , the result of / is always a floating-point value . 	711	query201_Python_(programming_language)\S\711
This behaviour can be enabled in Python 2.2+ 	712	query201_Python_(programming_language)\S\712
"This behaviour"	"can be enabled"	"in Python 2.2"	712	query201_Python_(programming_language)\P\712-0
using from future import division . 	713	query201_Python_(programming_language)\S\713
using from future import division . 	713	query201_Python_(programming_language)\S\713
In both Python 2.2+ 	714	query201_Python_(programming_language)\S\714
and Python 3 , // can be used to do integer division . 	715	query201_Python_(programming_language)\S\715
and Python 3 , // can be used to do integer division . 	715	query201_Python_(programming_language)\S\715
"Python 3"	"can be used"	"to do integer division"	715	query201_Python_(programming_language)\P\715-0
In Python , = = compares by value , in contrast to Java , where it compares by reference . 	716	query201_Python_(programming_language)\S\716
In Python , = = compares by value , in contrast to Java , where it compares by reference . 	716	query201_Python_(programming_language)\S\716
In Python , = = compares by value , in contrast to Java , where it compares by reference . 	716	query201_Python_(programming_language)\S\716
In Python , = = compares by value , in contrast to Java , where it compares by reference . 	716	query201_Python_(programming_language)\S\716
( Value comparisons in Java use the equals( ) method . 	717	query201_Python_(programming_language)\S\717
"Value comparisons in Java"	"use"	"the equals method"	717	query201_Python_(programming_language)\P\717-0
) Python 's is operator may be used to compare object identities ( comparison by reference ) . 	718	query201_Python_(programming_language)\S\718
"Python 's"	"is"	"operator"	718	query201_Python_(programming_language)\P\718-0
"Python 's is operator"	"may be used"	"to compare object identities comparison by reference"	718	query201_Python_(programming_language)\P\718-1
Comparisons may be chained , for example a < = b < = c . 	719	query201_Python_(programming_language)\S\719
"Comparisons"	"may be"	"chained for example a < = b < = c"	719	query201_Python_(programming_language)\P\719-0
"Comparisons"	"may be"	"chained a < = b < = c"	719	query201_Python_(programming_language)\P\719-1
Python uses the words and , or , not for its boolean operators rather than the symbolic && , | | , ! 	720	query201_Python_(programming_language)\S\720
"Python"	"uses"	"the words"	720	query201_Python_(programming_language)\P\720-0
"Python"	"not for"	"the words its boolean operators"	720	query201_Python_(programming_language)\P\720-1
"Python"	"not for"	"the words its boolean the symbolic & &"	720	query201_Python_(programming_language)\P\720-2
"Python"	"not for"	"the words its boolean the | |"	720	query201_Python_(programming_language)\P\720-3
"Python"	"not for"	"the words"	720	query201_Python_(programming_language)\P\720-4
"Python"	"not for"	"the words"	720	query201_Python_(programming_language)\P\720-5
used in C. 	721	query201_Python_(programming_language)\S\721
used in C. 	721	query201_Python_(programming_language)\S\721
Python has a type of expression known as a list comprehension . 	722	query201_Python_(programming_language)\S\722
"Python"	"has"	"a type of expression known as a list comprehension"	722	query201_Python_(programming_language)\P\722-0
"Python"	"has"	"a type of expression known as a list comprehension"	722	query201_Python_(programming_language)\P\722-1
Python 2.4 	723	query201_Python_(programming_language)\S\723
extended list comprehensions into a more general expression known as a generator expression . 	724	query201_Python_(programming_language)\S\724
"a more general expression"	"be known"	"as a generator expression"	724	query201_Python_(programming_language)\P\724-0
http ://www.python 	725	query201_Python_(programming_language)\S\725
.org/dev/peps/pep-0289/ 	726	query201_Python_(programming_language)\S\726
Generator expressions Python enhancement proposals PEP 289 2002-01-30 2009-01-18 Raymond Hettinger Python software foundation 2011-07-12 http ://www.python 	727	query201_Python_(programming_language)\S\727
.org/dev/peps/pep-0289/ 	728	query201_Python_(programming_language)\S\728
Generator expressions Python enhancement proposals PEP 289 2002-01-30 2009-01-18 Raymond Hettinger Python software foundation 2011-07-12 Anonymous function are implemented using lambda expressions ; however , these are limited in that the body can only be a single expression . 	729	query201_Python_(programming_language)\S\729
"however"	"is"	"Generator expressions"	729	query201_Python_(programming_language)\P\729-0
"Python enhancement proposals PEP 289 2002-01-30 2009-01-18 Raymond Hettinger Python software foundation 2011-07-12 Anonymous function"	"are implemented"	"using lambda expressions expressions"	729	query201_Python_(programming_language)\P\729-1
"Python enhancement proposals PEP 289 2002-01-30 2009-01-18 Raymond Hettinger Python software foundation 2011-07-12 Anonymous function"	"are implemented"	"using lambda expressions expressions"	729	query201_Python_(programming_language)\P\729-2
"Python enhancement proposals PEP 289 2002-01-30 2009-01-18 Raymond Hettinger Python software foundation 2011-07-12 Anonymous function"	"are implemented"	"using lambda expressions expressions"	729	query201_Python_(programming_language)\P\729-3
"the body"	"can be a single expression"	"only"	729	query201_Python_(programming_language)\P\729-4
"the body"	"can be"	"a single expression"	729	query201_Python_(programming_language)\P\729-5
Conditional expressions in Python are written as x if c else y http ://www.python 	730	query201_Python_(programming_language)\S\730
"Conditional expressions in Python"	"are written"	"as x if c else y http"	730	query201_Python_(programming_language)\P\730-0
"Conditional expressions in Python"	"are written"	"as x"	730	query201_Python_(programming_language)\P\730-1
.org/dev/peps/pep-0308/ 	731	query201_Python_(programming_language)\S\731
Conditional expressions Python enhancement proposals PEP 308 2003-02-07 2007-06-28 Guido van Rossum Raymond Hettinger Python software foundation 2011-07-13 http ://www.python 	732	query201_Python_(programming_language)\S\732
.org/dev/peps/pep-0308/ 	733	query201_Python_(programming_language)\S\733
Conditional expressions Python enhancement proposals PEP 308 2003-02-07 2007-06-28 Guido van Rossum Raymond Hettinger Python software foundation 2011-07-13 ( different in order of operands from the ? : operator common to many other languages ) . 	734	query201_Python_(programming_language)\S\734
Python makes a distinction between list and tuple . 	735	query201_Python_(programming_language)\S\735
"Python"	"makes"	"a distinction between list and tuple"	735	query201_Python_(programming_language)\P\735-0
Lists are written as [1 , 2 , 3] , are mutable , and cannot be used as the keys of dictionaries ( dictionary keys must be immutable in Python ) . 	736	query201_Python_(programming_language)\S\736
"Lists"	"are written"	"as 1 2 3 are mutable"	736	query201_Python_(programming_language)\P\736-0
"Lists"	"are written"	"as 1 2 3 are can not be used as the keys of dictionaries"	736	query201_Python_(programming_language)\P\736-1
"Lists"	"are written"	"as 1 2 3 are can not be used as the keys of dictionaries"	736	query201_Python_(programming_language)\P\736-2
Tuples are written as ( 1 , 2 , 3 ) , are immutable and thus can be used as the keys of dictionaries , provided all elements of the tuple are immutable . 	737	query201_Python_(programming_language)\S\737
"Tuples"	"are written"	"as 1 2 3"	737	query201_Python_(programming_language)\P\737-0
"Tuples"	"are written"	"as 1 2 3"	737	query201_Python_(programming_language)\P\737-1
The parentheses around the tuple are optional in some contexts . 	738	query201_Python_(programming_language)\S\738
"The parentheses around the tuple"	"are optional"	"in some contexts"	738	query201_Python_(programming_language)\P\738-0
"The parentheses around the tuple"	"are"	"optional"	738	query201_Python_(programming_language)\P\738-1
Tuples can appear on the left side of an equal sign ; hence a statement like x , y = y , x can be used to swap two variables . 	739	query201_Python_(programming_language)\S\739
"Tuples"	"can appear"	"on the left side of an equal sign"	739	query201_Python_(programming_language)\P\739-0
"hence a statement like x"	"be used"	"to swap two variables"	739	query201_Python_(programming_language)\P\739-1
"hence a statement like x"	"be used"	"to swap two variables"	739	query201_Python_(programming_language)\P\739-2
Python 2 has a " string format " operator % . 	740	query201_Python_(programming_language)\S\740
"Python 2"	"has"	"a string format"	740	query201_Python_(programming_language)\P\740-0
This functions analogous to printf format strings in C , e.g 	741	query201_Python_(programming_language)\S\741
This functions analogous to printf format strings in C , e.g 	741	query201_Python_(programming_language)\S\741
. 	742	query201_Python_(programming_language)\S\742
"foo= %s bar= %d " % ( "blah" , 2 ) evaluates to "foo=blah bar=2 " . 	743	query201_Python_(programming_language)\S\743
"blah evaluates to foo = blah bar = 2"	"is"	"2"	743	query201_Python_(programming_language)\P\743-0
"blah evaluates to foo = blah bar = 2"	"is"	"2"	743	query201_Python_(programming_language)\P\743-1
"blah bar"	"="	"2"	743	query201_Python_(programming_language)\P\743-2
In Python 3 , this was obsoleted in favour of the format( ) method of the str class , e.g 	744	query201_Python_(programming_language)\S\744
In Python 3 , this was obsoleted in favour of the format( ) method of the str class , e.g 	744	query201_Python_(programming_language)\S\744
. 	745	query201_Python_(programming_language)\S\745
"foo={ 0 } bar={ 1 }" .format( 	746	query201_Python_(programming_language)\S\746
"blah" , 2 ) . 	747	query201_Python_(programming_language)\S\747
Python has various kinds of string literal : Strings delimited by single or double quotation marks . 	748	query201_Python_(programming_language)\S\748
"Python"	"has"	"various kinds of string literal"	748	query201_Python_(programming_language)\P\748-0
"Python"	"has"	"various kinds of string literal"	748	query201_Python_(programming_language)\P\748-1
"Python"	"has"	"various kinds of string literal"	748	query201_Python_(programming_language)\P\748-2
"Python"	"has"	"various kinds of string literal"	748	query201_Python_(programming_language)\P\748-3
Unlike in Unix shell , Perl and Perl -influenced languages , single quotation marks and double quotation marks function similarly . 	749	query201_Python_(programming_language)\S\749
"Unlike in Unix shell"	"influenced"	"languages single quotation marks function similarly"	749	query201_Python_(programming_language)\P\749-0
"Unlike in Unix shell"	"influenced"	"languages single quotation double quotation marks function similarly"	749	query201_Python_(programming_language)\P\749-1
"Unlike in Unix Perl"	"influenced"	"languages single quotation marks function similarly"	749	query201_Python_(programming_language)\P\749-2
"Unlike in Unix Perl"	"influenced"	"languages single quotation double quotation marks function similarly"	749	query201_Python_(programming_language)\P\749-3
"Unlike in Unix Perl"	"influenced"	"languages single quotation marks function similarly"	749	query201_Python_(programming_language)\P\749-4
"Unlike in Unix Perl"	"influenced"	"languages single quotation double quotation marks function similarly"	749	query201_Python_(programming_language)\P\749-5
Both kinds of string use the backslash ( ) as an escape character and there is no implicit string interpolation such as " $ foo " . 	750	query201_Python_(programming_language)\S\750
"kinds of string"	"use"	"the backslash as an escape character"	750	query201_Python_(programming_language)\P\750-0
"kinds of string"	"use"	"the backslash"	750	query201_Python_(programming_language)\P\750-1
Triple-quoted strings , which begin and end with a series of three single or double quotation marks . 	751	query201_Python_(programming_language)\S\751
"Triple-quoted strings"	"begin"	"with a series of three single quotation marks"	751	query201_Python_(programming_language)\P\751-0
"Triple-quoted strings"	"begin"	"with a series of three double quotation marks"	751	query201_Python_(programming_language)\P\751-1
"Triple-quoted strings"	"end"	"with a series of three single quotation marks"	751	query201_Python_(programming_language)\P\751-2
"Triple-quoted strings"	"end"	"with a series of three double quotation marks"	751	query201_Python_(programming_language)\P\751-3
They may span multiple lines and function like here document in shells , Perl and Ruby . 	752	query201_Python_(programming_language)\S\752
They may span multiple lines and function like here document in shells , Perl and Ruby . 	752	query201_Python_(programming_language)\S\752
They may span multiple lines and function like here document in shells , Perl and Ruby . 	752	query201_Python_(programming_language)\S\752
They may span multiple lines and function like here document in shells , Perl and Ruby . 	752	query201_Python_(programming_language)\S\752
They may span multiple lines and function like here document in shells , Perl and Ruby . 	752	query201_Python_(programming_language)\S\752
"here document in shells"	"is"	"Perl"	752	query201_Python_(programming_language)\P\752-0
"here document in shells"	"is"	"Ruby"	752	query201_Python_(programming_language)\P\752-1
Raw string varieties , denoted by prefixing the string literal with an r . 	753	query201_Python_(programming_language)\S\753
"Raw string varieties"	"be denoted"	"by prefixing the string literal with an r"	753	query201_Python_(programming_language)\P\753-0
No escape sequences are interpreted ; hence raw strings are useful where literal backslashes are common , such as regular expression and Windows -style paths . 	754	query201_Python_(programming_language)\S\754
"raw strings"	"are useful"	"hence"	754	query201_Python_(programming_language)\P\754-0
"raw strings"	"are useful"	"where literal backslashes are common such as regular expression"	754	query201_Python_(programming_language)\P\754-1
"raw strings"	"are useful"	"where literal backslashes are common such as regular Windows style paths"	754	query201_Python_(programming_language)\P\754-2
"raw strings"	"are"	"useful"	754	query201_Python_(programming_language)\P\754-3
"literal backslashes"	"are common"	"where"	754	query201_Python_(programming_language)\P\754-4
"literal backslashes"	"are common"	"such as regular expression"	754	query201_Python_(programming_language)\P\754-5
"literal backslashes"	"are common"	"such as regular Windows style paths"	754	query201_Python_(programming_language)\P\754-6
"literal backslashes"	"are"	"common"	754	query201_Python_(programming_language)\P\754-7
Compare " @ -quoting " in C# . 	755	query201_Python_(programming_language)\S\755
Python has index and slice expressions on lists , denoted as a[key ] , a[start :stop ] or a[start :stop :step] . 	756	query201_Python_(programming_language)\S\756
"Python"	"has"	"index expressions on lists"	756	query201_Python_(programming_language)\P\756-0
"Python"	"has"	"slice expressions on lists"	756	query201_Python_(programming_language)\P\756-1
"Python"	"has"	"index expressions on lists"	756	query201_Python_(programming_language)\P\756-2
"Python"	"has"	"slice expressions on lists"	756	query201_Python_(programming_language)\P\756-3
"Python"	"has"	"index expressions"	756	query201_Python_(programming_language)\P\756-4
"Python"	"has"	"slice expressions"	756	query201_Python_(programming_language)\P\756-5
"Python"	"has"	"index expressions"	756	query201_Python_(programming_language)\P\756-6
"Python"	"has"	"slice expressions"	756	query201_Python_(programming_language)\P\756-7
Indexes are zero-based , and negative indexes are relative to the end . 	757	query201_Python_(programming_language)\S\757
"Indexes"	"are"	"zero-based"	757	query201_Python_(programming_language)\P\757-0
"negative indexes"	"are relative"	"to the end"	757	query201_Python_(programming_language)\P\757-1
"negative indexes"	"are"	"relative"	757	query201_Python_(programming_language)\P\757-2
Slices take elements from the start index up to , but not including , the stop index . 	758	query201_Python_(programming_language)\S\758
"Slices"	"take"	"elements from the start index up to"	758	query201_Python_(programming_language)\P\758-0
"Slices"	"take"	"elements from the start index up not including"	758	query201_Python_(programming_language)\P\758-1
"Slices"	"take"	"elements from the start index"	758	query201_Python_(programming_language)\P\758-2
The third slice parameter , called step or stride , allows elements to be skipped and reversed . 	759	query201_Python_(programming_language)\S\759
"The third slice parameter called step"	"allows"	"elements to be skipped"	759	query201_Python_(programming_language)\P\759-0
"The third slice parameter called step"	"allows"	"elements to be reversed"	759	query201_Python_(programming_language)\P\759-1
"The third slice parameter called stride"	"allows"	"elements to be skipped"	759	query201_Python_(programming_language)\P\759-2
"The third slice parameter called stride"	"allows"	"elements to be reversed"	759	query201_Python_(programming_language)\P\759-3
Slice indexes may be omitted , for example a[ : ] returns a copy of the entire list . 	760	query201_Python_(programming_language)\S\760
"Slice indexes"	"may be omitted"	"for example a returns a copy of the entire list"	760	query201_Python_(programming_language)\P\760-0
Each element of a slice is a shallow copy . 	761	query201_Python_(programming_language)\S\761
"Each element of a slice"	"is"	"a shallow copy"	761	query201_Python_(programming_language)\P\761-0
Strings delimited by single or double quotation marks . 	762	query201_Python_(programming_language)\S\762
"Strings"	"be delimited"	"by single quotation marks"	762	query201_Python_(programming_language)\P\762-0
"Strings"	"be delimited"	"by double quotation marks"	762	query201_Python_(programming_language)\P\762-1
Unlike in Unix shell , Perl and Perl -influenced languages , single quotation marks and double quotation marks function similarly . 	763	query201_Python_(programming_language)\S\763
"Unlike in Unix shell"	"influenced"	"languages single quotation marks function similarly"	763	query201_Python_(programming_language)\P\763-0
"Unlike in Unix shell"	"influenced"	"languages single quotation double quotation marks function similarly"	763	query201_Python_(programming_language)\P\763-1
"Unlike in Unix Perl"	"influenced"	"languages single quotation marks function similarly"	763	query201_Python_(programming_language)\P\763-2
"Unlike in Unix Perl"	"influenced"	"languages single quotation double quotation marks function similarly"	763	query201_Python_(programming_language)\P\763-3
"Unlike in Unix Perl"	"influenced"	"languages single quotation marks function similarly"	763	query201_Python_(programming_language)\P\763-4
"Unlike in Unix Perl"	"influenced"	"languages single quotation double quotation marks function similarly"	763	query201_Python_(programming_language)\P\763-5
Both kinds of string use the backslash ( ) as an escape character and there is no implicit string interpolation such as " $ foo " . 	764	query201_Python_(programming_language)\S\764
"kinds of string"	"use"	"the backslash as an escape character"	764	query201_Python_(programming_language)\P\764-0
"kinds of string"	"use"	"the backslash"	764	query201_Python_(programming_language)\P\764-1
Triple-quoted strings , which begin and end with a series of three single or double quotation marks . 	765	query201_Python_(programming_language)\S\765
"Triple-quoted strings"	"begin"	"with a series of three single quotation marks"	765	query201_Python_(programming_language)\P\765-0
"Triple-quoted strings"	"begin"	"with a series of three double quotation marks"	765	query201_Python_(programming_language)\P\765-1
"Triple-quoted strings"	"end"	"with a series of three single quotation marks"	765	query201_Python_(programming_language)\P\765-2
"Triple-quoted strings"	"end"	"with a series of three double quotation marks"	765	query201_Python_(programming_language)\P\765-3
They may span multiple lines and function like here document in shells , Perl and Ruby . 	766	query201_Python_(programming_language)\S\766
They may span multiple lines and function like here document in shells , Perl and Ruby . 	766	query201_Python_(programming_language)\S\766
They may span multiple lines and function like here document in shells , Perl and Ruby . 	766	query201_Python_(programming_language)\S\766
They may span multiple lines and function like here document in shells , Perl and Ruby . 	766	query201_Python_(programming_language)\S\766
They may span multiple lines and function like here document in shells , Perl and Ruby . 	766	query201_Python_(programming_language)\S\766
"here document in shells"	"is"	"Perl"	766	query201_Python_(programming_language)\P\766-0
"here document in shells"	"is"	"Ruby"	766	query201_Python_(programming_language)\P\766-1
Raw string varieties , denoted by prefixing the string literal with an r . 	767	query201_Python_(programming_language)\S\767
"Raw string varieties"	"be denoted"	"by prefixing the string literal with an r"	767	query201_Python_(programming_language)\P\767-0
No escape sequences are interpreted ; hence raw strings are useful where literal backslashes are common , such as regular expression and Windows -style paths . 	768	query201_Python_(programming_language)\S\768
"raw strings"	"are useful"	"hence"	768	query201_Python_(programming_language)\P\768-0
"raw strings"	"are useful"	"where literal backslashes are common such as regular expression"	768	query201_Python_(programming_language)\P\768-1
"raw strings"	"are useful"	"where literal backslashes are common such as regular Windows style paths"	768	query201_Python_(programming_language)\P\768-2
"raw strings"	"are"	"useful"	768	query201_Python_(programming_language)\P\768-3
"literal backslashes"	"are common"	"where"	768	query201_Python_(programming_language)\P\768-4
"literal backslashes"	"are common"	"such as regular expression"	768	query201_Python_(programming_language)\P\768-5
"literal backslashes"	"are common"	"such as regular Windows style paths"	768	query201_Python_(programming_language)\P\768-6
"literal backslashes"	"are"	"common"	768	query201_Python_(programming_language)\P\768-7
Compare " @ -quoting " in C# . 	769	query201_Python_(programming_language)\S\769
list comprehensions vs. 	770	query201_Python_(programming_language)\S\770
for -loops conditional expressions vs. 	771	query201_Python_(programming_language)\S\771
if blocks The eval( ) vs. 	772	query201_Python_(programming_language)\S\772
exec( ) built-in functions ( in Python 2 , exec is a statement ) ; the former is for expressions , the latter is for statements . 	773	query201_Python_(programming_language)\S\773
exec( ) built-in functions ( in Python 2 , exec is a statement ) ; the former is for expressions , the latter is for statements . 	773	query201_Python_(programming_language)\S\773
"the former"	"is"	"for expressions the latter is for statements"	773	query201_Python_(programming_language)\P\773-0
"the former"	"is"	"the latter is for statements"	773	query201_Python_(programming_language)\P\773-1
"the latter"	"is"	"for statements"	773	query201_Python_(programming_language)\P\773-2
backwards-incompatible versions , where code is expected to break and must be manually ported . 	774	query201_Python_(programming_language)\S\774
backwards-incompatible versions , where code is expected to break and must be manually ported . 	774	query201_Python_(programming_language)\S\774
backwards-incompatible versions , where code is expected to break and must be manually ported . 	774	query201_Python_(programming_language)\S\774
backwards-incompatible versions , where code is expected to break and must be manually ported . 	774	query201_Python_(programming_language)\S\774
backwards-incompatible versions , where code is expected to break and must be manually ported . 	774	query201_Python_(programming_language)\S\774
The first part of the version number is incremented . 	775	query201_Python_(programming_language)\S\775
These releases happen infrequently—for example , version 3.0 	776	query201_Python_(programming_language)\S\776
"These releases"	"happen"	"infrequently"	776	query201_Python_(programming_language)\P\776-0
was released 8 years after 2.0. 	777	query201_Python_(programming_language)\S\777
was released 8 years after 2.0. 	777	query201_Python_(programming_language)\S\777
major or "feature " releases , which are largely compatible but introduce new features . 	778	query201_Python_(programming_language)\S\778
major or "feature " releases , which are largely compatible but introduce new features . 	778	query201_Python_(programming_language)\S\778
"feature releases"	"are compatible"	"largely"	778	query201_Python_(programming_language)\P\778-0
"feature releases"	"are compatible"	"largely"	778	query201_Python_(programming_language)\P\778-1
"feature releases"	"are"	"compatible"	778	query201_Python_(programming_language)\P\778-2
"feature releases"	"are"	"compatible"	778	query201_Python_(programming_language)\P\778-3
"feature releases"	"are"	"introduce largely new features"	778	query201_Python_(programming_language)\P\778-4
"feature releases"	"are"	"introduce largely new features"	778	query201_Python_(programming_language)\P\778-5
"feature releases"	"are"	"introduce new features"	778	query201_Python_(programming_language)\P\778-6
The second part of the version number is incremented . 	779	query201_Python_(programming_language)\S\779
These releases are scheduled to occur roughly every 18 months , and each major version is supported by bugfixes for several years after its release . 	780	query201_Python_(programming_language)\S\780
"These releases"	"are scheduled"	"to occur roughly every 18 months"	780	query201_Python_(programming_language)\P\780-0
"each major version"	"is supported"	"by bugfixes for several years"	780	query201_Python_(programming_language)\P\780-1
"each major version"	"is supported"	"by bugfixes after its release"	780	query201_Python_(programming_language)\P\780-2
"each major version"	"is supported"	"by bugfixes"	780	query201_Python_(programming_language)\P\780-3
"each major version"	"is supported"	"by bugfixes"	780	query201_Python_(programming_language)\P\780-4
http ://mail.python 	781	query201_Python_(programming_language)\S\781
.org/pipermail/python-dev/2002-April/022739.html 	782	query201_Python_(programming_language)\S\782
[ Python-Dev ] Release Schedules ( was Stability &amp; change ) Norwitz Neal 8 April 2002 2009-06-27 http ://mail.python 	783	query201_Python_(programming_language)\S\783
.org/pipermail/python-dev/2002-April/022739.html 	784	query201_Python_(programming_language)\S\784
[ Python-Dev ] Release Schedules ( was Stability &amp; change ) Norwitz Neal 8 April 2002 2009-06-27 bugfix releases , which introduce no new features but fix bugs . 	785	query201_Python_(programming_language)\S\785
"Norwitz Neal 8 April 2002 2009-06-27 bugfix releases"	"introduce"	"no new features"	785	query201_Python_(programming_language)\P\785-0
"Norwitz Neal 8 April 2002 2009-06-27 bugfix releases"	"fix"	"no new features bugs"	785	query201_Python_(programming_language)\P\785-1
The third and final part of the version number is incremented . 	786	query201_Python_(programming_language)\S\786
These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release , or roughly every 3 months . 	787	query201_Python_(programming_language)\S\787
"These releases"	"are made"	"whenever a sufficient number of bugs have been fixed upstream since the last release"	787	query201_Python_(programming_language)\P\787-0
"These releases"	"are made"	"whenever a sufficient number of bugs have been fixed upstream since the last roughly every 3 months"	787	query201_Python_(programming_language)\P\787-1
"a sufficient number of bugs"	"have been fixed"	"upstream whenever"	787	query201_Python_(programming_language)\P\787-2
"a sufficient number of bugs"	"have been fixed"	"upstream since the last release"	787	query201_Python_(programming_language)\P\787-3
"a sufficient number of bugs"	"have been fixed"	"upstream since the last roughly every 3 months"	787	query201_Python_(programming_language)\P\787-4
"a sufficient number of bugs"	"have been fixed"	"upstream"	787	query201_Python_(programming_language)\P\787-5
Security vulnerabilities are also patched in bugfix releases . 	788	query201_Python_(programming_language)\S\788
"Security vulnerabilities"	"are patched"	"in bugfix releases also"	788	query201_Python_(programming_language)\P\788-0
"Security vulnerabilities"	"are patched"	"in bugfix releases"	788	query201_Python_(programming_language)\P\788-1
http ://python .org/dev/peps/pep-0006/ 	789	query201_Python_(programming_language)\S\789
PEP 6 -- Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 http ://python .org/dev/peps/pep-0006/ 	790	query201_Python_(programming_language)\S\790
PEP 6 -- Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 Pyrex and its derivative Cython are code translators that are targeted at writing fast C extensions for the CPython interpreter . 	791	query201_Python_(programming_language)\S\791
PEP 6 -- Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 Pyrex and its derivative Cython are code translators that are targeted at writing fast C extensions for the CPython interpreter . 	791	query201_Python_(programming_language)\S\791
PEP 6 -- Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 Pyrex and its derivative Cython are code translators that are targeted at writing fast C extensions for the CPython interpreter . 	791	query201_Python_(programming_language)\S\791
PEP 6 -- Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 Pyrex and its derivative Cython are code translators that are targeted at writing fast C extensions for the CPython interpreter . 	791	query201_Python_(programming_language)\S\791
"Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 Pyrex"	"are"	"code translators 791 PEP 6"	791	query201_Python_(programming_language)\P\791-0
"Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 its derivative Cython"	"are"	"code translators 791 PEP 6"	791	query201_Python_(programming_language)\P\791-1
"code translators"	"are targeted"	"at writing fast C extensions for the CPython interpreter"	791	query201_Python_(programming_language)\P\791-2
The language is mostly Python with syntax extensions for C and C++ features . 	792	query201_Python_(programming_language)\S\792
"The language"	"is Python"	"mostly"	792	query201_Python_(programming_language)\P\792-0
"The language"	"is Python"	"with syntax extensions for C features"	792	query201_Python_(programming_language)\P\792-1
"The language"	"is Python"	"with syntax extensions for C++ features"	792	query201_Python_(programming_language)\P\792-2
"The language"	"is"	"Python"	792	query201_Python_(programming_language)\P\792-3
Both languages produce compilable C code as output . 	793	query201_Python_(programming_language)\S\793
"Both languages"	"produce"	"compilable C code as output"	793	query201_Python_(programming_language)\P\793-0
"Both languages"	"produce"	"compilable C code"	793	query201_Python_(programming_language)\P\793-1
Boo uses indentation , a similar syntax , and a similar object model . 	794	query201_Python_(programming_language)\S\794
"Boo"	"uses"	"indentation"	794	query201_Python_(programming_language)\P\794-0
"Boo"	"uses"	"a similar syntax"	794	query201_Python_(programming_language)\P\794-1
"Boo"	"uses"	"a similar object model"	794	query201_Python_(programming_language)\P\794-2
However , Boo uses static typing and is closely integrated with the .NET 	795	query201_Python_(programming_language)\S\795
framework . 	796	query201_Python_(programming_language)\S\796
http ://boo.codehaus 	797	query201_Python_(programming_language)\S\797
.org/Gotchas+for+Python+Users 	798	query201_Python_(programming_language)\S\798
BOO - Gotchas for Python Users boo.codehaus 	799	query201_Python_(programming_language)\S\799
.org 	800	query201_Python_(programming_language)\S\800
2008-11-24 http ://boo.codehaus 	801	query201_Python_(programming_language)\S\801
.org/Gotchas+for+Python+Users 	802	query201_Python_(programming_language)\S\802
BOO - Gotchas for Python Users boo.codehaus 	803	query201_Python_(programming_language)\S\803
.org 	804	query201_Python_(programming_language)\S\804
2008-11-24 Cobra uses indentation and a similar syntax . 	805	query201_Python_(programming_language)\S\805
"2008-11-24 Cobra"	"uses"	"indentation"	805	query201_Python_(programming_language)\P\805-0
"2008-11-24 Cobra"	"uses"	"a similar syntax"	805	query201_Python_(programming_language)\P\805-1
Cobra 's " Acknowledgements " document lists Python first among languages that influenced it . 	806	query201_Python_(programming_language)\S\806
"Cobra"	"has"	"Acknowledgements document lists Python first among languages"	806	query201_Python_(programming_language)\P\806-0
"Cobra"	"has"	"Acknowledgements document lists Python first among languages"	806	query201_Python_(programming_language)\P\806-1
http ://cobra-language .com/docs/acknowledgements 	807	query201_Python_(programming_language)\S\807
/ Cobra - Acknowledgements cobra-language .com 	808	query201_Python_(programming_language)\S\808
2010-04-07 http ://cobra-language .com/docs/acknowledgements 	809	query201_Python_(programming_language)\S\809
/ Cobra - Acknowledgements cobra-language .com 	810	query201_Python_(programming_language)\S\810
2010-04-07 However , Cobra directly supports design-by-contract , unit tests and optional static typing . 	811	query201_Python_(programming_language)\S\811
2010-04-07 However , Cobra directly supports design-by-contract , unit tests and optional static typing . 	811	query201_Python_(programming_language)\S\811
2010-04-07 However , Cobra directly supports design-by-contract , unit tests and optional static typing . 	811	query201_Python_(programming_language)\S\811
2010-04-07 However , Cobra directly supports design-by-contract , unit tests and optional static typing . 	811	query201_Python_(programming_language)\S\811
2010-04-07 However , Cobra directly supports design-by-contract , unit tests and optional static typing . 	811	query201_Python_(programming_language)\S\811
2010-04-07 However , Cobra directly supports design-by-contract , unit tests and optional static typing . 	811	query201_Python_(programming_language)\S\811
2010-04-07 However , Cobra directly supports design-by-contract , unit tests and optional static typing . 	811	query201_Python_(programming_language)\S\811
http ://cobra-language .com/docs/python/ 	812	query201_Python_(programming_language)\S\812
Cobra - Comparison to Python cobra-language .com 	813	query201_Python_(programming_language)\S\813
2010-04-07 http ://cobra-language .com/docs/python/ 	814	query201_Python_(programming_language)\S\814
Cobra - Comparison to Python cobra-language .com 	815	query201_Python_(programming_language)\S\815
2010-04-07 ECMAScript borrowed iterator , generators , and list comprehension from Python . 	816	query201_Python_(programming_language)\S\816
http ://wiki .ecmascript.org/doku.php 	817	query201_Python_(programming_language)\S\817
?id=proposals :iterators_and_generators Proposals : iterators and generators [ES4 Wiki&#93 ; wiki .ecmascript.org 	818	query201_Python_(programming_language)\S\818
2008-11-24 http ://wiki .ecmascript.org/doku.php 	819	query201_Python_(programming_language)\S\819
?id=proposals :iterators_and_generators Proposals : iterators and generators [ES4 Wiki&#93 ; wiki .ecmascript.org 	820	query201_Python_(programming_language)\S\820
2008-11-24 Go is described as incorporating the "development speed of working in a dynamic language like Python " . 	821	query201_Python_(programming_language)\S\821
"2008-11-24 Go"	"is described"	"as incorporating the development speed of working in a dynamic language like Python"	821	query201_Python_(programming_language)\P\821-0
http ://www.techcrunch.com/2009/11/10/google-go-language/ 	822	query201_Python_(programming_language)\S\822
Google’s Go : A New Programming Language That’s Python Meets C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 http ://www.techcrunch.com/2009/11/10/google-go-language/ 	823	query201_Python_(programming_language)\S\823
Google’s Go : A New Programming Language That’s Python Meets C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 http ://www.techcrunch.com/2009/11/10/google-go-language/ 	823	query201_Python_(programming_language)\S\823
Google’s Go : A New Programming Language That’s Python Meets C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 http ://www.techcrunch.com/2009/11/10/google-go-language/ 	823	query201_Python_(programming_language)\S\823
"A New Programming Language"	"Meets"	"C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 http"	823	query201_Python_(programming_language)\P\823-0
Google’s Go : A New Programming Language That’s Python Meets C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 Groovy was motivated by the desire to bring the Python design philosophy to Java . 	824	query201_Python_(programming_language)\S\824
Google’s Go : A New Programming Language That’s Python Meets C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 Groovy was motivated by the desire to bring the Python design philosophy to Java . 	824	query201_Python_(programming_language)\S\824
Google’s Go : A New Programming Language That’s Python Meets C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 Groovy was motivated by the desire to bring the Python design philosophy to Java . 	824	query201_Python_(programming_language)\S\824
"A New Programming Language"	"Meets"	"C++ Kincaid Jason 2009-11-10 TechCrunch"	824	query201_Python_(programming_language)\P\824-0
"2010-01-29 Groovy"	"was motivated"	"by the desire to bring the Python design philosophy to Java C++ Kincaid Jason 2009-11-10 TechCrunch"	824	query201_Python_(programming_language)\P\824-1
"2010-01-29 Groovy"	"was motivated"	"C++ Kincaid Jason 2009-11-10 TechCrunch"	824	query201_Python_(programming_language)\P\824-2
"the desire"	"be bring"	"the Python design philosophy to Java"	824	query201_Python_(programming_language)\P\824-3
James Strachan 2003-08-29 Groovy - the birth of a new dynamic language for the Java platform http ://radio.weblogs 	825	query201_Python_(programming_language)\S\825
.com/0112098/2003/08/29.html 	826	query201_Python_(programming_language)\S\826
James Strachan 2003-08-29 Groovy - the birth of a new dynamic language for the Java platform http ://radio.weblogs 	827	query201_Python_(programming_language)\S\827
.com/0112098/2003/08/29.html 	828	query201_Python_(programming_language)\S\828
OCaml has an optional syntax , called twt ( The Whitespace Thing ) , inspired by Python and Haskell . 	829	query201_Python_(programming_language)\S\829
"OCaml"	"has"	"an optional syntax called twt inspired by Python"	829	query201_Python_(programming_language)\P\829-0
"OCaml"	"has"	"an optional syntax called twt inspired by Haskell"	829	query201_Python_(programming_language)\P\829-1
"an optional syntax called twt"	"be inspired"	"by Python"	829	query201_Python_(programming_language)\P\829-2
"an optional syntax called twt"	"be inspired"	"by Haskell"	829	query201_Python_(programming_language)\P\829-3
"an optional syntax called twt"	"be inspired"	"by Haskell"	829	query201_Python_(programming_language)\P\829-4
Mike Lin 2009-04-12 " The Whitespace Thing " for OCaml http ://people .csail 	830	query201_Python_(programming_language)\S\830
.mit 	831	query201_Python_(programming_language)\S\831
.edu/mikelin/ocaml+twt/ 	832	query201_Python_(programming_language)\S\832
Mike Lin 2009-04-12 " The Whitespace Thing " for OCaml http ://people .csail 	833	query201_Python_(programming_language)\S\833
.mit 	834	query201_Python_(programming_language)\S\834
.edu/mikelin/ocaml+twt/ 	835	query201_Python_(programming_language)\S\835
Comparison of command shells Comparison of programming languages Comparison of Python integrated development environments List of programming languages List of Python software Scipy Downey Allen B. 	836	query201_Python_(programming_language)\S\836
Think Python : How to Think Like a Computer Scientist 978-0521725965 http ://www.greenteapress.com/thinkpython/html/index 	837	query201_Python_(programming_language)\S\837
.html 	838	query201_Python_(programming_language)\S\838
http ://www.computerworld.com 	839	query201_Python_(programming_language)\S\839
.au/index.php/id 	840	query201_Python_(programming_language)\S\840
;66665771 The A-Z of Programming Languages : Python Hamilton Naomi 5 August 2008 Computerworld 2010-03-31 – An interview with Guido Van Rossum on Python Lutz Mark Learning Python O'Reilly Media 2009 4th 978-0596158064 Pilgrim Mark Dive Into Python Apress 2004 978-1590593561 http ://diveintopython .net 	841	query201_Python_(programming_language)\S\841
Pilgrim Mark Dive Into Python 3 Apress 2009 978-1430224150 http ://diveintopython3.net 	842	query201_Python_(programming_language)\S\842
Summerfield Mark Programming in Python 3 Addison-Wesley Professional 2009 2nd 978-0321680563 http ://www.qtrac.eu/py3book 	843	query201_Python_(programming_language)\S\843
.html 	844	query201_Python_(programming_language)\S\844
http ://www.python 	845	query201_Python_(programming_language)\S\845
.org 	846	query201_Python_(programming_language)\S\846
newsgroup ( ) / Computers/Programming/Languages/Python Python 	847	query201_Python_(programming_language)\S\847
"newsgroup"	"is"	"Computers/Programming/Languages Python Python"	847	query201_Python_(programming_language)\P\847-0
