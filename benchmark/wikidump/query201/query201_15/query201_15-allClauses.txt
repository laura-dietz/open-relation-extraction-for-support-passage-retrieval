0	
1	
2	
3	
4	
5	
6	
7	
8	
9	SVC (S: duck@2, V: "is", C: CPython@7)	SVC (S: duck@2, V: "is", C: IronPython@9)	SVC (S: duck@2, V: "is", C: Jython@11)	SVC (S: duck@2, V: "is", C: Python@13)	SVC (S: duck@2, V: "is", C: Cython@18)	SVC (S: duck@2, V: "is", C: RPython@20)	SVC (S: duck@2, V: "is", C: ABC@24)	SVC (S: duck@2, V: "is", C: ALGOL@26)	SVC (S: duck@2, V: "is", C: http@29)
10	
11	
12	
13	
14	
15	
16	
17	SVC (S: C@6, V: "is", C: Guido@10)	SVC (S: najaarsconferentie@23, V: "is", C: group@28)	SVO (S: its@41, V: "has", O: influence@42)	SVC (C: considerable@46, V: is@45, S: influence@42)
18	
19	
20	SVA (V: Introduction@6, S: Guido@3, A!: to@7, A?: for@9, A?: even@23)	SVC (S: najaarsconferentie@16, V: "is", C: group@21)	SVO (S: its@34, V: "has", O: influence@35)	SVC (C: considerable@39, V: is@38, S: influence@35)
21	
22	
23	
24	
25	
26	
27	
28	
29	
30	
31	
32	
33	
34	
35	
36	
37	
38	
39	
40	
41	
42	
43	
44	SVO (S: Foundation@7, V: "has", O: philosophy@10)	SVO (V: emphasizes@11, S: philosophy@10, O: readability@13)
45	
46	
47	
48	
49	SVC (S: documentation@7, V: "is", C: http@22)	SVOC (V: claims@10, S: Python@9, XCOMP: combine@12, O: documentation@7)
50	
51	
52	
53	
54	
55	SVO (S: its@6, V: "has", O: library@8)	SVC (C: large@10, V: is@9, S: Foundation@3)
56	SVO (S: Its@1, V: "has", O: use@2)	SVC (C: unique@9, V: is@8, S: use@2, A?: among@10)
57	SVO (V: supports@2, S: Python@1, O: paradigm@5)
58	SVO (V: features@2, S: It@1, O: system@7)
59	SVA (V: used@9, S: Python@6, A?: Like@1, A?: often@8, A!: as@10)	SVA (V: used@18, S: Python@6, A?: Like@1, A?: often@8, A?: as@10, A?: also@17, A!: in@19)
60	SVA (V: "be Using", S: code@6, O: tools@3)	SVA (V: packaged@9, S: code@6, A?: Using@1, A!: into@10)
61	SVC (C: available@4, V: are@3, S: interpreters@2, A?: for@5)
62	SVC (S: Python@5, V: "is", C: CPython@7)	SVC (C: free@10, V: is@9, S: implementation@3, A?: as@22)	SVOC (C: has@16, V: is@9, S: implementation@3, O: model@20, A?: as@22)	SVO (S: its@29, V: "has", O: implementations@31)
63	SVA (V: managed@3, S: CPython@1, A!: by@4)
64	
65	SVO (V: _@3, S: Rossum@2, O: creator@5)	SVA (V: conceived@10, S: _@3, A!: in@11)
66	SVA (V: "be Making", S: The@1, A!: of@3)
67	
68	
69	
70	
71	SVO (V: inspired@29, S: itself@28, A?: by@30, O: mail.python@37)
72	
73	
74	
75	
76	
77	
78	
79	
80	SVC (S: Language@6, V: "is", C: BDFL@53)	SVO (S: Python@17, V: "has", O: author@20)	SVOC (C: author@20, V: is@16, S: Rossum@15, O: Language@6)	SVO (S: his@23, V: "has", O: role@26)	SVA (V: reflected@34, S: direction@30, A!: in@35)	SVA (V: "be given", S: title@37, A!: to@39, A?: by@41)
81	
82	
83	SVA (V: was@7, S: change@6, A?: However@1, A!: to@8, A?: with@14)
84	
85	
86	SVC (C: What@1, V: 's@2, S: New@3)
87	
88	
89	
90	SVC (C: What@1, V: 's@2, S: New@3)
91	
92	
93	
94	
95	
96	
97	
98	SVO (S: its@3, V: "has", O: features@5)	SVC (C: backport@8, V: been@7, S: Many@1, A?: to@9)
99	
100	
101	
102	
103	
104	
105	SVO (V: awarded@20, S: Python@16, A?: twice@18, A?: as@21, O: Guido@8)	SVC (S: Year@27, V: "is", C: 2010@31)	SVA (V: given@36, S: Year@27, A!: to@37)
106	
107	
108	
109	SVC (S: January@6, V: "is", C: January@8)
110	
111	
112	SVOC (C: language@18, V: is@14, S: Software@11, O: January@8)
113	SVO (V: permits@14, S: it@13, A?: than@2, O: styles@16)	SV (V: supported@25, S: programming@19, A?: fully@24)	EXISTENTIAL (V: are@29, S: number@31)	SVO (V: support@36, S: features@34, O: programming@38)	SVA (V: "be including", S: programming@41, A!: by@44)
114	
115	
116	
117	
118	
119	
120	
121	
122	
123	
124	
125	
126	
127	
128	
129	
130	
131	
132	
133	
134	SVOC (V: supported@16, S: paradigms@14, XCOMP: using@17, O: names@3)
135	SVC (S: September@4, V: "is", C: http@8)
136	
137	
138	SVC (S: September@4, V: "is", C: http@8)
139	
140	SVO (V: allow@9, S: September@4, O: design@10, A?: by@11)
141	SVO (V: uses@2, S: Python@1, O: typing@4)
142	SVC (C: resolution@9, V: is@6, S: feature@3)	SVC (S: resolution@9, V: "is", C: binding@12)	SVO (V: binds@16, S: resolution@9, O: method@17, A?: during@21)
143	SVA (V: "be built", S: functionality@6, A!: into@10)	SVO (S: language@12, V: "has", O: core@14)	SVO (V: designed@18, S: Python@16, A?: Rather@1, XCOMP: extensible@22)
144	SVA (V: written@7, S: modules@3, A?: easily@6, A!: in@8)
145	SVA (V: used@5, S: Python@1, A?: also@3, A!: as@6)	SVO (V: need@16, S: modules@12, O: interface@19)
146	SVA (V: intended@19, S: design@2, A!: by@20, A?: from@23, A?: of@28)	SVO (S: his@29, V: "has", O: frustrations@30)	SVO (V: espoused@35, S: ABC@32, O: mindset@38)
147	SVO (V: offers@5, S: design@2, O: support@8)
148	SVO (S: Python@3, V: "has", O: philosophy@6)	SVO (V: exhibits@7, S: philosophy@6, A?: However@1, O: similarities@9)
149	SVO (V: reduce@10, S: language@4, A?: November@1, O: functions@17)	SVA (V: "be added", S: comprehensions@22, A!: in@24)
150	
151	SVO (V: has@4, S: library@3, O: modules@6)	SVO (V: implement@13, S: modules@6, O: tools@15)	SVA (V: "be borrowed", S: tools@15, A!: from@17)
152	
153	
154	
155	
156	
157	
158	
159	
160	
161	
162	
163	
164	SVOO (V: rejects@12, S: philosophy@11, A?: offering@3, O: syntax@14, IO: 2008-11-24@1)
165	SVO (S: Python@1, V: "has", O: developers@3)	SVO (V: promote@5, S: developers@3, A?: expressly@4, O: culture@9)	SVA (V: "be based", S: culture@9, A!: on@14)	SVOC (V: want@17, S: they@16, O: what@15, O: language@19, XCOMP: be@21, XCOMP: favoring@23)	SVO (V: see@27, S: they@26, A?: as@28, O: forms@25)
166	SVOA (V: put@4, S: Martelli@3, O: it@5, A!: in@6)	SVO (S: his@7, V: "has", O: Cookbook@9)
167	
168	SVO (V: considered@11, S: clever@8, A?: NOT@10, XCOMP: compliment@13)
169	SVO (S: Python@2, V: "has", O: philosophy@4)	SVO (V: rejects@5, S: philosophy@4, O: Perl@7)	EXISTENTIAL (V: is@10, S: way@14)	SVA (V: "be do", S: way@14, O: it@17)	SVA (V: "be do", S: way@38, O: it@41)
170	
171	
172	
173	
174	SVO (S: Python@13, V: "has", O: developers@15)	SVO (V: eschew@16, S: Zen@5, O: optimization@18, A?: moreover@21)	SVO (V: reject@23, S: PEP@1, O: patches@24, A?: to@25)	SVO (V: offer@32, S: parts@27, O: increase@35, A?: at@38)
175	SV (V: described@8, S: Python@5, A?: sometimes@7)
176	
177	SV (V: is@2, S: Python@1)
178	
179	SV (V: is@2, S: Python@1)
180	SVC (V: speed@18, S: problems@11, ACOMP: critical@19)
181	SVC (S: September@1, V: "is", C: programmers@9)	SVOC (C: important@6, V: is@5, S: speed@4, A?: When@3, O: September@1)	SVO (V: tend@10, S: September@1, XCOMP: try@12)
182	SVC (C: fast@7, V: is@5, S: code@4, A?: When@1, A?: enough@8)	SVA (V: rewritten@14, S: functions@11, A?: fast@7, A!: in@15)	SVA (V: "be using", S: translating@29, O: tools@41)
183	
184	
185	
186	
187	
188	
189	
190	
191	SVA (V: summarized@9, S: philosophy@4, A!: by@10)
192	SVO (V: making@9, S: goal@3, XCOMP: fun@11)	SVA (V: fun@11, S: Python@10, A!: use@13)	SVA (V: "be use", S: fun@11)
193	SVA (V: reflected@3, S: This@1, A!: in@4)	SVO (S: Python@17, V: "has", O: Circus@20)
194	
195	
196	
197	
198	
199	
200	
201	
202	
203	
204	
205	
206	
207	
208	
209	
210	
211	
212	
213	
214	
215	
216	
217	
218	
219	SVC (C: pythonic@9, V: is@8, S: neologism@3, CCOMP: have@13)	SVO (V: have@13, S: which@11, O: range@16)	SVA (V: "be related", S: meanings@18, A!: to@20)
220	SVC (C: pythonic@6, V: is@5, S: code@4)	SVC (V: is@7, S: say@2, XCOMP: say@9)	SVO (V: uses@12, S: it@11, O: idioms@14, A?: well@15)	SVC (C: natural@20, V: is@19, S: it@18)	SVC (C: shows@22, V: is@19, S: it@18)
221	SVC (C: pythonic@14, V: is@13, S: it@12)	SVOC (C: say@17, V: is@15, S: pythonic@14, CCOMP: works@20, O: interface@7)	SVO (V: works@20, S: it@19, A?: well@21, A?: with@22, CCOMP: meshes@29)	SVO (S: its@27, V: "has", O: use@28)	SVA (V: meshes@29, S: use@28, A!: well@30, A?: with@31)
222	SVC (V: is@9, S: mark@5, A?: In@1, CCOMP: attempts@12)	SVO (V: attempts@12, S: it@11, XCOMP: write@14)	SVO (V: provides@32, S: that@29, O: transcription@35)
223	SVA (V: bound@7, S: concept@2, A?: tightly@6, A!: to@8)	SVO (V: avoiding@16, S: concept@2, A?: tightly@6, A?: to@8, O: approach@29)	SVO (S: Python@9, V: "has", O: philosophy@12)	EXISTENTIAL (V: 's@20, S: way@24)	SVA (V: "be do", S: way@24, O: it@27)	SVO (S: 's@20, V: "has", O: approach@29)
224	SVC (C: unpythonic@7, V: are@6, S: code@2)
225	SVA (V: "be considered", S: those@9, ACOMP: knowledgeable@11)	SVA (V: referred@17, S: those@9, A?: often@16, A!: to@18)
226	
227	
228	
229	
230	
231	
232	
233	
234	SVA (V: related@18, S: something@16, A!: to@19)
235	SVO (V: include@15, S: Examples@1, O: Pygame@16)	SVC (S: Pygame@16, V: "is", C: binding@19)	SVC (S: PyS60@32, V: "is", C: implementation@35)	SVO (V: bind@49, S: PyQt@44, O: Qt@50)	SVC (S: PyPy@60, V: "is", C: implementation@64)	SVA (V: "be written", S: implementation@64, A!: in@66)
236	SVA (V: used@5, S: prefix@2, A?: also@4, A!: outside@6)	SVO (V: named@17, S: conference@15, XCOMP: PyCon@18)
237	SVA (V: used@6, S: Python@3, A?: often@5, A!: as@7)
238	
239	
240	SVO (V: developed@12, S: API@9, A?: With@1, XCOMP: facilitate@14)
241	SVO (V: support@16, S: framework@3, O: developers@17, A?: in@18)
242	SVOC (V: allow@8, S: Libraries@1, O: Python@9, XCOMP: used@12)
243	SVA (V: embedded@5, S: Python@1, A?: successfully@4, A!: in@6, A?: as@12)	SVA (V: "be including", S: language@15, A!: in@18)	SVC (S: Abaqus@25, V: "is", C: packages@29)
244	SVA (V: found@9, S: Documentation@1, A!: uses@13)	SVO (V: uses@13, S: GDB@12, O: Python@14, A?: as@15)	SVA (V: "be show", S: printer@18, O: structures@22)
245	SVO (V: promoting@4, S: ESRI@1, A?: now@3, O: Python@5, A?: as@6)
246	
247	
248	SVA (V: "be started", S: Oct@3, A!: About@5, A?: with@8)	SV (V: http@12, S: November@2)
249	SV (V: http@15, S: About_getting_started_with_writing_geoprocessing_scripts@3)
250	
251	
252	
253	
254	SV (V: know@13, S: you@10, A?: well@12)	SVO (S: your@15, V: "has", O: space-game@17)	SVOC (V: owes@18, S: space-game@17, A?: Games@2, A?: know@13, O: existence@20, A?: to@21, O: www.webcitation@30)	SVOC (V: owes@18, S: Blog@8, A?: Games@2, A?: know@13, O: existence@20, A?: to@21, O: www.webcitation@30)	SVO (S: its@19, V: "has", O: existence@20)
255	
256	
257	
258	
259	
260	SV (V: know@13, S: you@10, A?: well@12)	SVO (S: your@15, V: "has", O: space-game@17)	SVOC (V: owes@18, S: space-game@17, A?: Games@2, A?: know@13, O: existence@20, A?: to@21, O: www.webcitation@30)	SVOC (V: owes@18, S: Blog@8, A?: Games@2, A?: know@13, O: existence@20, A?: to@21, O: www.webcitation@30)	SVO (S: its@19, V: "has", O: existence@20)
261	
262	
263	SVO (S: Meier@3, V: "has", O: http@12)
264	
265	SVO (S: Meier@3, V: "has", O: Blog@8)	SVOO (V: created@10, S: we@9, O: levels@12, IO: Blog@8)
266	SVO (V: offers@4, S: level@3, O: support@8, A?: letting@10)	SVA (V: "be letting", S: level@3, O: modders@11, A!: with@12)	SVO (V: manipulate@15, S: experience@14, O: world@18, A?: in@21)
267	
268	SVO (S: Meier@3, V: "has", O: http@12)
269	
270	SVO (S: Meier@3, V: "has", O: Blog@8)	SVOO (V: created@10, S: we@9, O: levels@12, IO: Blog@8)
271	SVO (V: offers@4, S: level@3, O: support@8, A?: letting@10)	SVA (V: "be letting", S: level@3, O: modders@11, A!: with@12)	SVO (V: manipulate@15, S: experience@14, O: world@18, A?: in@21)
272	SVC (S: Engine@16, V: "is", C: two@20)
273	
274	
275	
276	SVC (S: Guide@3, V: "is", C: v1@5)
277	SVO (V: List@3, S: Documents@2, O: v1@6)
278	
279	
280	
281	
282	
283	SVC (S: Guide@3, V: "is", C: v1@5)
284	SVO (V: List@3, S: Documents@2, O: v1@6)
285	
286	
287	SVC (S: 2010-08-10@1, V: "is", C: Python@9)	SVO (S: its@4, V: "has", O: similarities@5)	SVA (V: used@13, S: 2010-08-10@1, A?: also@11, A!: in@14)	SVC (S: Intelligence@16, V: "is", C: AI@18)
288	
289	
290	SVC (S: PyAIML@1, V: "is", C: package@5)	SVC (S: PyAIML@1, V: "is", C: http@14)
291	
292	SVC (S: PyAIML@1, V: "is", C: package@5)	SVC (S: PyAIML@1, V: "is", C: http@14)
293	
294	
295	
296	
297	
298	
299	
300	SVC (C: component@10, V: is@7, S: Python@6, A?: For@1)	SVC (S: ships@13, V: "is", C: FreeBSD@19)
301	SVO (V: use@6, S: number@2, O: installers@7)	SVA (V: "be written", S: installers@7, A!: in@9)	SVO (V: uses@13, S: Ubuntu@12, O: installer@16, A?: use@24)	SVO (V: use@24, S: Linux@21, O: installer@27)
302	SVO (V: uses@3, S: Linux@2, O: Python@4, A?: in@5)	SVO (S: its@6, V: "has", O: system@9)
303	SVO (V: uses@2, S: Pardus@1, O: it@3, A?: for@4)
304	
305	
306	
307	
308	
309	
310	
311	
312	SVO (V: seen@5, S: Python@2, A?: also@4, O: use@7, A?: including@14)
313	
314	
315	
316	
317	
318	SVO (S: Technologies@3, V: "has", O: immunitysec.com@9)
319	SVO (V: include@9, S: Products@1, O: http@10)
320	
321	
322	
323	
324	SVO (S: Technologies@3, V: "has", O: immunitysec.com@9)
325	
326	
327	
328	
329	
330	
331	
332	
333	SVC (C: http@17, V: are@15, S: 2008-11-24@1)
334	
335	
336	
337	
338	
339	
340	
341	
342	SVC (S: September@6, V: "is", C: http@10)
343	
344	
345	
346	
347	
348	
349	
350	
351	
352	
353	
354	
355	SVC (S: CERN@2, V: "is", C: http@4)
356	
357	
358	
359	SVC (S: NASA@2, V: "is", C: http@4)
360	
361	
362	
363	
364	
365	SVC (S: ILM@2, V: "is", C: http@4)
366	
367	
368	
369	
370	
371	
372	
373	
374	
375	SVC (S: September@1, V: "is", C: http@5)
376	
377	
378	SVA (V: developed@19, S: September@1, A?: now@18, A!: at@20)
379	
380	
381	
382	
383	
384	
385	SVO (V: intended@7, S: syntax@2, XCOMP: language@13)
386	SVO (V: designed@3, S: It@1, XCOMP: have@5)	SVA (V: "be using", S: have@5, A!: frequently@11, O: keywords@14)	SVOO (V: use@18, S: languages@17, A?: where@15, O: punctuation@19, IO: keywords@14)
387	SVO (V: requires@2, S: Python@1, O: boilerplate@4)	SVOC (V: has@18, S: Python@1, O: boilerplate@4, O: number@21)
388	
389	
390	
391	
392	
393	
394	SVO (V: see@3, S: versions@1, O: History@4)
395	SVA (V: demonstrated@6, S: simplicity@2, A!: by@7)	SVO (S: its@8, V: "has", O: version@9)	SVO (V: uses@27, S: Python@26, O: indentation@29)	SVO (V: braces@34, S: Python@26, O: indentation@29, A?: delimit@39)	SVA (V: "be delimit", S: braces@34, O: block@40)	SVA (V: "be known", S: feature@43, A!: also@44, A?: as@46)
396	SVA (V: comes@5, S: increase@2, A!: after@6)	SVO (V: signifies@14, S: decrease@11, O: end@16)
397	
398	
399	
400	
401	
402	
403	
404	
405	SVO (S: Python@2, V: "has", O: statements@4)	SV (V: include@5, S: statements@4)	SVO (V: has@13, S: statement@12, O: semantics@16)	SVO (S: its@14, V: "has", O: semantics@16)	SVO (V: execute@26, S: statement@23, A?: for@18, O: block@28, A?: immediately@29, A?: unlike@31)	SVO (S: its@27, V: "has", O: block@28)
406	SVO (V: support@4, S: Python@1, O: continuations@6)	SVO (V: according@9, S: Python@1, O: continuations@6)	SVO (V: will@16, S: it@14, O: Rossum@13)
407	SVC (V: Is@3, S: Design@2, XCOMP: Solving@6)
408	SVO (V: =@2, S: jsp?thread@1, O: 147358@3)
409	SVOC (V: Solving@17, S: Design@13, A?: Just@16, CCOMP: http@19, O: Rossum@3)	SV (V: http@19, S: Puzzles@18)
410	SVO (V: =@2, S: jsp?thread@1, O: 147358@3)
411	SVO (V: provided@22, S: support@15, A?: in@23, O: Artima@11)
412	SVO (S: Python@4, V: "has", O: generators@6)
413	
414	
415	SVC (S: April@5, V: "is", C: J.@13)
416	
417	
418	SVC (S: April@5, V: "is", C: J.@13)
419	
420	SVC (C: iterator@5, V: were@3, S: generators@2)	SVA (V: passed@9, S: information@7, A!: unidirectionally@10, A?: out@11)
421	
422	SVC (C: possible@4, V: is@3, S: it@2, XCOMP: pass@6)
423	SVC (C: similar@4, V: are@3, S: expressions@2, A?: to@5)
424	SVA (V: enforced@12, S: distinction@5, A?: In@1, A?: rigidly@11, A!: in@14)
425	SVA (V: leads@2, S: This@1, A!: to@3)
426	
427	SVC (C: part@6, V: be@4, S: Statements@1, A?: of@7)	SVC (C: expressions@22, V: be@4, S: Statements@1, A?: of@7)	SVO (V: contain@26, S: part@6, O: statements@27)
428	SVA (V: is@6, S: case@3, A!: that@7)	SVO (V: form@18, S: a@13, O: part@19)
429	SVO (V: has@2, S: This@1, O: advantage@4)	SVA (V: =@16, S: operator@15, A!: for@17)	SVO (V: =@29, S: c@28, O: 1@30)
430	SVO (V: =@9, S: c@8, O: 1@10)
431	
432	
433	
434	
435	SVO (V: have@3, S: methods@2, O: parameter@7, A?: in@13)
436	
437	
438	
439	
440	SVO (V: uses@7, S: Python@6, O: typing@9)	SVOC (V: typed@12, S: Python@6, O: typing@9, O: objects@13)
441	SVA (V: checked@5, S: constraints@2, A!: at@6)	SVO (V: fail@17, S: operations@12, A?: rather@10, XCOMP: signifying@19)
442	SVO (V: typed@9, S: Python@6, A?: Despite@1, A?: strongly@8, XCOMP: forbidding@11)	SVC (C: well-defined@16, V: are@14, S: operations@12, A?: for@18)
443	SVOC (V: allows@2, S: Python@1, O: programmers@3, XCOMP: define@5)	SVO (S: their@6, V: "has", O: types@8)	SVA (V: "be using", S: types@8, O: class@10)	SVA (V: used@16, S: class@10, A?: often@15, A!: for@17)
444	SVA (V: constructed@6, S: instances@2, A!: by@7)	SVA (V: classes@26, S: instances@2, A?: by@7, A!: allowing@42)	SVA (V: "be allowing", S: classes@26, O: metaprogramming@43)	SVOC (C: instances@29, V: are@28, S: themselves@27, A?: of@30, O: classes@26)
445	
446	SVOC (V: had@2, S: Python@1, O: kinds@4, O: old-style@9)
447	SVC (S: Reference@4, V: "is", C: section@6)
448	
449	
450	
451	
452	
453	SVC (S: Reference@4, V: "is", C: section@6)
454	
455	
456	
457	
458	
459	SVA (V: eliminated@4, S: classes@2, A!: in@5)
460	SV (V: new-style@4, S: classes@3)
461	
462	
463	SV (V: used@7, S: kinds@2)
464	SVC (C: same@8, V: is@6, S: syntax@2)	SVA (V: "be being", S: difference@11, CCOMP: inherited@18)	SVA (V: inherited@18, S: object@16, A!: from@19)	SVA (V: inherit@28, S: classes@27, A!: from@29)	SVC (C: instances@33, V: are@32, S: classes@27, A?: from@29, A?: of@34)
465	SV (V: is@2, S: summary@4, A?: Here@1)	SVO (S: Python@6, V: "has", O: types@10)	SVO (V: defined@22, S: division@20, A?: In@12, XCOMP: round@24)
466	SVC (C: 2@7, V: is@6, S: 3@5)	SVOC (C: 3@19, V: is@17, S: 3@16, O: 2@7)
467	SVC (C: uniform@3, V: is@2, S: This@1)	SVA (V: means@11, S: it@10, A?: for@7, A!: that@12)	SVC (S: equation@14, V: "is", C: b@18)	SVC (S: true@33, V: "is", C: +7@44)	SVC (C: true@33, V: is@31, S: b@28, A?: always@32, A?: in@36)
468	SVA (V: means@3, S: It@1, A?: also@2, A!: that@4)	SVC (C: valid@23, V: is@22, S: a@21, A?: for@24)
469	SVO (V: means@9, S: maintaining@3, A?: However@1, XCOMP: that@10)	SVC (C: integer@38, V: is@35, S: b@34, A?: where@33)	SVO (V: has@41, S: it@40, XCOMP: lie@43)	SVO (V: has@41, S: result@13, XCOMP: lie@43)	SVC (S: interval@46, V: "is", C: b@48)	SVC (C: negative@54, V: is@53, S: b@52, A?: when@51)
470	
471	
472	
473	
474	SVO (S: Python@2, V: "has", O: Floors@6)	SVOO (V: provides@9, S: Python@8, O: function@12, A?: floats@15, IO: Floors@6)	SVA (V: floats@15, S: rounding@14, A!: to@16)
475	
476	
477	
478	
479	
480	
481	
482	SVC (S: library@6, V: "is", C: release@8)
483	
484	
485	
486	SVC (S: library@6, V: "is", C: release@8)
487	SVOO (V: uses@9, S: Python@7, O: round-to-even@10, IO: functions@6)
488	
489	
490	
491	
492	
493	
494	SVC (S: library@6, V: "is", C: release@8)
495	
496	
497	
498	SVC (S: library@6, V: "is", C: release@8)
499	
500	
501	SVO (V: allows@2, S: Python@1, O: expressions@4, A?: with@5)	SVC (C: consistent@14, V: is@13, S: manner@11, A?: with@15)
502	SVC (C: less@19, V: is@18, S: a@17, A?: than@20)
503	SVO (V: interpret@3, S: languages@2, O: expression@5, A?: differently@6)	SVO (V: evaluate@15, S: expression@12, A?: in@8, A?: first@14, O: a@16)	SV (V: result@30, S: that@29)	SVA (V: compared@34, S: resulting@22, A?: b@20, A-: then@32, A!: with@35)
504	SVC (S: Reference@3, V: "is", C: CPython@10)	SVA (V: "be known", S: implementation@14, A!: as@17)	SVO (V: written@21, S: implementation@14, A?: in@22, O: CPython@10)
505	
506	
507	
508	
509	
510	
511	
512	
513	
514	
515	
516	
517	
518	
519	
520	
521	SVA (V: executed@5, S: 2011-04-19@1, A-: then@4, A!: by@6)
522	
523	
524	
525	
526	
527	
528	SVO (V: distributed@6, S: It@4, A?: with@7, O: PDF@2)	SVA (V: "be written", S: library@11, A!: in@13)
529	
530	SVO (V: intended@3, S: CPython@1, A?: from@4, XCOMP: cross-platform@11)	SVO (S: its@6, V: "has", O: conception@8)	SVO (S: its@13, V: "has", O: use@14)	SVA (V: helped@36, S: use@14, A?: greatly@35, A!: in@37)
531	
532	
533	
534	
535	
536	
537	SVC (C: fork@7, V: is@4, S: Python@3, A?: of@8)	SVO (V: implements@11, S: fork@7, O: microthread@12)	SVO (V: use@17, S: it@14, O: memory@20)
538	SVO (V: expected@4, S: It@1, XCOMP: run@6)	SVO (V: runs@14, S: CPython@13, O: platforms@11, A?: on@15)
539	SVO (V: started@2, S: Google@1, O: project@4)	SVA (V: "be called", S: project@4, A!: with@10)	SVO (S: its@30, V: "has", O: ability@32)
540	
541	
542	
543	
544	SVOO (V: compiles@10, S: Jython@9, O: program@13, A?: into@14, IO: September@5)	SVA (V: executed@23, S: code@17, A-: then@21, A!: by@24)
545	SVO (V: enables@3, S: This@1, A?: also@2, O: use@5)
546	
547	
548	SVC (C: implementation@6, V: is@2, S: PyPy@1, A?: of@7)	SVA (V: "be written", S: Python@8, A!: in@11)	SV (V: can@15, S: types@18)	SVC (S: types@18, V: "is", C: code@23)
549	EXISTENTIAL (V: exist@3, S: compilers@4, A?: also@2)	SVC (S: Python@13, V: "is", C: subset@17)
550	SVC (V: is@2, S: PyPy@1, A?: of@3, XCOMP: compiling@7)	SVO (V: include@15, S: examples@14, O: Pyjamas@16)	SVO (V: Skin@22, S: examples@14, O: Pyjamas@16, A?: compiling@23)	SVO (V: Cython@28, S: examples@14, O: Pyjamas@16, A?: compiling@31)	SVA (V: "be compiling", S: Pyjamas@16, A!: to@18)	SVA (V: "be compiling", S: Skin@22, A!: to@24)	SVA (V: "be compiling", S: Cython@28, A!: to@32)
551	SVO (V: released@4, S: Nokia@3, A?: In@1, O: interpreter@7)	SVA (V: "be called", S: phone@13)
552	SVO (V: includes@2, S: It@1, O: many@3)
553	SVC (V: kept@5, S: project@2, A?: to@7, XCOMP: run@10)	SV (V: available@25, S: modules@24)
554	SVO (V: supports@5, S: N900@3, A?: also@4, O: Python@6, A?: with@12)	SVO (V: written@20, S: programs@16, O: feature@14)	SVO (V: run@22, S: programs@16, A?: on@23, O: feature@14)
555	EXISTENTIAL (V: is@2, S: interpreter@6, A?: also@3)
556	SVO (V: called@3, S: It@1, XCOMP: PythonCE@4)
557	
558	
559	
560	
561	
562	
563	
564	
565	EXISTENTIAL (V: are@3, S: tools@5, O: 2011-04-19@1)
566	SVA (V: began@5, S: machine@4, A!: in@6)	SVO (V: made@9, S: machine@4, A?: in@6, O: appearance@13)	SVO (S: its@10, V: "has", O: appearance@13)
567	
568	
569	
570	
571	
572	
573	
574	
575	SVA (V: folded@5, S: PyMite@3, A!: into@6)
576	
577	
578	
579	
580	
581	
582	SVC (S: on-a-Chip@4, V: "is", C: p14p@6)	SVC (C: project@10, V: is@8, S: Python@2, A?: develop@12)	SVA (V: "be develop", S: project@10, O: machine@17)	SVO (V: runs@23, S: machine@17, O: subset@26, A?: without@33, A?: in@36)
583	
584	
585	SVO (V: created@11, S: project@10, O: translator@14)	SVO (V: targets@18, S: translator@14, O: microcontroller@20)
586	SVC (S: ChinesePython@1, V: "is", C: 中蟒@3)	SVC (C: language@9, V: is@5, S: ChinesePython@1, A?: using@10)	SVA (V: "be using", S: language@9, O: lexicon@13)
587	SVA (V: coded@14, S: operations@11, A?: Besides@1, A!: in@15)
588	SVC (C: available@5, V: is@4, S: Python@3, A?: on@6, A?: as@8)
589	
590	
591	
592	
593	SVA (V: function@15, S: implementations@9, A!: as@16)	SVOO (V: enters@26, S: user@25, A?: for@22, O: statements@27, A?: sequentially@28, IO: interpreter@20)	SVOO (V: receives@30, S: user@25, A?: for@22, O: statements@27, A?: sequentially@28, O: results@32, A?: immediately@33, IO: interpreter@20)
594	SVA (V: acts@5, S: Python@4, A?: In@1, A!: as@6)
595	
596	
597	SVO (V: add@3, S: shells@2, O: capabilities@4)
598	SVO (V: implement@13, S: they@12, A?: following@3, O: features@14)	SVA (V: "be highlighting", S: syntax@24)
599	SVA (V: compile@4, S: implementations@2, A!: to@7)
600	SVA (V: done@8, S: this@4, A?: far@2, A?: only@6, A!: for@9)
601	SVOA (V: takes@2, S: PyPy@1, O: approach@4, A!: naming@6)	SVA (V: "be naming", S: PyPy@1, O: version@10)	SVO (S: its@7, V: "has", O: version@10)
602	SV (V: is@2, S: a@3)	SVA (V: "be specialising", S: a@3, A!: in@6)	SVA (V: integrates@10, S: compiler@8, A!: with@11)	SVO (V: transforms@14, S: compiler@8, A?: with@11, O: bytecode@15, A?: to@16, A?: at@19)
603	SVA (V: specialised@5, S: code@3, A!: for@6)	SVA (V: is@11, S: code@3, A?: for@6, A!: faster@12)
604	SVC (C: compatible@3, V: is@2, S: Psyco@1, A?: with@4)	SVC (S: compatible@3, V: "is", C: subset@12)
605	
606	
607	
608	
609	
610	
611	
612	
613	
614	
615	SVO (S: Python@2, V: "has", O: development@4)	SVA (V: conducted@6, S: development@4, A!: through@8)	SVC (S: Proposal@12, V: "is", C: PEP@14)
616	SVC (C: documents@5, V: are@2, S: PEPs@1, A?: providing@6, A?: including@13)	SVA (V: "be providing", S: documents@5, O: information@8)	SVA (V: "be related", S: information@8, A!: to@10)
617	
618	
619	
620	
621	
622	
623	SVA (V: reviewed@5, S: PEPs@3, A!: upon@8)	SVA (V: commented@7, S: PEPs@3, A!: upon@8)	SVC (S: Dictator@18, V: "is", C: architect@25)	SVO (S: project@15, V: "has", O: Dictator@18)
624	
625	
626	
627	
628	
629	
630	
631	
632	
633	
634	
635	
636	
637	
638	
639	
640	
641	
642	
643	
644	
645	
646	
647	SVO (S: CPython@1, V: "has", O: public@3)	SV (V: releases@4, S: public@3)	SV (V: incremented@19, S: part@13, A?: by@11)	SVA (V: released@32, S: number@22, A?: also@31, A!: as@33)	SV (V: made@43, S: release@41, A?: for@36)
648	EXISTENTIAL (V: is@3, S: schedule@6)	SVA (V: pushed@14, S: this@11, A?: is@3, A?: often@13, A!: back@15, A?: ready@21)	SVC (C: ready@21, V: is@19, S: code@18)
649	SVO (V: monitor@4, S: team@3, O: state@6, A?: by@10)	SVOC (V: using@21, S: team@3, O: state@6, A?: by@10, O: system@26)
650	
651	
652	SVOO (V: has@8, S: Python@7, O: library@12, IO: September@3)	SVA (V: cited@15, S: September@3, A?: commonly@14, A!: as@16)	SVO (S: Python@19, V: "has", O: strengths@22)	SVC (S: Network@30, V: "is", C: July@32)
653	
654	SVA (V: "be suited", S: tools@3, A!: to@5)
655	SVC (C: deliberate@3, V: is@2, S: This@1)	SVC (C: described@7, V: is@2, S: This@1, A?: as@8)
656	
657	
658	
659	
660	
661	
662	SVA (V: augmented@9, S: modules@2, A!: with@10)	SVA (V: "be written", S: modules@12, A!: in@14)
663	SVO (V: includes@4, S: Libraries@3, O: library@6)	SVC (S: library@6, V: "is", C: Boost.Python@8)
664	
665	SVA (V: "be provided", S: tools@7, A!: by@9)	SVA (V: "be use", S: ability@17, O: language@22)	SVC (C: capable@32, V: is@30, S: ability@17, A?: already@31, A?: of@33)	SVOC (C: language@45, V: be@41, S: Python@39, A?: between@46, O: ability@17)
666	SVA (V: tailored@7, S: library@3, A?: well@6, A!: to@8, A?: with@13)	SVA (V: "be supported", S: number@16, A!: already@29)
667	SVA (V: "be manipulating", S: Modules@1, O: expression@21)	SVA (V: "be connecting", S: Modules@1, A!: to@9)	SVC (S: Modules@1, V: "is", C: arithmetic@13)	SV (V: included@29, S: Modules@1, A?: also@28)
668	
669	
670	
671	
672	
673	
674	SVA (V: covered@9, S: parts@3, A!: by@10)	SVA (V: majority@25, S: parts@3, A?: by@10, A!: of@26)	SVO (V: follows@20, S: wsgiref@19, A?: for@13, O: specifications@11)
675	SVA (V: specified@3, S: They@1, A!: by@4)	SV (V: documentation@9, S: They@1, A?: by@4)	SV (V: suite@13, S: They@1, A?: by@4)	SVO (S: their@5, V: "has", O: code@6)
676	SVC (C: code@12, V: is@9, S: most@4)	EXISTENTIAL (V: are@15, S: modules@19, A?: However@1)	SV (V: altered@23, S: modules@19)	SVA (V: rewritten@26, S: modules@19, A?: completely@25, A!: by@27)
677	SVC (C: essential@6, V: is@4, S: library@3, XCOMP: run@8)
678	
679	
680	SVO (V: provides@8, S: library@7, A?: For@1, O: modules@13)
681	SVO (S: Python@1, V: "has", O: design@3)	SVO (V: influenced@7, S: design@3, O: languages@10)	SVO (S: Python@14, V: "has", O: practices@17)	SVA (V: emulated@21, S: practices@17, A?: also@19, A!: by@22)
682	SVC (S: practice@2, V: "is", C: change@17)	SVA (V: "be describing", S: document@6, O: rationale@9)	SVA (V: "be surrounding", S: issues@13)	SVO (S: Python@23, V: "has", O: case@25)	SVA (V: used@32, S: PEP@28, A?: in@22, A?: also@31, A!: in@33)
683	
684	
685	
686	
687	
688	
689	
690	
691	
692	SVO (S: Python@4, V: "has", O: influence@6)
693	SVA (V: "be created", S: languages@55, A!: in@57)	SVO (V: als@69, S: Python@68, O: ar@75)	SVC (S: Python@71, V: "is", C: Programmiersprache@73)	SVC (S: পাইথন@90, V: "is", C: ভাষা@94)	SV (V: bs@99, S: Python@98)	SVO (S: jezik@103, V: cs@107, O: bs@99)	SVO (S: jezik@103, V: cs@107, O: bs@99)	SVC (S: Python@112, V: "is", C: programmeringssprog@114)	SVC (S: Python@118, V: "is", C: Programmiersprache@120)	SVC (S: Python@124, V: "is", C: programmeerimiskeel@126)	SV (V: es@131, S: Python@130)	SVC (S: Python@136, V: "is", C: programlingvo@138)	SVC (S: پایتون@145, V: "is", C: نویسی@149)	SVC (S: Python@153, V: "is", C: langage@155)	SVC (S: पाइथन@165, V: "is", C: भाषा@168)	SVC (S: Python@175, V: "is", C: pemrograman@178)	SVC (S: Python@182, V: "is", C: programmation@186)	SV (V: is@188, S: Python@182)	SVC (S: Python@190, V: "is", C: forritunarmál@192)	SVC (S: Python@228, V: "is", C: nyelv@231)	SVC (S: ഗ@240, V: "is", C: ഭാഷ@243)	SVC (S: Python@297, V: "is", C: jazyk@300)	SVC (S: Python@304, V: "is", C: jezik@307)	SVC (S: Пајтон@311, V: "is", C: језик@314)	SVC (S: Python@326, V: "is", C: programspråk@328)	SVC (S: ్@344, V: "is", C: భాష@348)	SVC (S: Python@358, V: "is", C: dili@361)	SVC (S: Python@371, V: "is", C: trình@376)	SVO (V: executes@386, S: ifstatement@382, A?: conditionally@385, O: block@388)
694	SVA (V: "be capturing", S: forstatement@2, O: element@13, A!: to@14)	SVA (V: iterates@5, S: forstatement@2, A!: over@6)
695	SVO (V: executes@5, S: whilestatement@2, O: block@7, A?: long@11)	SVO (S: its@13, V: "has", O: condition@14)	SVC (C: true@16, V: is@15, S: condition@14)
696	SVO (V: allows@6, S: statement@3, O: exceptions@7)	SVO (S: its@10, V: "has", O: block@13)	SVO (V: ensures@25, S: it@23, A?: also@24, CCOMP: run@36)	SVA (V: run@36, S: code@28, A?: always@34, A!: regardless@37)
697	SVO (V: executes@5, S: classstatement@2, O: block@7)	SVOC (V: attaches@11, S: classstatement@2, O: block@7, O: namespace@14, A?: to@15)	SVO (S: its@12, V: "has", O: namespace@14)
698	SVO (V: defines@6, S: statement@3, O: function@8)
699	
700	SVA (V: "be acquiring", S: which@3, O: lock@18)	SVO (V: encloses@4, S: which@3, O: block@7, A?: within@8, A?: for@13, A?: acquiring@16)	SV (V: run@25, S: block@21, A?: before@19)	SVO (V: releasing@28, S: block@21, A?: before@19, O: lock@30, A?: afterwards@31)
701	SVA (V: serves@6, S: statement@3, A!: as@7)	SVA (V: used@13, S: statement@3, A?: as@7, A!: in@14)
702	SVA (V: "be used", S: assertstatement@2, A!: during@5)	SVO (V: ought@12, S: conditions@10, XCOMP: apply@14)
703	SVO (V: returns@6, S: statement@3, O: value@8, A?: from@9)
704	
705	SVC (C: operator@6, V: is@3, S: yield@2, A?: also@4)
706	SVO (V: used@4, S: form@2, XCOMP: implement@6)
707	SV (V: division@13, S: operator@8, A?: In@2)	SVO (V: truncates@16, S: it@15, O: result@18, A?: to@19)
708	
709	
710	SVC (S: float@1, V: "is", C: x@3)
711	
712	SVA (V: enabled@5, S: behaviour@2, A!: in@6)
713	
714	
715	SVO (V: used@9, S: Python@2, XCOMP: do@11)
716	SVO (V: compares@17, S: it@16, A?: where@15, A?: by@18, O: Java@13)
717	
718	SVO (S: Python@2, V: "has", O: operator@5)	SVO (V: used@8, S: operator@5, XCOMP: compare@10)
719	SVOC (C: chained@4, V: be@3, S: Comparisons@1, A?: for@6, O: c@14)
720	SVO (V: uses@2, S: Python@1, O: words@4)	SVO (S: its@11, V: "has", O: operators@13)
721	
722	SVO (V: has@2, S: Python@1, O: type@4)	SVA (V: "be known", S: expression@6, A!: as@8)
723	
724	SVA (V: "be known", S: expression@8, A!: as@10)
725	
726	
727	
728	
729	SVOC (V: implemented@19, S: proposals@5, XCOMP: using@20, O: expressions@2)	SVC (C: limited@28, V: are@27, S: these@26, A?: however@24, A?: in@29)	SVC (C: expression@38, V: be@35, S: body@32, A?: only@34)
730	SVA (V: written@6, S: expressions@2, A!: as@7, A?: http@13)
731	
732	
733	
734	
735	SVO (V: makes@2, S: Python@1, O: distinction@4)
736	SVA (V: written@3, S: Lists@1, A!: as@4)	SVC (S: dictionaries@25, V: "is", C: keys@28)
737	SVA (V: written@3, S: Tuples@1, A!: as@4)
738	SVC (C: optional@7, V: are@6, S: parentheses@2, A?: in@8)
739	SVA (V: appear@3, S: Tuples@1, A!: on@4)	SVA (V: "be used", S: statement@15, XCOMP: swap@28)	SVO (V: used@26, S: x@23, XCOMP: swap@28)
740	SVO (V: has@3, S: Python@1, O: format@7)
741	SVC (V: functions@2, S: This@1, ACOMP: analogous@3)
742	
743	SVC (S: blah@14, V: "is", C: 2@17)	SVA (V: "be evaluates", S: blah@14, XCOMP: =@26)	SVO (V: =@26, S: bar@25, O: 2@27)
744	SVA (V: obsoleted@7, S: this@5, A?: In@1, A!: in@8)
745	
746	
747	
748	SVO (V: has@2, S: Python@1, O: kinds@4)	SVA (V: "be delimited", S: Strings@9, A!: by@11)
749	
750	SVO (V: use@5, S: kinds@2, O: backslash@7)	EXISTENTIAL (V: is@16, S: interpolation@20, A?: as@10)
751	SVA (V: begin@5, S: strings@2, A!: with@8)	SVA (V: end@7, S: strings@2, A!: with@8)
752	SVO (V: span@3, S: They@1, O: lines@5, A?: like@8)	SVC (S: document@10, V: "is", C: Perl@14)
753	SVA (V: "be denoted", S: varieties@3, A!: by@6)
754	SV (V: interpreted@5, S: sequences@3)	SVC (C: useful@11, V: are@10, S: strings@9, A?: hence@7, A?: common@16)	SVC (C: common@16, V: are@15, S: backslashes@14, A?: where@12, A?: as@19)
755	
756	SVO (V: has@2, S: Python@1, O: expressions@6, A?: on@7, A?: denoted@10)	SVA (V: "be denoted", S: Python@1, A!: as@11)
757	SVC (C: zero-based@3, V: are@2, S: Indexes@1)	SVC (C: relative@9, V: are@8, S: indexes@7, A?: to@10)
758	SVOA (V: take@2, S: Slices@1, O: elements@3, A!: from@4, A?: up@8)
759	SVA (V: "be called", S: parameter@4)	SVOC (V: allows@11, S: parameter@4, O: elements@12, XCOMP: skipped@15)
760	SVA (V: omitted@5, S: Slice@1, A!: for@7)
761	SVC (C: copy@9, V: is@6, S: element@2)
762	SVA (V: "be delimited", S: Strings@1, A!: by@3)
763	
764	SVO (V: use@5, S: kinds@2, O: backslash@7)	EXISTENTIAL (V: is@16, S: interpolation@20, A?: as@10)
765	SVA (V: begin@5, S: strings@2, A!: with@8)	SVA (V: end@7, S: strings@2, A!: with@8)
766	SVO (V: span@3, S: They@1, O: lines@5, A?: like@8)	SVC (S: document@10, V: "is", C: Perl@14)
767	SVA (V: "be denoted", S: varieties@3, A!: by@6)
768	SV (V: interpreted@5, S: sequences@3)	SVC (C: useful@11, V: are@10, S: strings@9, A?: hence@7, A?: common@16)	SVC (C: common@16, V: are@15, S: backslashes@14, A?: where@12, A?: as@19)
769	
770	
771	
772	
773	SVC (C: statement@14, V: is@12, S: exec@11)	SVC (V: is@19, S: former@18, A?: for@20, CCOMP: is@25)	SVA (V: is@25, S: latter@24, A!: for@26)
774	SVOC (V: expected@7, S: code@5, A?: where@4, XCOMP: break@9, O: versions@2)
775	SV (V: incremented@9, S: part@3)
776	SVA (V: happen@3, S: releases@2, A!: infrequently@4)
777	
778	SVC (C: compatible@11, V: are@9, S: releases@6, A?: largely@10)	SVOC (C: introduce@13, V: are@9, S: releases@6, A?: largely@10, O: features@15)
779	SV (V: incremented@9, S: part@3)
780	SVO (V: scheduled@4, S: releases@2, XCOMP: occur@6)	SVA (V: supported@17, S: version@15, A!: by@18, A?: for@20, A?: after@23)	SVO (S: its@24, V: "has", O: release@25)
781	
782	
783	
784	
785	SVO (V: introduce@22, S: releases@19, O: features@25)	SVOC (V: fix@27, S: releases@19, O: features@25, O: bugs@28)
786	SV (V: incremented@11, S: part@5)
787	SVA (V: made@4, S: releases@2, A!: fixed@13)	SVA (V: fixed@13, S: number@8, A?: whenever@5, A!: upstream@14, A?: since@15)
788	SVA (V: patched@5, S: vulnerabilities@2, A?: also@4, A!: in@6)
789	
790	
791	SVOO (V: Fix@5, S: Bug@4, O: Aahz@9, IO: PEP@1)	SVO (S: its@17, V: "has", O: Cython@19)	SVC (C: translators@22, V: are@20, S: PEP@1)	SVA (V: targeted@25, S: translators@22, A!: at@26)
792	SVC (C: Python@5, V: is@3, S: language@2, A?: mostly@4, A?: with@6)
793	SVO (V: produce@3, S: languages@2, O: code@6, A?: as@7)
794	SVO (V: uses@2, S: Boo@1, O: indentation@3)
795	
796	
797	
798	
799	
800	
801	
802	
803	
804	
805	SVO (V: uses@3, S: Cobra@2, O: indentation@4)
806	SVO (S: Cobra@1, V: "has", O: Acknowledgements@4)	SVO (V: influenced@13, S: languages@11, O: it@14)
807	
808	
809	
810	
811	SVOC (V: supports@6, S: Cobra@4, CCOMP: 2010-04-07@1, A?: directly@5, O: tests@10)
812	
813	
814	
815	
816	
817	
818	
819	
820	
821	SVA (V: described@4, S: Go@2, A!: as@5)
822	
823	SVO (S: Google@1, V: "has", O: Go@3)	SVOC (C: Python@11, V: 's@10, S: That@9, O: Language@8)	SVO (V: Meets@12, S: Language@8, O: http@19)
824	SVO (S: Google@1, V: "has", O: Go@3)	SVOC (C: Python@11, V: 's@10, S: That@9, O: Language@8)	SVO (V: Meets@12, S: Language@8, O: TechCrunch@17)	SVO (V: motivated@21, S: Groovy@19, A?: by@22, O: TechCrunch@17)	SVA (V: "be bring", S: desire@24, O: philosophy@30, A!: to@31)
825	SVC (S: Strachan@2, V: "is", C: Groovy@4)
826	
827	SVC (S: Strachan@2, V: "is", C: Groovy@4)
828	
829	SVO (V: has@2, S: OCaml@1, O: syntax@5)	SVA (V: "be called", S: syntax@5)	SVA (V: "be inspired", S: syntax@5, A!: by@16)	SVC (S: twt@8, V: "is", C: Thing@12)
830	
831	
832	
833	
834	
835	
836	
837	
838	
839	
840	
841	
842	
843	
844	
845	
846	
847	
