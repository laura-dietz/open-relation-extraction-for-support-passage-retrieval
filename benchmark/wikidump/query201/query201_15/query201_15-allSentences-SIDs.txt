0	Python 200pxOfficial Python Logo multi-paradigm : object-oriented , imperative , functional , procedural , reflective 1991 Guido van Rossum Python Software Foundation 3.2.2 
1	/ yes 2011 09 04 2.7.2 
2	/ yes 2011 06 11 3.3a0 
3	http ://docs .python 
4	.org/dev/ 
5	dev/Python v3.3a0 
6	documentation http ://docs .python 
7	.org/dev/ 
8	dev/Python v3.3a0 
9	documentation duck , dynamic , strong CPython , IronPython , Jython , Python for S60 , PyPy Cython , RPython , Stackless Python ABC , ALGOL 68 , http ://www.amk 
10	.ca/python/writing/gvr-interview 
11	Interview with Guido van Rossum ( 1998 ) Kuchling Andrew M. 
12	amk .ca 
13	22 Dec 2006 29 2007 http ://www.amk 
14	.ca/python/writing/gvr-interview 
15	Interview with Guido van Rossum ( 1998 ) Kuchling Andrew M. 
16	amk .ca 
17	22 Dec 2006 29 2007 C , van Rossum Guido 1993 An Introduction to Python for UNIX/C Programmers Proceedings of the NLUUG najaarsconferentie ( Dutch UNIX users group ) even though the design of C is far from ideal , its influence on Python is considerable . 
18	http ://citeseerx .ist.psu.edu/viewdoc/summary 
19	?doi=10.1.1.38.2023 
20	van Rossum Guido 1993 An Introduction to Python for UNIX/C Programmers Proceedings of the NLUUG najaarsconferentie ( Dutch UNIX users group ) even though the design of C is far from ideal , its influence on Python is considerable . 
21	http ://citeseerx .ist.psu.edu/viewdoc/summary 
22	?doi=10.1.1.38.2023 
23	C++ , http ://docs .python 
24	.org/tutorial/classes 
25	.html 
26	9 . 
27	Classes - Python v2.7.1 
28	documentation It is a mixture of the class mechanisms found in C++ and Modula-3 http ://docs .python 
29	.org/tutorial/classes 
30	.html 
31	9 . 
32	Classes - Python v2.7.1 
33	documentation It is a mixture of the class mechanisms found in C++ and Modula-3 Haskell , Icon , Java , Lisp , Modula-3 , Perl Boo , Cobra , D , Falcon , Groovy , JavaScript , Ruby Cross-platform Python Software Foundation License .py 
34	, .pyw 
35	, .pyc 
36	, .pyo 
37	, .pyd 
38	Python Programming Python is a general-purpose , high-level programming language http ://docs .python 
39	.org/faq/general 
40	.html#what-is-python-good-for 
41	What is Python Good For ? 2008-09-05 General Python FAQ Python Software Foundation http ://docs .python 
42	.org/faq/general 
43	.html#what-is-python-good-for 
44	What is Python Good For ? 2008-09-05 General Python FAQ Python Software Foundation whose design philosophy emphasizes code readability . 
45	http ://www.python 
46	.org/doc/essays/blurb/ 
47	What is Python ? Executive Summary Python Software Foundation Python documentation 2007-03-21 http ://www.python 
48	.org/doc/essays/blurb/ 
49	What is Python ? Executive Summary Python Software Foundation Python documentation 2007-03-21 Python claims to combine "remarkable power with very clear syntax" , http ://www.python 
50	.org/doc/faq/general/#what-is-python 
51	General Python FAQ python .org 
52	Python Software Foundation 2009-06-27 http ://www.python 
53	.org/doc/faq/general/#what-is-python 
54	General Python FAQ python .org 
55	Python Software Foundation 2009-06-27 and its standard library is large and comprehensive . 
56	Its use of indentation for block delimiters is unique among popular programming languages . 
57	Python supports multiple programming paradigm , primarily but not limited to object-oriented , imperative and , to a lesser extent , functional programming styles . 
58	It features a fully dynamic type system and automatic memory management , similar to that of Scheme , Ruby , Perl , and Tcl . 
59	Like other dynamic language , Python is often used as a scripting language , but is also used in a wide range of non-scripting contexts . 
60	Using third-party tools , Python code can be packaged into standalone executable programs . 
61	Python interpreters are available for many operating systems . 
62	The reference implementation of Python ( CPython ) is free and open source software and has a community-based development model , as do all or nearly all of its alternative implementations . 
63	CPython is managed by the non-profit Python Software Foundation . 
64	History of Python thumbupright=0.7rightGuido 
65	van Rossum _ the creator of Python Python was conceived in the late 1980s http ://www.artima.com/intv/pythonP.html 
66	The Making of Python 2007-03-22 Artima Developer http ://www.artima.com/intv/pythonP.html 
67	The Making of Python 2007-03-22 Artima Developer and its implementation was started in December 1989 http ://python-history .blogspot.com/2009/01/brief-timeline-of-python 
68	.html 
69	A Brief Timeline of Python 2009-01-20 Guido van Rossum http ://python-history .blogspot.com/2009/01/brief-timeline-of-python 
70	.html 
71	A Brief Timeline of Python 2009-01-20 Guido van Rossum by Guido van Rossum at CWI in the Netherlands as a successor to the ABC programming language ( itself inspired by SETL ) http ://mail.python 
72	.org/pipermail/python-dev/2000-August/008881.html 
73	SETL ( was : Lukewarm about range literals ) August 29 , 2000 2011-03-13 Python-Dev van Rossum Guido Guido van Rossum http ://mail.python 
74	.org/pipermail/python-dev/2000-August/008881.html 
75	SETL ( was : Lukewarm about range literals ) August 29 , 2000 2011-03-13 Python-Dev van Rossum Guido Guido van Rossum capable of exception handling and interfacing with the Amoeba operating system . 
76	http ://www.python 
77	.org/doc/faq/general/#why-was-python-created-in-the-first-place 
78	General Python FAQ Python Programming Language – Official Website Python Software Foundation 2007-03-22 http ://www.python 
79	.org/doc/faq/general/#why-was-python-created-in-the-first-place 
80	General Python FAQ Python Programming Language – Official Website Python Software Foundation 2007-03-22 Van Rossum is Python 's principal author , and his continuing central role in deciding the direction of Python is reflected in the title given to him by the Python community , ''Benevolent Dictator for Life '' ( BDFL ) . 
81	Python 2.0 
82	was released on 16 October 2000 , with many major new features including a full garbage collector and support for Unicode . 
83	However , the most important change was to the development process itself , with a shift to a more transparent and community-backed process . 
84	http ://www.amk 
85	.ca/python/2.0/ 
86	What 's New in Python 2.0 
87	A.M. 
88	Kuchling and Moshe Zadka 2007-03-22 http ://www.amk 
89	.ca/python/2.0/ 
90	What 's New in Python 2.0 
91	A.M. 
92	Kuchling and Moshe Zadka 2007-03-22 Python 3.0 
93	( also known as Python 3000 or py3k ) , a major , backwards-incompatible release , was released on 3 December 2008 http ://python .org/download/releases/3.0/ 
94	Python 3.0 
95	Release Python Software Foundation 2009-07-08 http ://python .org/download/releases/3.0/ 
96	Python 3.0 
97	Release Python Software Foundation 2009-07-08 after a long period of testing . 
98	Many of its major features have been backport to the backwards-compatible Python 2.6 
99	and 2.7 
100	. 
101	http ://www.python 
102	.org/dev/peps/pep-3000/ 
103	PEP 3000 -- Python 3000 van Rossum Guido 5 April 2006 Python Software Foundation 2009-06-27 http ://www.python 
104	.org/dev/peps/pep-3000/ 
105	PEP 3000 -- Python 3000 van Rossum Guido 5 April 2006 Python Software Foundation 2009-06-27 Python has twice been awarded as TIOBE Programming Language of the Year ( 2007 , 2010 ) , which is given to the language with the greatest growth in popularity over the course of the year ( as measured by the TIOBE index ) . 
106	http ://www.tiobe 
107	.com/index.php/content/paperinfo/tpci/index 
108	.html 
109	TIOBE Programming Community Index for January 2011 January 2010 TIOBE Software 2011-01-10 http ://www.tiobe 
110	.com/index.php/content/paperinfo/tpci/index 
111	.html 
112	TIOBE Programming Community Index for January 2011 January 2010 TIOBE Software 2011-01-10 Python is a multi-paradigm programming language . 
113	Rather than forcing programmers to adopt a particular style of programming , it permits several styles : object-oriented programming and structured programming are fully supported , and there are a number of language features which support functional programming and aspect-oriented programming ( including by metaprogramming http ://www.python 
114	.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf 
115	http ://www.webcitation 
116	.org/5lubkaJRc 
117	2009-12-10 PDF Python Metaclasses : Who ? Why ? When ? The Cain Gang Ltd. 
118	2009-06-27 http ://www.python 
119	.org/community/pycon/dc2004/papers/24/metaclasses-pycon.pdf 
120	http ://www.webcitation 
121	.org/5lubkaJRc 
122	2009-12-10 PDF Python Metaclasses : Who ? Why ? When ? The Cain Gang Ltd. 
123	2009-06-27 and by magic methods ) . 
124	http ://docs .python 
125	.org/3.0/reference/datamodel 
126	.html#special-method-names 
127	3.3 
128	. 
129	Special method names The Python Language Reference Python Software Foundation 2009-06-27 http ://docs .python 
130	.org/3.0/reference/datamodel 
131	.html#special-method-names 
132	3.3 
133	. 
134	Special method names The Python Language Reference Python Software Foundation 2009-06-27 Many other paradigms are supported using extensions , such as pyDBC http ://www.nongnu.org/pydbc/ 
135	Contracts for Python September 24 , 2011 http ://www.nongnu.org/pydbc/ 
136	Contracts for Python September 24 , 2011 and Contracts for Python http ://www.wayforward 
137	.net/pycontract/ 
138	Contracts for Python September 24 , 2011 http ://www.wayforward 
139	.net/pycontract/ 
140	Contracts for Python September 24 , 2011 which allow design by contract . 
141	Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management . 
142	An important feature of Python is dynamic name resolution ( late binding ) , which binds method and variable names during program execution . 
143	Rather than requiring all desired functionality to be built into the language 's core , Python was designed to be highly extensible . 
144	New built-in modules can be easily written in C , C++ or Cython . 
145	Python can also be used as an extension language for existing modules and applications that need a programmable interface . 
146	This design of a small core language with a large standard library and an easily extensible interpreter was intended by Van Rossum from the very start because of his frustrations with ABC ( which espoused the opposite mindset ) . 
147	The design of Python offers only limited support for functional programming in the Lisp tradition . 
148	However , Python 's design philosophy exhibits significant similarities to those of minimalistic Lisp -family languages , such as Scheme . 
149	November 2009 The language has map( ) , reduce( ) and filter( ) functions , and the list comprehensions added in Python 2.0 
150	have since been extended with comprehensions for dictionaries and sets , as well as generator expressions . 
151	The standard library has two modules ( itertools and functools ) that implement functional tools borrowed from Haskell and Standard ML . 
152	http ://docs .python 
153	.org/lib/module-itertools 
154	.html 
155	6.5 
156	itertools - Functions creating iterators for efficient looping Docs .python 
157	.org 
158	2008-11-24 http ://docs .python 
159	.org/lib/module-itertools 
160	.html 
161	6.5 
162	itertools - Functions creating iterators for efficient looping Docs .python 
163	.org 
164	2008-11-24 While offering choice in coding methodology , the Python philosophy rejects exuberant syntax , such as in Perl , in favor of a sparser , less-cluttered grammar . 
165	Python 's developers expressly promote a particular " culture " or ideology based on what they want the language to be , favoring language forms they see as "beautiful" , "explicit " and " simple " . 
166	As Alex Martelli put it in his Python Cookbook ( 2nd ed . 
167	, p.&nbsp;230 
168	) : " To describe something as clever is NOT considered a compliment in the Python culture . 
169	" Python 's philosophy rejects the Perl " there is more than one way to do it " approach to language design in favor of " there should be one—and preferably only one—obvious way to do it " . 
170	http ://www.python 
171	.org/dev/peps/pep-0020/ 
172	PEP 20 - The Zen of Python Python Software Foundation 2004-08-23 2008-11-24 http ://www.python 
173	.org/dev/peps/pep-0020/ 
174	PEP 20 - The Zen of Python Python Software Foundation 2004-08-23 2008-11-24 Python 's developers eschew premature optimization , and moreover , reject patches to non-critical parts of CPython which would offer a marginal increase in speed at the cost of clarity . 
175	April 2011 April 2011 Python is sometimes described as " slow" . 
176	http ://peter.mapledesign.co.uk/weblog/archives/python-is-slow 
177	Python is ... 
178	slow ? September 24 , 2011 December 21st , 2004 http ://peter.mapledesign.co.uk/weblog/archives/python-is-slow 
179	Python is ... 
180	slow ? September 24 , 2011 December 21st , 2004 However most problems and sections of programs are not speed critical . 
181	September 2011 When speed is important , Python programmers tend to try using a JIT compiler such as Psyco or using an alternative language implementation such as PyPy . 
182	When pure Python code is not fast enough , time-critical functions can be rewritten in " closer to the metal " languages such as C , or by translating ( a dialect of ) Python code to C code using tools like Cython . 
183	http ://www.python 
184	.org/doc/essays/list2str 
185	.html 
186	Python Patterns - An Optimization Anecdote Python .org 
187	2011-04-19 http ://www.python 
188	.org/doc/essays/list2str 
189	.html 
190	Python Patterns - An Optimization Anecdote Python .org 
191	2011-04-19 The core philosophy of the language is summarized by the document " PEP 20 ( The Zen of Python ) " . 
192	An important goal of the Python developers is making Python fun to use . 
193	This is reflected in the origin of the name ( derived from the television series Monty Python 's Flying Circus ) , in the common practice of using Monty Python references in example code , and in an occasionally playful approach to tutorials and reference materials . 
194	http ://docs .python 
195	.org/tut/node3.html 
196	Python Tutorial Docs .python 
197	.org 
198	2011-04-19 http ://docs .python 
199	.org/tut/node3.html 
200	Python Tutorial Docs .python 
201	.org 
202	2011-04-19 http ://learnpythonthehardway .org 
203	Learn Python the Hard Way learnpythonthehardway .org 
204	2011 http ://learnpythonthehardway .org 
205	Learn Python the Hard Way learnpythonthehardway .org 
206	2011 For example , the metasyntactic variables often used in Python literature are ''spam '' and ''eggs '' , http ://docs .python 
207	.org/tut/node3.html 
208	Python Tutorial docs .python 
209	.org 
210	2011-05-06 http ://stackoverflow.com/questions/5033906/in-python-should-i-use-else-after-a-return-in-an-if-block 
211	Stack overflow , Python question stackoverflow.com 
212	2011-05-06 For example , see the Python docs such as http ://docs .python 
213	.org/tut/node3.html 
214	Python Tutorial docs .python 
215	.org 
216	2011-05-06 and other examples such as http ://stackoverflow.com/questions/5033906/in-python-should-i-use-else-after-a-return-in-an-if-block 
217	Stack overflow , Python question stackoverflow.com 
218	2011-05-06 instead of the traditional ''foo '' and ''bar '' . 
219	A common neologism in the Python community is pythonic , which can have a wide range of meanings related to program style . 
220	To say that code is pythonic is to say that it uses Python idioms well , that it is natural or shows fluency in the language . 
221	Likewise , to say of an interface or language feature that it is pythonic is to say that it works well with Python idioms , that its use meshes well with the rest of the language . 
222	In contrast , a mark of unpythonic code is that it attempts to write C++ ( or Lisp , Perl , or Java ) code in Python —that is , provides a rough transcription rather than an idiomatic translation of forms from another language . 
223	The concept of pythonicity is tightly bound to Python 's minimalist philosophy of readability and avoiding the " there 's more than one way to do it " approach . 
224	Unreadable code or incomprehensible idioms are unpythonic . 
225	Users and admirers of Python —most especially those considered knowledgeable or experienced—are often referred to as Pythonists , Pythonistas , and Pythoneers . 
226	http ://python .net/~goodger/projects/pycon/2007/idiomatic/handout 
227	.html 
228	Code Like a Pythonista : Idiomatic Python David Goodger http ://python .net/crew/mwh/hacks/objectthink 
229	.html 
230	How to think like a Pythonista http ://python .net/~goodger/projects/pycon/2007/idiomatic/handout 
231	.html 
232	Code Like a Pythonista : Idiomatic Python David Goodger ; http ://python .net/crew/mwh/hacks/objectthink 
233	.html 
234	How to think like a Pythonista The prefix Py can be used to show that something is related to Python . 
235	Examples of the use of this prefix in names of Python applications or libraries include Pygame , a binding of SDL to Python ( commonly used to create games ) ; PyS60 , an implementation for the Symbian Series 60 Operating System ; PyQt and PyGTK , which bind Qt and GTK , respectively , to Python ; and PyPy , a Python implementation written in Python . 
236	The prefix is also used outside of naming software packages : the major Python conference is named PyCon . 
237	Python software Python is often used as a scripting language for web application , e.g 
238	. 
239	via mod_wsgi for the Apache web server . 
240	With Web Server Gateway Interface , a standard API has been developed to facilitate these applications . 
241	Web application framework like Django , Pylons , TurboGears , web2py , Flask and Zope support developers in the design and maintenance of complex applications . 
242	Libraries like NumPy , SciPy and Matplotlib allow Python to be used effectively in scientific computing . 
243	Python has been successfully embedded in a number of software products as a scripting language , including in finite element method software such as Abaqus , 3D animation packages such as Houdini , Maya , MotionBuilder , Softimage , Cinema 4D , modo and Blender and 2D imaging programs like GIMP , Inkscape , Scribus and Paint Shop Pro . 
244	Documentation of the PSP Scripting API can be found at GNU GDB uses Python as a pretty printer to show complex structures such as C++ containers . 
245	ESRI is now promoting Python as the best choice for writing scripts in ArcGIS . 
246	GIS job market and programming ? http ://whygeo.com/questions/56/gis-job-market-and-programming 
247	2010 November Oct 2010 GIS job market and programming ? http ://whygeo.com/questions/56/gis-job-market-and-programming 
248	2010 November Oct 2010 About getting started with writing geoprocessing scripts http ://webhelp.esri.com/arcgisdesktop/9.2/index.cfm? 
249	TopicName=About_getting_started_with_writing_geoprocessing_scripts 2006 November April 2007 About getting started with writing geoprocessing scripts http ://webhelp.esri.com/arcgisdesktop/9.2/index.cfm? 
250	TopicName=About_getting_started_with_writing_geoprocessing_scripts 2006 November April 2007 It has even been used in several video games , http ://myeve .eve-online 
251	.com/devblog 
252	.asp 
253	?a=blog&bid=488 Stackless Python 2.5 
254	CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog As you may well know , your favorite space-game owes its existence to the programming language Python http ://www.webcitation 
255	.org/5ru5w3vSR 
256	2010-08-10 http ://myeve .eve-online 
257	.com/devblog 
258	.asp 
259	?a=blog&bid=488 Stackless Python 2.5 
260	CCP Games 2007-07-23 porkbelly Eve Insider Dev Blog As you may well know , your favorite space-game owes its existence to the programming language Python http ://www.webcitation 
261	.org/5ru5w3vSR 
262	2010-08-10 http ://www.2kgames.com/civ4/blog_03.htm 
263	Modding Sid Meier 's Civilization IV Caudill Barry 2005-09-20 Firaxis Games http ://www.webcitation 
264	.org/5ru5VItfv 
265	2010-08-10 Sid Meier 's Civilization IV Developer Blog we created three levels of tools ... 
266	The next level offers Python and XML support , letting modders with more experience manipulate the game world and everything in it . 
267	http ://www.2kgames.com/civ4/blog_03.htm 
268	Modding Sid Meier 's Civilization IV Caudill Barry 2005-09-20 Firaxis Games http ://www.webcitation 
269	.org/5ru5VItfv 
270	2010-08-10 Sid Meier 's Civilization IV Developer Blog we created three levels of tools ... 
271	The next level offers Python and XML support , letting modders with more experience manipulate the game world and everything in it . 
272	and has been adopted as first of the three available programming language in Google App Engine , the other two being Java and Go . 
273	http ://code .google 
274	.com/apis/documents/docs/1.0/developers_guide_python 
275	.html 
276	Python Language Guide (v1.0) 
277	Google Documents List Data API v1.0 
278	Google http ://www.webcitation 
279	.org/5ru5FHxfV 
280	2010-08-10 http ://code .google 
281	.com/apis/documents/docs/1.0/developers_guide_python 
282	.html 
283	Python Language Guide (v1.0) 
284	Google Documents List Data API v1.0 
285	Google http ://www.webcitation 
286	.org/5ru5FHxfV 
287	2010-08-10 Because of its similarities to Lisp , Python has also been used in Artificial Intelligence ( AI ) . 
288	AI in Python http ://www.ainewsletter.com/newsletters/aix_0508.htm#python_ai_ai 
289	AI in Python http ://www.ainewsletter.com/newsletters/aix_0508.htm#python_ai_ai 
290	PyAIML , an interpreter package for AIML , the Artificial Intelligence Markup Language http ://pypi.python 
291	.org/pypi/PyAIML 
292	PyAIML , an interpreter package for AIML , the Artificial Intelligence Markup Language http ://pypi.python 
293	.org/pypi/PyAIML 
294	Artificial Intelligence : A Modern Approach http ://aima.cs 
295	.berkeley 
296	.edu/ 
297	Artificial Intelligence : A Modern Approach http ://aima.cs 
298	.berkeley 
299	.edu/ 
300	For many operating systems , Python is a standard component ; it ships with most Linux distribution , FreeBSD , NetBSD , OpenBSD and with Mac OS X and can be used from the terminal . 
301	A number of Linux distributions use installers written in Python : Ubuntu uses the Ubiquity installer , while Red Hat Linux and Fedora use the Anaconda installer . 
302	Gentoo Linux uses Python in its package management system , Portage and the standard tool to access it , emerge . 
303	Pardus uses it for administration and during system boot . 
304	http ://www.pardus 
305	.org.tr/eng/projects/comar/Python 
306	InPardus .html 
307	Pardus : TÜBİTAK / UEKAE pardus .org.tr 
308	2008-11-24 http ://www.pardus 
309	.org.tr/eng/projects/comar/Python 
310	InPardus .html 
311	Pardus : TÜBİTAK / UEKAE pardus .org.tr 
312	2008-11-24 Python has also seen extensive use in the information security industry , including exploit development . 
313	http ://www.immunitysec.com/products-immdbg 
314	.shtml 
315	Welcome to Immunity Debugger immunitysec.com 
316	2008-11-24 http ://oss.coresecurity 
317	.com/ 
318	CORE Security Technologies ' open source software repository immunitysec.com 
319	Products and discussion of this use of Python include http ://www.immunitysec.com/products-immdbg 
320	.shtml 
321	Welcome to Immunity Debugger immunitysec.com 
322	2008-11-24 ; http ://oss.coresecurity 
323	.com/ 
324	CORE Security Technologies ' open source software repository immunitysec.com 
325	http ://wapiti .sourceforge 
326	.net/ 
327	Wapiti - Web application security auditor wapiti .sourceforge 
328	.net 
329	2008-11-24 http ://wapiti .sourceforge 
330	.net/ 
331	Wapiti - Web application security auditor wapiti .sourceforge 
332	.net 
333	2008-11-24 September 2011 September 2011 September 2011 September 2011 Among the users of Python are YouTube http ://www.python 
334	.org/about/quotes 
335	/ Quotes about Python python .org 
336	~2006 2012-01-08 http ://www.python 
337	.org/about/quotes 
338	/ Quotes about Python python .org 
339	~2006 2012-01-08 and the original BitTorrent client . 
340	http ://www.onlamp.com/pub/a/python/2003/7/17/pythonnews 
341	.html 
342	Review of original BitTorrent software September 24 , 2011 http ://www.onlamp.com/pub/a/python/2003/7/17/pythonnews 
343	.html 
344	Review of original BitTorrent software September 24 , 2011 Large organizations that make use of Python include Google , http ://python .org/about/quotes 
345	/ Quotes about Python Python .org 
346	2008-11-24 http ://python .org/about/quotes 
347	/ Quotes about Python Python .org 
348	2008-11-24 Yahoo! 
349	, http ://wiki.python 
350	.org/moin/OrganizationsUsingPython 
351	Organizations Using Python Python .org 
352	2009-01-15 http ://wiki.python 
353	.org/moin/OrganizationsUsingPython 
354	Organizations Using Python Python .org 
355	2009-01-15 CERN , http ://cdsweb.cern.ch/record/974627 
356	?ln=no CERN Document Server : Record#974627 : Python : the holy grail of programming Cdsweb.cern.ch 
357	2011-04-19 http ://cdsweb.cern.ch/record/974627 
358	?ln=no CERN Document Server : Record#974627 : Python : the holy grail of programming Cdsweb.cern.ch 
359	2011-04-19 NASA , http ://www.python 
360	.org/about/success/usa/ 
361	Python Success Stories Python .org 
362	2008-11-24 http ://www.python 
363	.org/about/success/usa/ 
364	Python Success Stories Python .org 
365	2008-11-24 ILM , http ://www.python 
366	.org/about/success/ilm 
367	/ Python Success Stories Python .org 
368	2003-01-17 http ://www.python 
369	.org/about/success/ilm 
370	/ Python Success Stories Python .org 
371	2003-01-17 and ITA . 
372	http ://www.eweek 
373	.com/c/a/Application-Development/Python-Slithers-into-Systems 
374	/ eweek .com 
375	September 24 , 2011 http ://www.eweek 
376	.com/c/a/Application-Development/Python-Slithers-into-Systems 
377	/ eweek .com 
378	September 24 , 2011 Most of the Sugar software for the One Laptop per Child XO , now developed at Sugar Labs , is written in Python . 
379	http ://sugarlabs .org/go/Sugar 
380	What is Sugar ? - Sugar Labs sugarlabs .org 
381	2008-05-10 0r-2-11 http ://sugarlabs .org/go/Sugar 
382	What is Sugar ? - Sugar Labs sugarlabs .org 
383	2008-05-10 0r-2-11 thumb292pxSyntax highlightingSyntax-highlightedPython 2.x 
384	code . 
385	Python syntax and semantics Python was intended to be a highly readable language . 
386	It is designed to have an uncluttered visual layout , frequently using English keywords where other languages use punctuation . 
387	Python requires less boilerplate than traditional manifestly typed structured languages such as C or Pascal , and has a smaller number of syntactic exceptions and special cases than either of these . 
388	Is Python a good language for beginning programmers ? http ://www.python 
389	.org/doc/faq/general/#is-python-a-good-language-for-beginning-programmers 
390	General Python FAQ March 7 , 2005 2007-03-21 Python Software Foundation Is Python a good language for beginning programmers ? http ://www.python 
391	.org/doc/faq/general/#is-python-a-good-language-for-beginning-programmers 
392	General Python FAQ March 7 , 2005 2007-03-21 Python Software Foundation For a detailed description of the differences between 2.x 
393	and 3.x 
394	versions , see History of Python . 
395	The simplicity of Python is demonstrated by its version of the classic " Hello world " program : print ( " Hello world " ) Python uses whitespace indentation , rather than curly braces or keywords , to delimit block ( a feature also known as the off-side rule ) . 
396	An increase in indentation comes after certain statements ; a decrease in indentation signifies the end of the current block . 
397	http ://www .secnetix 
398	.de/~olli/Python/block_indentation 
399	.hawk 
400	Myths about indentation in Python Secnetix .de 
401	2011-04-19 http ://www .secnetix 
402	.de/~olli/Python/block_indentation 
403	.hawk 
404	Myths about indentation in Python Secnetix .de 
405	2011-04-19 Python 's statements include (among others ) : Each statement has its own semantics : for example , the def statement does not execute its block immediately , unlike most other statements . 
406	Python does not support first-class continuations , and according to Guido van Rossum it never will . 
407	Language Design Is Not Just Solving Puzzles http ://www.artima.com/weblogs/viewpost 
408	.jsp?thread=147358 
409	Guido van Rossum February 9 , 2006 2007-03-21 Artima forums Artima Language Design Is Not Just Solving Puzzles http ://www.artima.com/weblogs/viewpost 
410	.jsp?thread=147358 
411	Guido van Rossum February 9 , 2006 2007-03-21 Artima forums Artima However , better support for coroutine -like functionality is provided in 2.5 
412	, by extending Python 's generators . 
413	http ://www.python 
414	.org/peps/pep-0342.html 
415	Coroutines via Enhanced Generators April 21 , 2006 Guido van Rossum Phillip J. 
416	Eby Python Enhancement Proposals Python Software Foundation 2007-03-21 http ://www.python 
417	.org/peps/pep-0342.html 
418	Coroutines via Enhanced Generators April 21 , 2006 Guido van Rossum Phillip J. 
419	Eby Python Enhancement Proposals Python Software Foundation 2007-03-21 Prior to 2.5 
420	, generators were lazy iterator ; information was passed unidirectionally out of the generator . 
421	As of Python 2.5 
422	, it is possible to pass information back into a generator function . 
423	Python expressions are similar to languages such as C and Java . 
424	In Python , a distinction between expressions and statements is rigidly enforced , in contrast to languages such as Common Lisp , Scheme , or Ruby . 
425	This leads to some duplication of functionality , e.g 
426	. 
427	Statements cannot be a part of an expression and so list and other comprehensions or lambda expressions , all being expressions , cannot contain statements . 
428	A particular case of this is that an assignment statement such as a = 1 cannot form part of the conditional expression of a conditional statement . 
429	This has the advantage of avoiding a classic C error of mistaking an assignment operator = for an equality operator = = in conditions : if ( c = 1 ) { ... 
430	} is valid C code but if c = 1 : ... 
431	causes a syntax error in Python . 
432	Method on objects are function attached to the object 's class ; the syntax instance .method(argument 
433	) is , for normal methods and functions , syntactic sugar for Class .method(instance 
434	, argument ) . 
435	Python methods have an explicit self parameter to access instance data , in contrast to the implicit self in some other object-oriented programming languages ( for example , Java , C++ or Ruby ) . 
436	http ://www.python 
437	.org/doc/faq/general/#why-must-self-be-used-explicitly-in-method-definitions-and-calls 
438	Why must 'self ' be used explicitly in method definitions and calls ? Python FAQ Python Software Foundation http ://www.python 
439	.org/doc/faq/general/#why-must-self-be-used-explicitly-in-method-definitions-and-calls 
440	Why must 'self ' be used explicitly in method definitions and calls ? Python FAQ Python Software Foundation Python uses duck typing and has typed objects but untyped variable names . 
441	Type constraints are not checked at compile time ; rather , operations on an object may fail , signifying that the given object is not of a suitable type . 
442	Despite being dynamically typed , Python is strongly typed , forbidding operations that are not well-defined ( for example , adding a number to a string ) rather than silently attempting to make sense of them . 
443	Python allows programmers to define their own types using class , which are most often used for object-oriented programming . 
444	New instances of classes are constructed by calling the class ( for example , SpamClass( ) or EggsClass( ) ) , and the classes themselves are instances of the metaclass type ( itself an instance of itself ) , allowing metaprogramming and reflection . 
445	Prior to version 3.0, 
446	Python had two kinds of classes : "old-style " and "new-style " . 
447	The Python Language Reference , section 3.3 
448	. 
449	New-style and classic classes , for release 2.7.1 
450	2011-01-12 http ://docs .python 
451	.org/reference/datamodel 
452	.html#new-style-and-classic-classes 
453	The Python Language Reference , section 3.3 
454	. 
455	New-style and classic classes , for release 2.7.1 
456	2011-01-12 http ://docs .python 
457	.org/reference/datamodel 
458	.html#new-style-and-classic-classes 
459	Old-style classes were eliminated in Python 3.0, 
460	making all classes new-style . 
461	In versions between 2.2 
462	and 3.0, 
463	both kinds of classes could be used . 
464	The syntax of both styles is the same , the difference being whether the class object is inherited from , directly or indirectly ( all new-style classes inherit from object and are instances of type ) . 
465	Here is a summary of Python 3 's built-in types : In contrast with some programming languages , integer division is defined to round towards minus infinity . 
466	Therefore 7 // 3 is 2 , but ( −7 ) // 3 is −3 . 
467	This is uniform and consistent : for instance , it means that the equation ( a+b ) // b = = a // b + 1 is always true , whereas in languages such as C , (-6+7 ) // 7 = = -6 // 7 . 
468	It also means that the equation b * ( a // b ) + a % b = = a is valid for both positive and negative values of a . 
469	However , maintaining the validity of this equation means that while the result of a % b is , as expected , in the half-open interval [0 , b ) , where b is a positive integer , it has to lie in the interval ( b ,0] when b is negative . 
470	http ://python-history .blogspot.com/2010/08/why-pythons-integer-division-floors 
471	.html 
472	Why Python 's Integer Division Floors 2010-08-25 http ://python-history .blogspot.com/2010/08/why-pythons-integer-division-floors 
473	.html 
474	Why Python 's Integer Division Floors 2010-08-25 Python provides a round function for rounding floats to integers . 
475	Versions before 3 use round-away-from-zero : round(0.5 
476	) is 1.0, 
477	round(-0.5 
478	) is -1.0. 
479	http ://docs .python 
480	.org/library/functions 
481	.html#round 
482	2011-08-14 round The Python standard library , release 2.7 
483	, §2 : Built-in functions http ://docs .python 
484	.org/library/functions 
485	.html#round 
486	2011-08-14 round The Python standard library , release 2.7 
487	, §2 : Built-in functions Python 3 uses round-to-even : round( 1.5 
488	) is 2.0, 
489	round( 2.5 
490	) is 2.0. 
491	http ://docs .python 
492	.org/py3k/library/functions 
493	.html#round 
494	2011-08-14 round The Python standard library , release 3.2 
495	, §2 : Built-in functions http ://docs .python 
496	.org/py3k/library/functions 
497	.html#round 
498	2011-08-14 round The Python standard library , release 3.2 
499	, §2 : Built-in functions The Decimal type/class in module decimal ( since version 2.4 
500	) provides exact numerical representation and several rounding modes . 
501	Python allows boolean expressions with multiple equality relations in a manner that is consistent with general usage in mathematics . 
502	For example , the expression a &lt ; b &lt ; c tests whether a is less than b and b is less than c . 
503	C-derived languages interpret this expression differently : in C , the expression would first evaluate a &lt ; b , resulting in 0 or 1 , and that result would then be compared with c . 
504	Python Essential Reference , David M Beazley January 2012 CPython The mainstream Python implementation , known as CPython , is written in C meeting the C89 standard . 
505	http ://www.python 
506	.org/dev/peps/pep-0007/ 
507	PEP 7 - Style Guide for C Code Python .org 
508	2008-11-24 http ://www.python 
509	.org/dev/peps/pep-0007/ 
510	PEP 7 - Style Guide for C Code Python .org 
511	2008-11-24 CPython compiles Python programs into intermediate bytecode , http ://docs .python 
512	.org/lib/bytecodes 
513	.html 
514	CPython byte code Docs .python 
515	.org 
516	2011-04-19 http ://docs .python 
517	.org/lib/bytecodes 
518	.html 
519	CPython byte code Docs .python 
520	.org 
521	2011-04-19 which are then executed by the virtual machine . 
522	http ://www.troeger 
523	.eu/teaching/pythonvm08.pdf 
524	Python 2.5 
525	internals PDF 2011-04-19 http ://www.troeger 
526	.eu/teaching/pythonvm08.pdf 
527	Python 2.5 
528	internals PDF 2011-04-19 It is distributed with a large standard library written in a mixture of C and Python . 
529	CPython ships in versions for many platforms , including Microsoft Windows and most modern Unix-like systems . 
530	CPython was intended from almost its very conception to be cross-platform ; its use and development on esoteric platforms such as Amoeba , alongside more conventional ones like Unix and Mac OS , has greatly helped in this regard . 
531	http ://www.oreilly 
532	.com/pub/a/oreilly/frank/rossum_1099.html 
533	O'Reilly - An Interview with Guido van Rossum Oreilly .com 
534	2008-11-24 http ://www.oreilly 
535	.com/pub/a/oreilly/frank/rossum_1099.html 
536	O'Reilly - An Interview with Guido van Rossum Oreilly .com 
537	2008-11-24 Stackless Python is a significant fork of CPython that implements microthread ; it does not use the C memory stack . 
538	It can be expected to run on approximately the same platforms that CPython runs on . 
539	Google started a project called Unladen Swallow in 2009 with the aims of increasing the speed of the Python interpreter by 5 times by using the LLVM and improving its multithreading ability to scale to thousands of cores . 
540	http ://code .google 
541	.com/p/unladen-swallow/wiki/ProjectPlan 
542	Plans for optimizing Python September 24 , 2011 http ://code .google 
543	.com/p/unladen-swallow/wiki/ProjectPlan 
544	Plans for optimizing Python September 24 , 2011 Jython compiles the Python program into Java byte code , which can then be executed by every Java Virtual Machine implementation . 
545	This also enables the use of Java class library functions from the Python program . 
546	IronPython follows a similar approach in order to run Python programs on the .NET 
547	Common Language Runtime . 
548	PyPy is a fast self-hosting implementation of Python , written in Python , that can output several types of bytecode , object code and intermediate language . 
549	There also exist compilers to high-level object language , with either unrestricted Python , a restricted subset of Python , or a language similar to Python as the source language . 
550	PyPy is of this type , compiling RPython to several languages ; other examples include Pyjamas compiling to JavaScript ; Shed Skin compiling to C++ ; and Cython and Pyrex compiling to C . 
551	In 2005 Nokia released a Python interpreter for the Series 60 mobile phone called PyS60 . 
552	It includes many of the modules from the CPython implementations and some additional modules for integration with the Symbian operating system . 
553	This project has been kept up to date to run on all variants of the S60 platform and there are several third party modules available . 
554	The Nokia N900 also supports Python with gtk widget libraries , with the feature that programs can be both written and run on the device itself . 
555	There is also a Python interpreter for Windows CE devices ( including Pocket PC ) . 
556	It is called PythonCE. 
557	http ://pythonce .sourceforge 
558	.net/ 
559	PythonCE Pythonce .sourceforge 
560	.net 
561	2011-04-19 http ://pythonce .sourceforge 
562	.net/ 
563	PythonCE Pythonce .sourceforge 
564	.net 
565	2011-04-19 There are additional tools available for easy application and GUI development . 
566	The PyMite virtual machine began in 2000 and made its first public appearance at PyCon 2003 . 
567	http ://wiki.python 
568	.org/moin/PyMite 
569	PyMite : Python-on-a-chip Wiki.python 
570	.org 
571	2009-04-19 2011-04-19 http ://wiki.python 
572	.org/moin/PyMite 
573	PyMite : Python-on-a-chip Wiki.python 
574	.org 
575	2009-04-19 2011-04-19 PyMite was folded into in 2009 . 
576	http ://deanandara.com/PyMite/2010-State 
577	.html 
578	PyMite Deanandara.com 
579	2011-04-19 http ://deanandara.com/PyMite/2010-State 
580	.html 
581	PyMite Deanandara.com 
582	2011-04-19 Python -on-a-Chip ( p14p ) is a project to develop a reduced Python virtual machine ( codenamed PyMite ) that runs a significant subset of the Python language on microcontrollers without an OS in as little as 4KB of RAM. 
583	http ://pythononachip.org/ 
584	PyMite Python-on-a-Chip 2011-04-19 http ://pythononachip.org/ 
585	PyMite Python-on-a-Chip 2011-04-19 Around 2004 June 2010 , the project created a specialized translator and assembler that targets resource-constrained microcontroller . 
586	ChinesePython ( 中蟒 ) is a Python programming language using a Chinese-language lexicon . 
587	Besides reserved words and variable names , most data type operations can be coded in Chinese as well . 
588	March 2011 Python is available on Android as an option as part of the Android Scripting Environment . 
589	http ://code .google 
590	.com/p/android-scripting 
591	/ android-scripting September 24 , 2011 http ://code .google 
592	.com/p/android-scripting 
593	/ android-scripting September 24 , 2011 Most Python implementations ( including CPython ) can function as a command line interpreter , for which the user enters statements sequentially and receives the results immediately . 
594	In short , Python acts as a shell . 
595	While the semantics of the other modes of execution ( bytecode compilation , or compilation to native code ) preserve the sequential semantics , they offer a speed boost at the cost of interactivity , so they are usually only used outside of a command-line interaction ( e .g. 
596	, when importing a module ) . 
597	Other shells add capabilities beyond those in the basic interpreter , including IDLE and IPython . 
598	While generally following the visual style of the Python shell , they implement features like auto-completion , retention of session state , and syntax highlighting . 
599	Some implementations can compile not only to bytecode , but can turn Python code into machine code . 
600	So far , this has only been done for restricted subsets of Python . 
601	PyPy takes this approach , naming its restricted compilable version of Python RPython . 
602	Psyco is a specialising just in time compiler that integrates with CPython and transforms bytecode to machine code at runtime . 
603	The produced code is specialised for certain data types and is faster than standard Python code . 
604	Psyco is compatible with all Python code , not only a subset . 
605	http ://psyco .sourceforge 
606	.net/introduction 
607	.html 
608	Introduction to Psyco Psyco .sourceforge 
609	.net 
610	2011-04-19 http ://psyco .sourceforge 
611	.net/introduction 
612	.html 
613	Introduction to Psyco Psyco .sourceforge 
614	.net 
615	2011-04-19 Python 's development is conducted largely through the Python Enhancement Proposal ( PEP ) process . 
616	PEPs are standardized design documents providing general information related to Python , including proposals , descriptions , design rationale , and explanations for language features . 
617	http ://www.python 
618	.org/dev/peps/pep-0001/ 
619	PEP 1 - PEP Purpose and Guidelines Python .org 
620	2011-04-19 http ://www.python 
621	.org/dev/peps/pep-0001/ 
622	PEP 1 - PEP Purpose and Guidelines Python .org 
623	2011-04-19 Outstanding PEPs are reviewed and commented upon by Van Rossum , the Python project 's Benevolent Dictator for Life ( leader / language architect ) . 
624	http ://www.python 
625	.org/doc/essays/pepparade 
626	.html 
627	Parade of the PEPs Python .org 
628	2008-11-24 http ://www.python 
629	.org/doc/essays/pepparade 
630	.html 
631	Parade of the PEPs Python .org 
632	2008-11-24 CPython 's developers also communicate over a mailing list , python-dev , which is the primary forum for discussion about the language 's development ; specific issues are discussed in the Roundup bug tracker maintained at python .org 
633	. 
634	http ://classic-web.archive 
635	.org/web/20080229153753/http 
636	://www.python 
637	.org/dev/intro/ 
638	Guido , Some Guys , and a Mailing List : How Python is Developed Cannon Brett python .org 
639	Python Software Foundation 2009-06-27 http ://classic-web.archive 
640	.org/web/20080229153753/http 
641	://www.python 
642	.org/dev/intro/ 
643	Guido , Some Guys , and a Mailing List : How Python is Developed Cannon Brett python .org 
644	Python Software Foundation 2009-06-27 Development takes place at the self-hosted hg .python 
645	.org 
646	. 
647	CPython 's public releases come in three types , distinguished by which part of the version number is incremented : A number of alpha_ beta_ and release-candidates are also released as previews and for testing before the final release is made . 
648	Although there is a rough schedule for each release , this is often pushed back if the code is not ready . 
649	The development team monitor the state of the code by running the large unit test suite during development , and using the BuildBot continuous integration system . 
650	http ://python .org/dev/buildbot/ 
651	Python Buildbot September 24 , 2011 http ://python .org/dev/buildbot/ 
652	Python Buildbot September 24 , 2011 Python has a large standard library , commonly cited as one of Python 's greatest strengths , Przemyslaw Piotrowski , , Oracle Technology Network , July 2006 . 
653	Retrieved October 21 , 2008 . 
654	providing pre-written tools suited to many tasks . 
655	This is deliberate and has been described as a "batteries included " http ://www.python 
656	.org/about/ 
657	About Python python .org 
658	Python Software Foundation 2009-06-27 http ://www.python 
659	.org/about/ 
660	About Python python .org 
661	Python Software Foundation 2009-06-27 Python philosophy . 
662	The modules of the standard library can be augmented with custom modules written in either C or Python . 
663	Boost C++ Libraries includes a library , Boost.Python 
664	, to enable interoperability between C++ and Python . 
665	Because of the wide variety of tools provided by the standard library , combined with the ability to use a lower-level language such as C and C++ , which is already capable of interfacing between other libraries , Python can be a powerful glue language between languages and tools . 
666	The standard library is particularly well tailored to writing Internet-facing applications , with a large number of standard formats and protocols ( such as MIME and HTTP ) already supported . 
667	Modules for creating graphical user interface , connecting to relational database , arithmetic with arbitrary precision decimals , manipulating regular expression , and doing unit testing are also included . 
668	http ://www.python 
669	.org/peps/pep-0327.html 
670	PEP 327 - Decimal Data Type Python .org 
671	2008-11-24 http ://www.python 
672	.org/peps/pep-0327.html 
673	PEP 327 - Decimal Data Type Python .org 
674	2008-11-24 Some parts of the standard library are covered by specifications ( for example , the WSGI implementation wsgiref follows ) , but the majority of the modules are not . 
675	They are specified by their code , internal documentation , and test suite ( if supplied ) . 
676	However , because most of the standard library is cross-platform Python code , there are only a few modules that must be altered or completely rewritten by alternative implementations . 
677	The standard library is not essential to run Python or embed Python within an application . 
678	Blender 2.49 
679	for instance omits most of the standard library . 
680	For software testing , the standard library provides the unittest and doctest modules . 
681	Python 's design and philosophy have influenced several programming languages , including : Python 's development practices have also been emulated by other languages . 
682	The practice of requiring a document describing the rationale for , and issues surrounding , a change to the language ( in Python 's case , a PEP ) is also used in Tcl http ://www.tcl.tk/cgi-bin/tct/tip/3.html 
683	TIP # 3 : TIP Format Tcl.tk 
684	2008-11-24 http ://www.tcl.tk/cgi-bin/tct/tip/3.html 
685	TIP # 3 : TIP Format Tcl.tk 
686	2008-11-24 and Erlang http ://www.erlang 
687	.org/eeps/eep-0001.html 
688	EEP - Erlang Enhancement Proposal Erlang .org 
689	2011-04-19 http ://www.erlang 
690	.org/eeps/eep-0001.html 
691	EEP - Erlang Enhancement Proposal Erlang .org 
692	2011-04-19 because of Python 's influence . 
693	Free software Python Computer programming 30em Python Programming Topic:Python Python Programming Python Category :Python ( programming language ) Category :Class-based programming languages Category :Dynamically typed programming languages Category :Cross-platform free software Category :Object-oriented programming languages Category :Scripting languages Category :Text-oriented programming languages Category :Programming languages created in 1991 Category :High-level programming languages ru de af:Python als :Python ( Programmiersprache ) ar :بايثون an :Python az:Python ( proqramlaşdırma dili ) bn :পাইথন ( প্রোগ্রামি ং ভাষা ) bg :Python bs :Python programski jezik ca :Python cs :Python da:Python ( programmeringssprog ) de:Python ( Programmiersprache ) et :Python ( programmeerimiskeel ) el :Python es :Python eo:Python ( programlingvo ) eu:Python fa :پایتون ( زبان برنامه‌نویسی ) fr :Python ( langage ) gl:Python ko :파이썬 hi :पाइथन ( प्रोग्रामन भाषा ) hr:Python id :Python ( bahasa pemrograman ) ia :Python ( linguage de programmation ) is :Python ( forritunarmál ) it :Python he :פייתון ( שפת תכנות ) ka :პითონი ( პროგრამირების ენა ) kk :Python la:Python lv:Python lt :Python jbo :paiton hu:Python ( programozási nyelv ) ml :പൈത്തൺ ( പ്രോഗ്രാമിങ്ങ ് ഭാഷ ) mr :पायथॉन ms :Python nl :Python ( programmeertaal ) ne :पाइथन प्रोग्रामिङ्ग भाष ा ja:Python no:Python pl:Python pt:Python ro:Python ru:Python sq:Python si :පයිතන ් simple :Python ( programming language ) sk :Python ( programovací jazyk ) sl :Python ( programski jezik ) sr :Пајтон ( програмски језик ) sh :Python programski jezik fi:Python sv:Python ( programspråk ) tl:Python ( programming language ) ta :பைத்தான ் te :పైథాన ్ ( కంప్యూటర ్ భాష ) th :ภาษาไพทอน tg :Python tr :Python ( programlama dili ) bug:Python uk :Python vi:Python ( ngôn ngữ lập trình ) zh :Python The ifstatement , which conditionally executes a block of code , along with else and elif ( a contraction of else-if ) . 
694	The forstatement , which iterates over an iterable object , capturing each element to a local variable for use by the attached block . 
695	The whilestatement , which executes a block of code as long as its condition is true . 
696	The try statement , which allows exceptions raised in its attached code block to be caught and handled by except clauses ; it also ensures that clean-up code in a finally block will always be run regardless of how the block exits . 
697	The classstatement , which executes a block of code and attaches its local namespace to a class , for use in object-oriented programming . 
698	The def statement , which defines a function or method . 
699	The with statement ( from Python 2.5 
700	) , which encloses a code block within a context manager ( for example , acquiring a lock before the block of code is run , and releasing the lock afterwards ) . 
701	The pass statement , which serves as a NOP and can be used in place of a code block . 
702	The assertstatement , used during debugging to check for conditions that ought to apply . 
703	The yield statement , which returns a value from a generator function . 
704	( From Python 2.5 
705	, yield is also an operator . 
706	This form is used to implement coroutine -- see below . 
707	) In Python 2 , the / operator on integers does integer division : it truncates the result to an integer . 
708	Floating -point division on integers can be achieved by converting one of the integers to a float ( e .g 
709	. 
710	float( x ) / y ) . 
711	In Python 3 , the result of / is always a floating-point value . 
712	This behaviour can be enabled in Python 2.2+ 
713	using from future import division . 
714	In both Python 2.2+ 
715	and Python 3 , // can be used to do integer division . 
716	In Python , = = compares by value , in contrast to Java , where it compares by reference . 
717	( Value comparisons in Java use the equals( ) method . 
718	) Python 's is operator may be used to compare object identities ( comparison by reference ) . 
719	Comparisons may be chained , for example a < = b < = c . 
720	Python uses the words and , or , not for its boolean operators rather than the symbolic && , | | , ! 
721	used in C. 
722	Python has a type of expression known as a list comprehension . 
723	Python 2.4 
724	extended list comprehensions into a more general expression known as a generator expression . 
725	http ://www.python 
726	.org/dev/peps/pep-0289/ 
727	Generator expressions Python enhancement proposals PEP 289 2002-01-30 2009-01-18 Raymond Hettinger Python software foundation 2011-07-12 http ://www.python 
728	.org/dev/peps/pep-0289/ 
729	Generator expressions Python enhancement proposals PEP 289 2002-01-30 2009-01-18 Raymond Hettinger Python software foundation 2011-07-12 Anonymous function are implemented using lambda expressions ; however , these are limited in that the body can only be a single expression . 
730	Conditional expressions in Python are written as x if c else y http ://www.python 
731	.org/dev/peps/pep-0308/ 
732	Conditional expressions Python enhancement proposals PEP 308 2003-02-07 2007-06-28 Guido van Rossum Raymond Hettinger Python software foundation 2011-07-13 http ://www.python 
733	.org/dev/peps/pep-0308/ 
734	Conditional expressions Python enhancement proposals PEP 308 2003-02-07 2007-06-28 Guido van Rossum Raymond Hettinger Python software foundation 2011-07-13 ( different in order of operands from the ? : operator common to many other languages ) . 
735	Python makes a distinction between list and tuple . 
736	Lists are written as [1 , 2 , 3] , are mutable , and cannot be used as the keys of dictionaries ( dictionary keys must be immutable in Python ) . 
737	Tuples are written as ( 1 , 2 , 3 ) , are immutable and thus can be used as the keys of dictionaries , provided all elements of the tuple are immutable . 
738	The parentheses around the tuple are optional in some contexts . 
739	Tuples can appear on the left side of an equal sign ; hence a statement like x , y = y , x can be used to swap two variables . 
740	Python 2 has a " string format " operator % . 
741	This functions analogous to printf format strings in C , e.g 
742	. 
743	"foo= %s bar= %d " % ( "blah" , 2 ) evaluates to "foo=blah bar=2 " . 
744	In Python 3 , this was obsoleted in favour of the format( ) method of the str class , e.g 
745	. 
746	"foo={ 0 } bar={ 1 }" .format( 
747	"blah" , 2 ) . 
748	Python has various kinds of string literal : Strings delimited by single or double quotation marks . 
749	Unlike in Unix shell , Perl and Perl -influenced languages , single quotation marks and double quotation marks function similarly . 
750	Both kinds of string use the backslash ( ) as an escape character and there is no implicit string interpolation such as " $ foo " . 
751	Triple-quoted strings , which begin and end with a series of three single or double quotation marks . 
752	They may span multiple lines and function like here document in shells , Perl and Ruby . 
753	Raw string varieties , denoted by prefixing the string literal with an r . 
754	No escape sequences are interpreted ; hence raw strings are useful where literal backslashes are common , such as regular expression and Windows -style paths . 
755	Compare " @ -quoting " in C# . 
756	Python has index and slice expressions on lists , denoted as a[key ] , a[start :stop ] or a[start :stop :step] . 
757	Indexes are zero-based , and negative indexes are relative to the end . 
758	Slices take elements from the start index up to , but not including , the stop index . 
759	The third slice parameter , called step or stride , allows elements to be skipped and reversed . 
760	Slice indexes may be omitted , for example a[ : ] returns a copy of the entire list . 
761	Each element of a slice is a shallow copy . 
762	Strings delimited by single or double quotation marks . 
763	Unlike in Unix shell , Perl and Perl -influenced languages , single quotation marks and double quotation marks function similarly . 
764	Both kinds of string use the backslash ( ) as an escape character and there is no implicit string interpolation such as " $ foo " . 
765	Triple-quoted strings , which begin and end with a series of three single or double quotation marks . 
766	They may span multiple lines and function like here document in shells , Perl and Ruby . 
767	Raw string varieties , denoted by prefixing the string literal with an r . 
768	No escape sequences are interpreted ; hence raw strings are useful where literal backslashes are common , such as regular expression and Windows -style paths . 
769	Compare " @ -quoting " in C# . 
770	list comprehensions vs. 
771	for -loops conditional expressions vs. 
772	if blocks The eval( ) vs. 
773	exec( ) built-in functions ( in Python 2 , exec is a statement ) ; the former is for expressions , the latter is for statements . 
774	backwards-incompatible versions , where code is expected to break and must be manually ported . 
775	The first part of the version number is incremented . 
776	These releases happen infrequently—for example , version 3.0 
777	was released 8 years after 2.0. 
778	major or "feature " releases , which are largely compatible but introduce new features . 
779	The second part of the version number is incremented . 
780	These releases are scheduled to occur roughly every 18 months , and each major version is supported by bugfixes for several years after its release . 
781	http ://mail.python 
782	.org/pipermail/python-dev/2002-April/022739.html 
783	[ Python-Dev ] Release Schedules ( was Stability &amp; change ) Norwitz Neal 8 April 2002 2009-06-27 http ://mail.python 
784	.org/pipermail/python-dev/2002-April/022739.html 
785	[ Python-Dev ] Release Schedules ( was Stability &amp; change ) Norwitz Neal 8 April 2002 2009-06-27 bugfix releases , which introduce no new features but fix bugs . 
786	The third and final part of the version number is incremented . 
787	These releases are made whenever a sufficient number of bugs have been fixed upstream since the last release , or roughly every 3 months . 
788	Security vulnerabilities are also patched in bugfix releases . 
789	http ://python .org/dev/peps/pep-0006/ 
790	PEP 6 -- Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 http ://python .org/dev/peps/pep-0006/ 
791	PEP 6 -- Bug Fix Releases Baxter Anthony Aahz 2001-03-15 Python Software Foundation 2009-06-27 Pyrex and its derivative Cython are code translators that are targeted at writing fast C extensions for the CPython interpreter . 
792	The language is mostly Python with syntax extensions for C and C++ features . 
793	Both languages produce compilable C code as output . 
794	Boo uses indentation , a similar syntax , and a similar object model . 
795	However , Boo uses static typing and is closely integrated with the .NET 
796	framework . 
797	http ://boo.codehaus 
798	.org/Gotchas+for+Python+Users 
799	BOO - Gotchas for Python Users boo.codehaus 
800	.org 
801	2008-11-24 http ://boo.codehaus 
802	.org/Gotchas+for+Python+Users 
803	BOO - Gotchas for Python Users boo.codehaus 
804	.org 
805	2008-11-24 Cobra uses indentation and a similar syntax . 
806	Cobra 's " Acknowledgements " document lists Python first among languages that influenced it . 
807	http ://cobra-language .com/docs/acknowledgements 
808	/ Cobra - Acknowledgements cobra-language .com 
809	2010-04-07 http ://cobra-language .com/docs/acknowledgements 
810	/ Cobra - Acknowledgements cobra-language .com 
811	2010-04-07 However , Cobra directly supports design-by-contract , unit tests and optional static typing . 
812	http ://cobra-language .com/docs/python/ 
813	Cobra - Comparison to Python cobra-language .com 
814	2010-04-07 http ://cobra-language .com/docs/python/ 
815	Cobra - Comparison to Python cobra-language .com 
816	2010-04-07 ECMAScript borrowed iterator , generators , and list comprehension from Python . 
817	http ://wiki .ecmascript.org/doku.php 
818	?id=proposals :iterators_and_generators Proposals : iterators and generators [ES4 Wiki&#93 ; wiki .ecmascript.org 
819	2008-11-24 http ://wiki .ecmascript.org/doku.php 
820	?id=proposals :iterators_and_generators Proposals : iterators and generators [ES4 Wiki&#93 ; wiki .ecmascript.org 
821	2008-11-24 Go is described as incorporating the "development speed of working in a dynamic language like Python " . 
822	http ://www.techcrunch.com/2009/11/10/google-go-language/ 
823	Google’s Go : A New Programming Language That’s Python Meets C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 http ://www.techcrunch.com/2009/11/10/google-go-language/ 
824	Google’s Go : A New Programming Language That’s Python Meets C++ Kincaid Jason 2009-11-10 TechCrunch 2010-01-29 Groovy was motivated by the desire to bring the Python design philosophy to Java . 
825	James Strachan 2003-08-29 Groovy - the birth of a new dynamic language for the Java platform http ://radio.weblogs 
826	.com/0112098/2003/08/29.html 
827	James Strachan 2003-08-29 Groovy - the birth of a new dynamic language for the Java platform http ://radio.weblogs 
828	.com/0112098/2003/08/29.html 
829	OCaml has an optional syntax , called twt ( The Whitespace Thing ) , inspired by Python and Haskell . 
830	Mike Lin 2009-04-12 " The Whitespace Thing " for OCaml http ://people .csail 
831	.mit 
832	.edu/mikelin/ocaml+twt/ 
833	Mike Lin 2009-04-12 " The Whitespace Thing " for OCaml http ://people .csail 
834	.mit 
835	.edu/mikelin/ocaml+twt/ 
836	Comparison of command shells Comparison of programming languages Comparison of Python integrated development environments List of programming languages List of Python software Scipy Downey Allen B. 
837	Think Python : How to Think Like a Computer Scientist 978-0521725965 http ://www.greenteapress.com/thinkpython/html/index 
838	.html 
839	http ://www.computerworld.com 
840	.au/index.php/id 
841	;66665771 The A-Z of Programming Languages : Python Hamilton Naomi 5 August 2008 Computerworld 2010-03-31 – An interview with Guido Van Rossum on Python Lutz Mark Learning Python O'Reilly Media 2009 4th 978-0596158064 Pilgrim Mark Dive Into Python Apress 2004 978-1590593561 http ://diveintopython .net 
842	Pilgrim Mark Dive Into Python 3 Apress 2009 978-1430224150 http ://diveintopython3.net 
843	Summerfield Mark Programming in Python 3 Addison-Wesley Professional 2009 2nd 978-0321680563 http ://www.qtrac.eu/py3book 
844	.html 
845	http ://www.python 
846	.org 
847	newsgroup ( ) / Computers/Programming/Languages/Python Python 
